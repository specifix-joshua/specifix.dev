<?php

use Faker\Factory as Faker;

class AnswerTableSeeder extends Seeder {
  

    public function run() {

        $user_id = 1;
        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It might be because you are opening the database twice. Only open it once and do all of your transactions on that single instance. Also make sure that your previous transaction has finished before starting another one. You shouldn't have to worry about that, but in my experience Cordova's (PhoneGap) WebSQL is a bit finicky.   
CONTENT;
        $answer->question_id = 1;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        So there is an issue on GitHub that is not closed yet (As of today): https://github.com/emberjs/data/issues/1913;I do not know how to make it reload, but I thought that I will share the workaround that I did to resolve this issue.;I am using websockets, so when ever a new post is being created, I just send it through websocket and use the data to update the collection.;I am aware that this does not fix the issue with Ember Reload, but I guess this is a decent solution to the people who are already using Websockets / Socket.io.    
CONTENT;
        $answer->question_id = 2;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        As a workaround, if possible, you want to do all of your changes to the observable array in a single operation. For example, instead of adding and/or removing elements individually, you want to update the entire observable array at once, perhaps using ko.utils.arrayFilter to assign a filtered version of the observableArray back to itself.;self.data(ko.utils.arrayFilter(self.data(), function(x);return shouldKeepElement(x);If this is not possible (as is probably the case for you), you'll need to delay the adding of the item into the array until the remove animation is complete. This will probably involve an elaborate system of "levers and pulleys", so the resulting code is going to be pretty undesirable. The user experience will possibly also suffer, since "fast" user actions are going to need to be queued or disallowed.;Obviously an ideal solution is that this gets addressed in the next release of knockout. Until then, you can either "downgrade" to 2.1, or make a small patch to the existing knockout codebase. I can't vouch for this patch, and it may have undesirable consequences, but it should be a good stop-gap for this problem.  
CONTENT;
        $answer->question_id = 3;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I've noticed a few things in my path with Ember... and especially Ember-Data.;One of them is when dealing with associations I've had to manually re-add in the associations saving and having to re-save, and use addObject to in-memory associations as you're using a bit here.:);Note that this usually only happens when I'm updating more than one new object at once. For example, if your post is new, and your comment is also new.;I'm a little worried to see the following code in your codebase, because it shouldn't need to be there. You shouldn't ever have null or non-array objects in your associations. I'm not sure what hackery you did with the Adapter and why it was necessary, but I hope that wasn't the reason;if(comments.get('content') == null);comments.set('content', []);Anyway, the following code is how I would probably write your create action. It might help. I hope it does.;create: function();// get the post for association on the new comment;var post = this.get('post');// get the message to store on the new comment;var message = this.get('newMessage');var comment = this.store.createRecord('comment;message: message;post: post;comment.save().then(function(savedComment);post.get('comments').addObject(savedComment);Note that it's a lot simpler. Generally if you're doing tricky complicated things, something's amiss and it's time to go back to basics and add one thing at a time, testing thoroughly between additions.:);Good luck! 
CONTENT;
        $answer->question_id = 4;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        As far as I know you cannot really disable error checking (if that is what you're asking), if your code is broken.. fix it.;However you can disable so called "hints" for Javascript.;You can find this option in the tools menu (found under "options").;In the top menubar choose "editor" and go to the "hint" tab.;In the language dropdown select Javascript. You will see a list of warnings which you can disable.;You can however disable syntax highlighting, this is found in the same menu but under the option "fonts & colors" and the tab "highlighting". However you cannot choose for which language you want to do this.   
CONTENT;
        $answer->question_id = 6;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        When you fire a request based on params Ember Data doesn't know how those params necessarily translate into the models (aka it doesn't know that you have all of the records that have some sort of relationship param1). You can cache it yourself, but then you'd still need some sort of way of knowing those records from other records in your store.  
CONTENT;
        $answer->question_id = 7;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I do not think the chrome security restrictions you are talking about aply for a webview or a cordova application (and they are not specific to chrome but apply to any modern browser).;I have tested using jquery ajax function to load resources (json files, javascript files or html templates) from files located inside the www folder in a phonegap application and it works in android 2.3, 4.0.4, 4.1.2 and also 4.4.2 on a nexus 5 (so using the new chrome webview).    
CONTENT;
        $answer->question_id = 8;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You will probably have to look into hybrid applications such as Phonegap. HTML 5 alone has a relatively limited access to the device's functions.;Someone mentioned checking the video size or length from the metadata afterwards. That is most likely your only option, if you can not use, say, Phonegap.;To read the metadata, you can use FileReader.  
CONTENT;
        $answer->question_id = 9;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Seems your onclick is not being called, try doing;function closeSession();IN.User.logout();return true;Logout In LinkedIn;OR;Logout In LinkedIn;And js;function closeSession();if (typeof IN === 'object' && typeof IN.User === 'object' && IN.User.isAuthorized());//user logged in linkedin;//call linkedin logout with websites logout function as callback;alert("I m inside linkedin object check.."), //do you see this;IN.User.logout(logout);else;logout();function logout();window.location.href = "URL_TO_YOUR_LOGOUT.PHP 
CONTENT;
        $answer->question_id = 10;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I don't quite get what your question is, but I'd assume something like;what is the correct definition of a Monad and it's two methods in terms of JS?;In Haskell terms (taken from https://en.wikibooks.org/wiki/Haskell/Understanding_monads), it's simple;return:: a -> m a;(>>=):: m a -> (a -> m b) -> m b;(>>):: m a -> m b -> m b;For JavaScript terms, look no further, the short and simple answer is here https://github.com/fantasyland/fantasy-land#monad;along with other connected FP definitions.;Few words on the methods;One thing is unit (return in Haskell) must produce a monad (not precisely monad, but for sake of argument...), since it's like a constructor that puts a value inside the container. Array.of() is one example, jQuery() is another, and of course new Promise() as well.;In the Fantasy Land Specification this is the of() function/method.;The second one is important only because Haskell uses a definition of monad having unit and bind while others (fmap, join) are inferred form them.;The Haskell's bind is named chain in the Fantasy Land Specification because bind is defied on Function.prototype in JavaScript, so someone thought chain would be close enough.;And the reason why bind i.e. chain "must" return a monad of the same type is because of;(>>=):: m a -> (a -> m b) -> m b. In short, the Haskell's bind function must only accept a function that returns a monad (this part a -> m b), so you're getting the result of it.;The Haskell's then;is a mere convenience;and;sequences two monadic actions when the second action does not involve the result of the first, which is common for monads like IO.;In practice;It may irk you in JS, since there is no strict type enforcement, that you can always not follow the rules and return whatever you want from a Promise, for example, thus breaking the.then() chain of said promise(s).;Some monads like jQuery have "lifted" functions as methods that always return jQuery i.e. of the same type thus "protecting" the ability to chain.  
CONTENT;
        $answer->question_id = 11;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I think its a difficult question to answer as there's so many issues with different browsers. Some don't support SMIL transforms well (or being deprecated, but as mentioned there are fills for it), some don't support CSS3 transforms on SVG elements at all, so most of the 'solutions' out there, have some issue that may need to be compromised on. I think one browser doesn't support d attribute morph properly, but I can't recall which (so test this early on with required browsers if you do go down this route).;Canvas does typically seem to perform better on mobile for most animation I've seen or played with, certainly as the number of objects increases on page.;Other alternatives to webGL that was mentioned..;One option that kinda springs to mind is fabric.js, which is a canvas approach to SVG. It will take the same commands, elements as SVG, but display it on an HTML5 canvas. Turn off drag/freetransform within it (as I think its slowed down a bit with this if it needs extra checks), and I think it will be a bit faster, but its a while since I've played. This could be an interesting approach if you don't need specific DOM element access, but would be fine if you are ok with a similar object based setup.;If you insist on using SVG, then I would look at integrating it with another library (or even 2). Snap or SVG.js are both decent, but can be a bit slow. However, I would experiment with using Velocity.js or React.js with that svg library, as they have some methods that can squeeze out a bit more performance. Also GSAP may be worth a look.    
CONTENT;
        $answer->question_id = 12;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The Calendars resource doesn't have any attributes regarding visibility. However, since you're using the Events list, its resource has the visibility attribute where you can filter out (albeit manually) the items that are public.;public The event is public and event details are visible to all readers of the calendar.  
CONTENT;
        $answer->question_id = 13;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I have check your code and review your given link with example.;I have also check your UPDATE;I found that the **Kendo Grids** is the best option as per your requirement.;So i suggest to use: UPDATE 3    
CONTENT;
        $answer->question_id = 14;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        just add spaces 
CONTENT;
        $answer->question_id = 15;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        In your screenshot, I can see a breakpoint.;If you put a breakpoint, it will always break (except if you deactivate it, of course), even with blackboxing being active. 
CONTENT;
        $answer->question_id = 16;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The problem here is that when connecting to an API which is being hosted on another server, you must be using the same protocol. For local files, you use the file protocol (file://), wheres soundcloud uses: http:// or https://;Follow these steps;Get a server (XAMPP/LAMPP/WAMPP for PHP/Regular HTML, NodeJS for JS server, or Tornado for Python);Find the protocol which your server uses;If you server uses the http protocol, then your domain must be http://soundcloud.com/..., but if your server uses the https protocol, then the domain for the API must be https://..... So once you get the protocols to match, then you will be able to pass data through the API.   
CONTENT;
        $answer->question_id = 17;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Adding event.dataTransfer.setData(), should solve the problem. Once the element is recognized as draggable the browser will add a move cursor automatically once you drag. Of course, you will have to remove all other cursor: move declarations to see the cursor changing while dragging.;Minimal example;document.getElementById('target').addEventListener('dragstart', function (event);event.dataTransfer.setData('text/plain', '');bind(this));If you still want to change the icon (e.g. to use a custom drag icon), you could access the element style using event.target.style.cursor.;For more info see MDN Drag & Drop and MDN Recommended Drag Types  
CONTENT;
        $answer->question_id = 18;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Just an rough idea;Create a wrapper around karma to create a configuration object based on your criteria;In this case it will be a configuration object per browser type I guess;You can have a "configuration template" stored in a karma.conf.js file without the browsers property;There's a programmatic way to "enrich" this template adding more properties;Populate a queue with these configuration objects (it can be a simple array);Use the karma API to launch the karma server passing the right configuration every time;Tip: You can have at this point a "wrapper" configuration to stop or carry on if a running instance face some errors;This snippet of code shows how to load and fill a template configuration;function getConfigTemplate(path);var config =;// Maybe you want to add/remove some files from the list;// based on some criteria;files: [...];// Path of the template file;configFile: path;return config;var template = getConfigTemplate('/path/to/the/file');// Here I can append more stuff;template.browsers = ['Chrome'];Note: the merging strategy used in karma for the two configurations works as follow;- If a property is on the template, then it goes straight to the final configuration;- If a property is not on the template then the configuration "wrapper" object is looked up for that property;- If you a property on the template and add more on the wrapper, only the former will used and the latter will be ignored.;This code instead can be used to "chain" your karma servers;var currentServer = 0;var configs = [... ];function startKarmaServer(config, callback);karma.server.start(config, function (exitCode);if(exitCode);// an error occurred;// stop karma!;else;currentServer++;callback();function startServers();// here some code to run the karma servers in series;I would recommend async.js for the startServers function.;In case you're using an older version of karma (0.10 or below) you may have a look at this fix for closing the web server after the execution.;Also, note that the Continuos Integration flag (autoWatch) should be off in order to make the chaining work. 
CONTENT;
        $answer->question_id = 19;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If it's a popup/download issue you might be able to show it using an iframe?    
CONTENT;
        $answer->question_id = 20;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I think this might help you here with different browsers, but please define you question better or add at least some kinda example to make it clear.    
CONTENT;
        $answer->question_id = 21;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Maybe try to delay adding the event listeners until the DOM is ready?;The fact that your code works on a reload might indicate that the event listeners are being added too quickly on the first page load? 
CONTENT;
        $answer->question_id = 22;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        60%;sideContent;flex: 0 1 40%;canvas;border:1px solid black;aside;border: 1px solid blue    
CONTENT;
        $answer->question_id = 24;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Alright, so until someone comes out with a better solution, I'm just going to create symlinks within my intern-tests/ project folder.;To do it on Windows, this looks like the following;mklink /j "c:\www\intern-tests\project-symlinks\project2" c:\www\project2;which has the convention mklink /j "path\to\symlink" path\to\original (the /j is for junction);On Mac / Linux, you would do the following;ln -s /www/project2 /www/intern-tests/project-symlinks/project2;which has the convention ln -s /path/to/original /path/to/symlink (the -s is for symbolic);This looks like the following;www/;project1/;app/;lib/;project2/;app/;lib/;intern-tests/;project-symlinks/;project1/;project2/;node_modules/;tests/;functional/;project1-tests/;project2-tests/;unit/;project1-tests/;project2-tests/;intern.js;Gruntfile.js;And changes my test to the following;define;intern!object;intern/chai!assert;jquery;../../../project-symlinks/project2/lib/js/var/document;../../../project-symlinks/project2/lib/js/exports/file/functions/resizeInput;function(registerSuite, assert, $, document, resizeInput);registerSuite;name: 'functions;resizeInput: function();var $input = $(document.createElement('input'));resizeInput($input, 8, 20, 450, 200);assert.equal($input.width(), 450)    
CONTENT;
        $answer->question_id = 26;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The only solution I can think of - is waiting till GA request will finish, and only after that set location.href to desired file download link. But this is not really good from user's perspective. (This can be achieved with hit callback https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#hitCallback).;Probably HTML5 download attribute for href will solve the problem.;I have no OSX with safari to test, so this is only my thoughts.  
CONTENT;
        $answer->question_id = 27;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If I understand what you are trying to accomplish correctly (and if I don't please say so and I'll try to improve my answer), and assuming you have already managed to catch the zooming event some how (which is not a given), you could;Clone the div you are trying to get the CSS styles from;Append the clone to the dom in an unobtrusive way (ie, a way in which it will not cover any other elements on the document);Remove it's style attribute (just in case it was set by other scripts or functions);Get all the styles you need from it;Finally, remove the clone from the dom when you are done.;This demo works for me, regardless of page zoom.;jQuery(function($);function getRawStyles(sel, styles);sel = $(sel);var clone = sel.clone().removeAttr("style").attr("class", "cloneDiv").insertBefore(sel);$.each(styles, function(index, style);console.log(style + ": " + $(clone[0]).css(style));$(".cloneDiv").remove();$(document).ready(function();$("button", this).on("click", function();getRawStyles("#myDiv", ["height", "width"]);#myDiv;background: grey;height: 50px;width: 200px;cloneDiv;left: -10000;opacity: 0;top: -10000;position: absolute;z-index: -1;Log Computed Styles    
CONTENT;
        $answer->question_id = 28;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Some browsers(IE and safari) will be use a default size to SVG if you don't put a certain height and width. That what is happening here. You are right, the "intrinsic aspect ration" is requiring another Dom and css and will be nice if we can overcame this.;There is a solution to this, you can calculate and put the right height to padding-bottom and this will give the right "unknown height" you want.;You can see a full solution here;http://codepen.io/tomkarachristos/pen/GZPbgZ;<!--;xMidYMin: Align the midpoint X value of the element's viewBox with the midpoint X value of the viewport.;slice: the entire viewport is covered by the viewBox and the viewBox is scaled down as much as possible;height: if you dont set >= 1px some browsers will not render anything.;-->;hello;Age;and javascript;/*;Here we do the hack.;With the math type: percent * height/width;we are adjust the total height of an element who is depend in width using the padding-bottom.;You can put an inline padding-bottom if you want in html.;*/;$(function();$('svg').each(function();var svg = $(this);var text = svg.find('text');var bbox = text.get(0).getBBox();//the hack;var calcString = "calc(100% * " + bbox.height/bbox.width + ");svg.css("padding-bottom",calcString);svg.get(0).setAttribute('viewBox;[bbox.x;bbox.y;bbox.width;bbox.height].join(' '))  
CONTENT;
        $answer->question_id = 29;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I think this isn't possible, because you can't access the HTML5-Video-Element of the Youtube-Iframe/Page from your page.;That's because Youtube doesn't allow CORS: http://en.wikipedia.org/wiki/Cross-origin_resource_sharing  
CONTENT;
        $answer->question_id = 30;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        One (sorta hacky) solution: set a CSS background image on your canvas element, as shown in https://jsfiddle.net/qpnvo3cL/   
CONTENT;
        $answer->question_id = 31;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        there here svg patch for ie, and you shall use like as;<!--[if IE 9]>;<![endif]-->  
CONTENT;
        $answer->question_id = 32;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Why not setup a code block only to be used by IE that sets the value of a hidden input tag to reflect the click behavior. If a link is clicked you could set the value of the input tag equal to that link id and allow you js to update the elements class to reflect the change.;HTML if IE;JQuery JS if IE;$(function();$(a).click(function();$(this).attr('id').addClass('visited_link_class');CSS.visited_link_class { color:#your color,} 
CONTENT;
        $answer->question_id = 33;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Hello @ChristopherLörken. Can you give a example code or a fiddle of what are you doing? Maybe I'm not understanding what you want.;I think this will help;If you need the event in your context, you can save the reference of the event for posterior use, like in a callback.;Example using jQuery;$(myBtn).click(function(ev);var event = ev, //Save the event object reference;$.ajax;//... your options;success: function(res);//do stuff with the event in the callback;console.log(event);In this way, you don't need call a sync request to use the event in your context and, as a async request, chrome don't complain with that.:)  
CONTENT;
        $answer->question_id = 35;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I'm a little confused about some of the details of the issue, but I hate to see this question go completely unanswered in case someone else has this issue.;This plugin (mouseSwipe) overrides the default dragging functionality for mobile devices. Whereas normally devices would scroll the page on the mouse starting event, this plugin overrides that behavior to detect click movement across an element. Since it interrupts that functionality, dragging the opposite direction (for scrolling) is also broken. If the plugin were still being maintained by the owner (it doesn't appear to be), it could be updated to fix this issue, or emit events that could be used to manually create the functionality you're wanting.;I assume this is also what is giving you trouble for clicking to go to the specified page.;If you want my honest opinion, I would choose a different library, perhaps one that focuses solely on the swipability of mobile devices, and then handle desktop functionality separately (though, if you're using PhoneGap, it's likely you aren't even publishing this to a web platform for desktops). If it's going to be on the web, you can use modernizr (or the like) to figure out if the device supports touch input, and then implement something like the following;http://labs.rampinteractive.co.uk/touchSwipe/demos/Image_gallery_example.html;For devices that do not support touch, you could fall back to button/arrow-based navigation (after all, as a desktop user, I do not expect to be able to drag it back and forth with the mouse). 
CONTENT;
        $answer->question_id = 36;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        First, make sure that "www.example.com" is added to the manifest.json, like so;manifest.json;{..;permissions;http://www.example.com/;https://www.example.com/;Then I think your example should work.;For more information about using xhr in google chrome extensions the docs are here.;Also the CSP docs are worth taking a look at if what I provided above does not.    
CONTENT;
        $answer->question_id = 37;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        if this would help;function goAheadMakeMyDate(s);var d = new Date(s);// override Date.toString();d.toString = function(){ return ''+s, };return d;};var example = goAheadMakeMyDate("Fri 19 July 2013 12:00:00 GMT");example.toString() // returns string actually used to construct the date;'Fri 19 July 2013 12:00:00 GMT;example.toLocaleString();'Fri Jul 19 2013 08:00:00 GMT-0400 (EDT);1*example // gives seconds since epoch;1374235200000;With your input;example = goAheadMakeMyDate('2013-07-18T17:00:00-05:00');{ Thu, 18 Jul 2013 22:00:00 GMT toString: [Function] };> example.toString();'2013-07-18T17:00:00-05:00';> example.toLocaleString() // I live in GMT-4;'Thu Jul 18 2013 18:00:00 GMT-0400 (EDT);> 1*example // convert to integer date;1374184800000;However, if you start modifying this date, the toString will not change and will bite you. 
CONTENT;
        $answer->question_id = 38;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Couldn't you just run the code, __doPostBack('LeaderBoard1$cmdCSV',''),, within the context of the webpage?;Something like this;page.evaluate(function();doPostBack('LeaderBoard1$cmdCSV','');I haven't tested this code within PhantomJS, but theoretically it should work since running the __doPostBack method from Google Chrome's developer console worked. If in doubt about running JavaScript code in PhantomJS, Google Chrome's developer console is a great way to test out the code as it runs on WebKit like PhantomJS. I hope this helps.  
CONTENT;
        $answer->question_id = 39;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can use $addToSet. That will only append to the array if it doesn't already exist. For example;Before update;_id": ObjectId("564f04f4be5d6f2f98c77dcd");uid": "id3";task;list;lid": "lX;ltext": "demoX;Then do the update;db.demo.update;uid": "id3";task.list.lid": "lX;$addToSet;task;list;lid": "lX2";ltext": "demoX2";true, false);After first update;_id": ObjectId("564f04f4be5d6f2f98c77dcd");uid": "id3";task;list;lid": "lX;ltext": "demoX;list;lid": "lX2";ltext": "demoX2";After second update;_id": ObjectId("564f04f4be5d6f2f98c77dcd");uid": "id3";task;list;lid": "lX;ltext": "demoX;list;lid": "lX2";ltext": "demoX2"   
CONTENT;
        $answer->question_id = 42;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I wanted to leave a comment, but I don't have enough reputation, so I'm "answering" instead - sorry it's not much of an answer...;Your example of your expected output is a tree/acyclical, which more or less magically solves the issue of overlapping links. You can see in this example from Mike Bostock (http://bl.ocks.org/mbostock/1062288) there isn't much link overlap just by way of the data being a tree.;So...;if your data is a tree, you might be lucky and the link overlapping might be a non-issue. You'll notice that the overlapping in the Bostock example happen when sibling nodes have different link distances (causing niece/nephew -- aunt/uncle link overlap). Controlling the link distances (perhaps making them a function of tree depth with longer links near the root), I think will prevent any overlap in your tree.;If your data has cycles (like in the Miserables data), preventing overlap is much more complicated and won't just sort itself out. Like others are saying, I don't think it's possible with any D3 layout.   
CONTENT;
        $answer->question_id = 44;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        dataType parameter merely indicates what "Content-Type" header you are expecting.;As long as the file exists and served with a valid Content-Type Success function should be triggered. 
CONTENT;
        $answer->question_id = 45;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It's a holdover from the Netscape days;Missing digits are treated as 0[...]. An incorrect digit is simply interpreted as 0. For example the values #F0F0F0, F0F0F0, F0F0F, #FxFxFx and FxFxFx are all the same.;It is from the blog post A little rant about Microsoft Internet Explorer's color parsing which covers it in great detail, including varying lengths of color values, etc.;If we apply the rules in turn from the blog post, we get the following;Replace all nonvalid hexadecimal characters with 0's;chucknorris becomes c00c0000000;Pad out to the next total number of characters divisible by 3 (11 -> 12);c00c 0000 0000;Split into three equal groups, with each component representing the corresponding colour component of an RGB colour;RGB (c00c, 0000, 0000);Truncate each of the arguments from the right down to two characters;Which gives the following result;RGB (c0, 00, 00) = #C00000 or RGB(192, 0, 0);Here's an example demonstrating the bgcolor attribute in action, to produce this "amazing" colour swatch;chuck norris;Mr T;ninjaturtle;sick;crap;grass;This also answers the other part of the question, why does bgcolor="chucknorr" produce a yellow colour? Well, if we apply the rules, the string is;c00c00000 => c00 c00 000 => c0 c0 00 [RGB(192, 192, 0)];Which gives a light yellow gold colour. As the string starts off as 9 characters, we keep the second C this time around hence it ends up in the final colour value.;I originally encountered this when someone pointed out you could do color="crap" and, well, it comes out brown.   
CONTENT;
        $answer->question_id = 46;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I use javascript:void(0).;Three reasons. Encouraging the use of # amongst a team of developers inevitably leads to some using the return value of the function called like this;function doSomething();//Some code;return false;But then they forget to use return doSomething() in the onclick and just use doSomething().;A second reason for avoiding # is that the final return false, will not execute if the called function throws an error. Hence the developers have to also remember to handle any error appropriately in the called function.;A third reason is that there are cases where the onclick event property is assigned dynamically. I prefer to be able to call a function or assign it dynamically without having to code the function specifically for one method of attachment or another. Hence my onclick (or on anything) in HTML markup look like this;onclick="someFunc.call(this);OR;onclick="someFunc.apply(this, arguments);Using javascript:void(0) avoids all of the above headaches, and I haven't found any examples of a downside.;So if you're a lone developer then you can clearly make your own choice, but if you work as a team you have to either state;Use href="#", make sure onclick always contains return false, at the end, that any called function does not throw an error and if you attach a function dynamically to the onclick property make sure that as well as not throwing an error it returns false.;OR;Use href="javascript:void(0);The second is clearly much easier to communicate.    
CONTENT;
        $answer->question_id = 47;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Implementation;There are three different implementations: pseudo-elements, pseudo-classes, and nothing.;WebKit, Blink (Safari, Google Chrome, Opera 15+) and Microsoft Edge are using a pseudo-element:::-webkit-input-placeholder. [ Ref ];Mozilla Firefox 4 to 18 is using a pseudo-class::-moz-placeholder (one colon). [ Ref ];Mozilla Firefox 19+ is using a pseudo-element:::-moz-placeholder, but the old selector will still work for a while. [ Ref ];Internet Explorer 10 and 11 are using a pseudo-class::-ms-input-placeholder. [ Ref ];Internet Explorer 9 and lower does not support the placeholder attribute at all, while Opera 12 and lower do not support any CSS selector for placeholders.;The discussion about the best implementation is still going on. Note the pseudo-elements act like real elements in the Shadow DOM. A padding on an input will not get the same background color as the pseudo-element.;CSS selectors;User agents are required to ignore a rule with an unknown selector. See Selectors Level 3;a group of selectors containing an invalid selector is invalid.;So we need separate rules for each browser. Otherwise the whole group would be ignored by all browsers.;-webkit-input-placeholder { /* WebKit, Blink, Edge */;color: #909;-moz-placeholder { /* Mozilla Firefox 4 to 18 */;color: #909;opacity: 1;-moz-placeholder { /* Mozilla Firefox 19+ */;color: #909;opacity: 1;-ms-input-placeholder { /* Internet Explorer 10-11 */;color: #909;Usage notes;Be careful to avoid bad contrasts. Firefox's placeholder appears to be defaulting with a reduced opacity, so needs to use opacity: 1 here.;Note that placeholder text is just cut off if it doesn’t fit – size your input elements in em and test them with big minimum font size settings. Don’t forget translations: some languages need more room for the same word.;Browsers with HTML support for placeholder but without CSS support for that (like Opera) should be tested too.;Some browsers use additional default CSS for some input types (email, search). These might affect the rendering in unexpected ways. Use the properties -webkit-appearance and -moz-appearance to change that. Example;[type="search"];-moz-appearance: textfield;-webkit-appearance: textfield;appearance: textfield  
CONTENT;
        $answer->question_id = 48;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can apply this CSS to the inner div;#inner;width: 50%;margin: 0 auto;Of course, you don't have to set the width to 50%. Any width less than the containing div will work. The margin: 0 auto is what does the actual centering.;If you are targeting IE8+, it might be better to have this instead;#inner;display: table;margin: 0 auto;It will make the inner element center horizontally and it works without setting a specific width.   
CONTENT;
        $answer->question_id = 49;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Basics;For controlling "cellpadding" in CSS, you can simply use padding on table cells. E.g. for 10px of "cellpadding;td;padding: 10px;For "cellspacing", you can apply the border-spacing CSS property to your table. E.g. for 10px of "cellspacing;table;border-spacing: 10px;border-collapse: separate;This property will even allow separate horizontal and vertical spacing, something you couldn't do with old-school "cellspacing".;Issues in IE <= 7;This will work in almost all popular browsers except for Internet Explorer up through Internet Explorer 7, where you're almost out of luck. I say "almost" because these browsers still support the border-collapse property, which merges the borders of adjoining table cells. If you're trying to eliminate cellspacing (that is, cellspacing="0") then border-collapse:collapse should have the same effect: no space between table cells. This support is buggy, though, as it does not override an existing cellspacing HTML attribute on the table element.;In short: for non-Internet Explorer 5-7 browsers, border-spacing handles you. For Internet Explorer, if your situation is just right (you want 0 cellspacing and your table doesn't have it defined already), you can use border-collapse:collapse.;table;border-spacing: 0;border-collapse: collapse;Note: For a great overview of CSS properties that one can apply to tables and for which browsers, see this fantastic Quirksmode page. 
CONTENT;
        $answer->question_id = 50;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Now on GitHub as a Plugin!;Feel free to fork and improve.;Demo | Download Zip | Half-Style.com (Redirects to GitHub);Pure CSS for a Single Character;JavaScript used for automation accross text or multiple characters;Preserves Text Accessibility for screen readers for the blind or visually;impaired;Part1: Basic Solution;Demo: http://jsfiddle.net/pd9yB/817/;This works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.;Also, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.;Explanation for a single character;Pure CSS. All you need to do is to apply.halfStyle class to each element that contains the character you want to be half-styled.;For each span element containing the character, you can create a data attribute, for example here data-content="X", and on the pseudo element use content: attr(data-content), so the.halfStyle:before class will be dynamic and you won't need to hard code it for every instance.;Explanation for any text;Simply add textToHalfStyle class to the element containing the text.;CSS:.halfStyle;position:relative;display:inline-block;font-size:80px, /* or any font size will work */;color: black, /* or transparent, any color */;overflow:hidden;white-space: pre, /* to preserve the spaces from collapsing */;halfStyle:before;display:block;z-index:1;position:absolute;top:0;left:0;width: 50%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;color: #f00;HTML;Single Characters;X;Y;Z;A;Automated;Half-style, please.;To make it automated, simply add textToHalfStyle class to the element containing the text.;jQuery for automated mode;jQuery(function($);var text, chars, $el, i, output;// Iterate over all class occurences;$('.textToHalfStyle').each(function(idx, el);$el = $(el);text = $el.text();chars = text.split('');// Set the screen-reader text;$el.html(' ' + text + ' ');// Reset output for appending;output = ';// Iterate over all chars in the text;for (i = 0, i < chars.length, i++);// Create a styled element for each character and append to container;output += ' ' + chars[i] + ';// Write to DOM only once;$el.append(output);Demo: http://jsfiddle.net/pd9yB/819/;Part2: Advanced solution - Independent left and right parts;With this solution you can style left and right parts, individually and independently.;Everything is the same, only more advanced CSS does the magic.;Demo: http://jsfiddle.net/pd9yB/819/.halfStyle;position:relative;display:inline-block;font-size:80px, /* or any font size will work */;color: transparent, /* hide the base character */;overflow:hidden;white-space: pre, /* to preserve the spaces from collapsing */;halfStyle:before { /* creates the left part */;display:block;z-index:1;position:absolute;top:0;width: 50%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #f00, /* for demo purposes */;text-shadow: 2px -2px 0px #af0, /* for demo purposes */;halfStyle:after { /* creates the right part */;display:block;direction: rtl, /* very important, will make the width to start from right */;position:absolute;z-index:2;top:0;left:50%;width: 50%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #000, /* for demo purposes */;text-shadow: 2px 2px 0px #0af, /* for demo purposes */;Part3: Mix-Match and Improve;Now that we know what is possible, let's create some variations.;-Horizontal Half Parts;Demo.halfStyle;position:relative;display:inline-block;font-size:80px, /* or any font size will work */;color: transparent, /* hide the base character */;overflow:hidden;white-space: pre, /* to preserve the spaces from collapsing */;halfStyle:before { /* creates the top part */;display:block;z-index:2;position:absolute;top:0;height: 50%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #f00, /* for demo purposes */;text-shadow: 2px -2px 0px #af0, /* for demo purposes */;halfStyle:after { /* creates the bottom part */;display:block;position:absolute;z-index:1;top:0;height: 100%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #000, /* for demo purposes */;text-shadow: 2px 2px 0px #0af, /* for demo purposes */;-Vertical 1/3 Parts;Demo.halfStyle { /* base char and also the right 1/3 */;position:relative;display:inline-block;font-size:80px, /* or any font size will work */;color: transparent, /* hide the base character */;overflow:hidden;white-space: pre, /* to preserve the spaces from collapsing */;color: #f0f, /* for demo purposes */;text-shadow: 2px 2px 0px #0af, /* for demo purposes */;halfStyle:before { /* creates the left 1/3 */;display:block;z-index:2;position:absolute;top:0;width: 33.33%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #f00, /* for demo purposes */;text-shadow: 2px -2px 0px #af0, /* for demo purposes */;halfStyle:after { /* creates the middle 1/3 */;display:block;z-index:1;position:absolute;top:0;width: 66.66%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #000, /* for demo purposes */;text-shadow: 2px 2px 0px #af0, /* for demo purposes */;-Horizontal 1/3 Parts;Demo.halfStyle { /* base char and also the bottom 1/3 */;position:relative;display:inline-block;font-size:80px, /* or any font size will work */;color: transparent;overflow:hidden;white-space: pre, /* to preserve the spaces from collapsing */;color: #f0f;text-shadow: 2px 2px 0px #0af, /* for demo purposes */;halfStyle:before { /* creates the top 1/3 */;display:block;z-index:2;position:absolute;top:0;height: 33.33%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #f00, /* for demo purposes */;text-shadow: 2px -2px 0px #fa0, /* for demo purposes */;halfStyle:after { /* creates the middle 1/3 */;display:block;position:absolute;z-index:1;top:0;height: 66.66%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #000, /* for demo purposes */;text-shadow: 2px 2px 0px #af0, /* for demo purposes */;-HalfStyle Improvement By @KevinGranger;DEMO;body;background-color: black;textToHalfStyle;display:block;margin: 200px 0 0 0;text-align:center;halfStyle;font-family: 'Libre Baskerville', serif;position:relative;display:inline-block;width:1;font-size:70px;color: black;overflow:hidden;white-space: pre;text-shadow: 1px 2px 0 white;halfStyle:before;display:block;z-index:1;position:absolute;top:0;width: 50%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;color: white;-PeelingStyle improvement of HalfStyle by @SamTremaine;Demo and on samtremaine.co.uk.halfStyle;position: relative;display: inline-block;font-size: 68px;color: rgba(0, 0, 0, 0.8);overflow: hidden;white-space: pre;transform: rotate(4deg);text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);halfStyle:before { /* creates the left part */;display: block;z-index: 1;position: absolute;top: -0.5px;left: -3px;width: 100%;content: attr(data-content);overflow: hidden;pointer-events: none;color: #FFF;transform: rotate(-4deg);text-shadow: 0px 0px 1px #000;Part4: Ready for Production;Customized different Half-Style style-sets can be used on desired elements on the same page.;You can define multiple style-sets and tell the plugin which one to use.;The plugin uses data attribute data-halfstyle="[-CustomClassName-]" on the target.textToHalfStyle elements and makes all the necessary changes automatically.;So, simply on the element containing the text add textToHalfStyle class and data attribute data-halfstyle="[-CustomClassName-]". The plugin will do the rest of the job.;Demo of Multiple Half-Styles on the same page.;jQuery(function($);var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;// Iterate over all class occurrences;$('.textToHalfStyle').each(function(idx, halfstyle_el);$halfstyle_el = $(halfstyle_el);halfstyle_style = $halfstyle_el.data('halfstyle');halfstyle_text = $halfstyle_el.text();halfstyle_chars = halfstyle_text.split('');// Set the screen-reader text;$halfstyle_el.html(' ' + halfstyle_text + ' ');// Reset output for appending;halfstyle_output = ';// Iterate over all chars in the text;for (halfstyle_i = 0, halfstyle_i < halfstyle_chars.length, halfstyle_i++);// Create a styled element for each character and append to container;halfstyle_output += ' ' + halfstyle_chars[halfstyle_i] + ';// Write to DOM only once;$halfstyle_el.append(halfstyle_output);Also the CSS style-sets' class definitions match the [-CustomClassName-] part mentioned above and is chained to.halfStyle, so we will have.halfStyle.[-CustomClassName-];/* start half-style hs-base */.halfStyle.hs-base;position:relative;display:inline-block;font-size:80px, /* or any font size will work */;overflow:hidden;white-space: pre, /* to preserve the spaces from collapsing */;color: #000, /* for demo purposes */;halfStyle.hs-base:before;display:block;z-index:1;position:absolute;top:0;width: 50%;content: attr(data-content), /* dynamic content for the pseudo element */;pointer-events: none, /* so the base char is selectable by mouse */;overflow:hidden;color: #f00, /* for demo purposes */;/* end half-style hs-base */;/* start half-style hs-horizontal-third */.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */;position:relative;display:inline-block;font-size:80px, /* or any font size will work */;color: transparent;overflow:hidden;white-space: pre, /* to preserve the spaces from collapsing */;color: #f0f;text-shadow: 2px 2px 0px #0af, /* for demo purposes */;halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */;display:block;z-index:2;position:absolute;top:0;height: 33.33%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #f00, /* for demo purposes */;text-shadow: 2px -2px 0px #fa0, /* for demo purposes */;halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */;display:block;position:absolute;z-index:1;top:0;height: 66.66%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;pointer-events: none, /* so the base char is selectable by mouse */;color: #000, /* for demo purposes */;text-shadow: 2px 2px 0px #af0, /* for demo purposes */;/* end half-style hs-horizontal-third */;/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */.halfStyle.hs-PeelingStyle;position: relative;display: inline-block;font-size: 68px;color: rgba(0, 0, 0, 0.8);overflow: hidden;white-space: pre;transform: rotate(4deg);text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);halfStyle.hs-PeelingStyle:before { /* creates the left part */;display: block;z-index: 1;position: absolute;top: -0.5px;left: -3px;width: 100%;content: attr(data-content);overflow: hidden;pointer-events: none;color: #FFF;transform: rotate(-4deg);text-shadow: 0px 0px 1px #000;/* end half-style hs-PeelingStyle */;/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/.textToHalfStyle.hs-KevinGranger;display:block;margin: 200px 0 0 0;text-align:center;halfStyle.hs-KevinGranger;font-family: 'Libre Baskerville', serif;position:relative;display:inline-block;width:1;font-size:70px;color: black;overflow:hidden;white-space: pre;text-shadow: 1px 2px 0 white;halfStyle.hs-KevinGranger:before;display:block;z-index:1;position:absolute;top:0;width: 50%;content: attr(data-content), /* dynamic content for the pseudo element */;overflow:hidden;color: white;/* end half-style hs-KevinGranger;HTML;Half-style, please.;Half-style, please.;Half-style, please.;Half-style, please.;Demo of Multiple Half-Styles on the same page.    
CONTENT;
        $answer->question_id = 51;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Adding and Removing Classes, with simple cross-browser JavaScript;The standard JavaScript way to select an element is using document.getElementById("Id"), which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use this instead - however, going into detail on this is beyond the scope of the answer.;To change all classes for an element;To replace all existing classes with one or more new classes, set the className attribute;document.getElementById("MyElement").className = "MyClass;(You can use a space-delimited list to apply multiple classes.);To add an additional class to an element;To add a class to an element, without removing/affecting existing values, append a space and the new classname, like so;document.getElementById("MyElement").className += " MyClass;To remove a class from an element;To remove a single class to an element, without affecting other potential classes, a simple regex replace is required;document.getElementById("MyElement").className =;document.getElementById("MyElement").className.replace;(/(?:^|\s)MyClass(?!\S)/g, '');/* code wrapped for readability - above is all one statement */;An explanation of this regex is as follows;(?:^|\s) # match the start of the string, or any single whitespace character;MyClass # the literal text for the classname to remove;(?!\S) # negative lookahead to verify the above is the whole classname;# ensures there is no non-space character following;# (i.e. must be end of string or a space);The g flag tells the replace to repeat as required, in case the class name has been added multiple times.;To check if a class is already applied to an element;The same regex used above for removing a class can also be used as a check as to whether a particular class exists;if (document.getElementById("MyElement").className.match(/(?:^|\s)MyClass(?!\S)/));Assigning these actions to onclick events;Whilst it is possible to write JavaScript directly inside the HTML event attributes (such as onclick="this.className+=' MyClass'") this is not recommended behaviour. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JS interaction logic.;The first step to achieving this is by creating a function, and calling the function in the onclick attribute, for example:...;My Button;(It is not required to have this code in script tags, this is simply for brevity of example, and including the JS in a distinct file may be more appropriate.);The second step is to move the onclick event out of the HTML and into JavaScript, for example using addEventListener...;My Button;(Note that the window.onload part is required so that the contents of that function are executed after the HTML has finished loading - without this, the MyElement might not exist when the JS is called, so that line would fail.);JavaScript Frameworks and Libraries;The above code is all in standard JavaScript, however it is common practise to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.;Whilst some people consider it overkill to add a ~50KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work, or anything that might have unusual cross-browser behaviour, it is well worth considering.;(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.);The examples above have been reproduced below using jQuery, probably the most commonly used JavaScript library (though there are others worth investigating too).;(Note that $ here is the jQuery object.);Changing Classes with jQuery;$('#MyElement').addClass('MyClass');$('#MyElement').removeClass('MyClass');if ($('#MyElement').hasClass('MyClass'));In addition, jQuery provides a shortcut for adding a class if it doesn't apply, or removing a class that does;$('#MyElement').toggleClass('MyClass');Assigning a function to a click event with jQuery;$('#MyElement').click(changeClass);or, without needing an id;$(':button:contains(My Button)').click(changeClass);Changing Classes with Angular;If you don't want to include the jQuery library and use Angular framework;angular.element(document.getElementById("MyElement")).removeClass("class-name");angular.element(document.getElementById("MyElement")).addClass("class-name");HTML5 Techniques for changing classes;Modern browsers have added classList which provides methods to make it easier to manipulate classes without needing a library;document.getElementById("MyElement").classList.add('class');document.getElementById("MyElement").classList.remove('class');if (document.getElementById("MyElement").classList.contains('class'));document.getElementById("MyElement").classList.toggle('class');Unfortunately, these do not work in Internet Explorer prior to v10, though there is a shim to add support for it to IE8 and IE9, available from this page.  
CONTENT;
        $answer->question_id = 52;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Either use a semi-transparent PNG image or use CSS3;background-color:rgba(255,0,0,0.5);Here's an article from css3.info, Opacity, RGBA and compromise (2007-06-03). 
CONTENT;
        $answer->question_id = 53;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Firefox 30 ignores autocomplete="off" for passwords, opting to prompt the user instead whether the password should be stored on the client. Note the following commentary from May 5, 2014;The password manager always prompts if it wants to save a password. Passwords are not saved without permission from the user.;We are the third browser to implement this change, after IE and Chrome.;According to Mozilla developer documentation the form element attribute autocomplete prevents form data from being cached in older browsers.   
CONTENT;
        $answer->question_id = 54;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can't parse [X]HTML with regex. Because HTML can't be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the n​erves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow it is too late it is too late we cannot be saved the trangession of a chi͡ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) dear lord help us how can anyone survive this scourge using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes using rege x as a tool to process HTML establishes a brea ch between this world and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but more corrupt) a mere glimp se of the world of reg​ ex parsers for HTML will ins ​tantly transport a p rogrammer's consciousness i nto a w orl d of ceaseless screaming, he comes, the pestilent sl ithy regex-infection wil​ l devour your HT ​ML parser, application and existence for all time like Visual Basic only worse he comes he com es do not fi ​ght h e com̡e̶s, ̕h̵i ​s un̨ho͞ly radiańcé de stro҉ying all enli̍̈́̂̈́ghtenment, HTML tags lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq ​uid p ain, the song of re̸gular exp​re ssion parsing will exti ​nguish the voices of mor​ tal man from the sp ​here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​ he f inal snuf fing o f the lie​ s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T A LL I​S L OST th e pon̷y he come s he c̶̮om es he co me s t he ich​ or permeat es al l MY FAC E MY FACE ᵒh god n o NO NOO̼ O​O N Θ stop t he an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨ e̠̅s ͎a̧͈͖r̽̾̈́͒͑e n ​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ T O͇̹̺ͅƝ̴ȳ̳ TH̘ Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝ S̨̥̫͎̭ͯ̿̔̀ͅ;Have you tried using an XML parser instead?;Moderator's Note;This post is locked to prevent inappropriate edits to its content. The post looks exactly as it is supposed to look - there are no problems with its content. Please do not flag it for our attention.;share;locked by Marc Gravell ♦ Mar 13 '12 at 20:04 55
        49  The following CSS rule disables resizing behavior for textarea elements;textarea;resize: none;To disable it for some (but not all) textarea s, there are a couple of options.;To disable a specific textarea with the name attribute set to foo (i.e.,);textarea[name=foo];resize: none;Or, using an id attribute (i.e.,);#foo;resize: none;The W3C page lists possible values for resizing restrictions: none, both, horizontal, vertical, and inherit;textarea;resize: vertical, /* user can resize vertically, but width is fixed */;Review a decent compatibility page to see what browsers currently support this feature. As Jon Hulka has commented, the dimensions can be further restrained in CSS using max-width, max-height, min-width, and min-height.;Super important to know;This property does nothing unless the overflow property is something other than visible, which is the default for most elements. So generally to use this, you'll have to set something like overflow: scroll;Quote by Chris Coyier;http://css-tricks.com/almanac/properties/r/resize/  
CONTENT;
        $answer->question_id = 56;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        For HTML 4, the answer is technically;ID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), and periods (".").;HTML 5 is even more permissive, saying only that an id must contain at least one character and may not contain any space characters.;The id attribute is case sensitive in XHTML.;As a purely practical matter, you may want to avoid certain characters. Periods, colons and '#' have special meaning in CSS selectors, so you will have to escape those characters using a backslash in CSS or a double backslash in a selector string passed to jQuery. Think about how often you will have to escape a character in your stylesheets or code before you go crazy with periods and colons in ids.;For example, the HTML declaration is valid. You can select that element in CSS as #first\.name and in jQuery like so: $('#first\\.name'). But if you forget the backslash, $('#first.name'), you will have a perfectly valid selector looking for an element with id first and also having class name. This is a bug that is easy to overlook. You might be happier in the long run choosing the id first-name (a hyphen rather than a period), instead.;You can simplify your development tasks by strictly sticking to a naming convention. For example, if you limit yourself entirely to lower-case characters and always separate words with either hyphens or underscores (but not both, pick one and never use the other), then you have an easy-to-remember pattern. You will never wonder "was it firstName or FirstName?" because you will always know that you should type first_name. Prefer camel case? Then limit yourself to that, no hyphens or underscores, and always, consistently use either upper-case or lower-case for the first character, don't mix them.;A now very obscure problem was that at least one browser, Netscape 6, incorrectly treated id attribute values as case-sensitive. That meant that if you had typed id="firstName" in your HTML (lower-case 'f') and #FirstName { color: red } in your CSS (upper-case 'F'), that buggy browser would have failed to set the element's color to red. At the time of this edit, April 2015, I hope you aren't being asked to support Netscape 6. Consider this a historical footnote.    
CONTENT;
        $answer->question_id = 57;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can remove bullets by setting the list-style-type to none on the CSS for the;element, for example;ul;list-style-type: none;You might also want to add padding:0, margin:0, to that, if you want to remove indentation as well.;See Listutorial for a great walkthrough of list formatting techniques.   
CONTENT;
        $answer->question_id = 58;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        After over an hour of tweaking, testing, and trying different styles of markup, I think I may have a decent solution. The requirements for this particular project were;Inputs must be on their own line.;Checkbox inputs need to align vertically with the label text similarly (if not identically) across all browsers.;If the label text wraps, it needs to be indented (so no wrapping down underneath the checkbox).;Before I get into any explanation, I'll just give you the code;Here is the working example in JSFiddle.;This code assumes that you're using a reset like Eric Meyer's that doesn't override form input margins and padding (hence putting margin and padding resets in the input CSS). Obviously in a live environment you'll probably be nesting/overriding stuff to support other input elements, but I wanted to keep things simple.;Things to note;The *overflow declaration is an inline IE hack (the star-property hack). Both IE 6 and 7 will notice it, but Safari and Firefox will properly ignore it. I think it might be valid CSS, but you're still better off with conditional comments, just used it for simplicity.;As best I can tell, the only vertical-align statement that was consistent across browsers was vertical-align: bottom. Setting this and then relatively positioning upwards behaved almost identically in Safari, Firefox and IE with only a pixel or two of discrepancy.;The major problem in working with alignment is that IE sticks a bunch of mysterious space around input elements. It isn't padding or margin, and it's damned persistent. Setting a width and height on the checkbox and then overflow: hidden for some reason cuts off the extra space and allows IE's positioning to act very similarly to Safari and Firefox.;Depending on your text sizing, you'll no doubt need to adjust the relative positioning, width, height, and so forth to get things looking right.;Hope this helps someone else! I haven't tried this specific technique on any projects other than the one I was working on this morning, so definitely pipe up if you find something that works more consistently.   
CONTENT;
        $answer->question_id = 59;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        This can now be done in Chrome, Safari, FF4+, and IE10pp4+!;See this question's answer for more info;Updating address bar with new URL without hash or reloading the page;Example;function processAjaxData(response, urlPath);document.getElementById("content").innerHTML = response.html;document.title = response.pageTitle;window.history.pushState({"html":response.html,"pageTitle":response.pageTitle},"", urlPath);You can then use window.onpopstate to detect the back/forward button navigation;window.onpopstate = function(e);if(e.state);document.getElementById("content").innerHTML = e.state.html;document.title = e.state.pageTitle;For a more in-depth look at manipulating browser history see this MDN article.    
CONTENT;
        $answer->question_id = 60;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Simply;is sufficient.;The other forms are there for compatibility with XHTML, to make it possible to write the same code as XHTML, and have it also work as HTML. Some systems that generate HTML may be based on XML generators, and thus do not have the ability to output just a bare;tag, if you're using such a system, it's fine to use, it's just not necessary if you don't need to do it.;Very few people actually use XHTML, however. You need to serve your content as application/xhtml+xml for it to be interpreted as XHTML, and that will not work in old versions of IE - it will also mean that any small error you make will prevent your page from being displayed in browsers that do support XHTML. So, most of what looks like XHTML on the web is actually being served, and interpreted, as HTML. See Serving XHTML as text/html Considered Harmful for some more information.  
CONTENT;
        $answer->question_id = 61;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The solution is to set your div to display: inline-block.   
CONTENT;
        $answer->question_id = 62;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Here's a page describing the differences (basically you can put html into a);And an other page describing why people avoid (Hint: IE6);Another IE problem when using;And while we're talking about IE, it's;got a couple of bugs related to the;width of buttons. It'll mysteriously;add extra padding when you're trying;to add styles, meaning you have to add;a tiny hack to get things under;control.   
CONTENT;
        $answer->question_id = 63;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        First select the parent element with something like;$("#id"), $("element") or $(".class");Then use the.append(" foo ") function. Alternatively, you can use the.html() as mentioned in a different answer.;$("#foo").append(" hello world ")    
CONTENT;
        $answer->question_id = 64;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You may want to use the appendTo function (which adds to the end of the element);$("#source").appendTo("#destination");Alternatively you could use the prependTo function (which adds to the beginning of the element);$("#source").prependTo("#destination")   
CONTENT;
        $answer->question_id = 65;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        There are a couple of relatively new CSS3 measurement units called;Viewport-Percentage (or Viewport-Relative) Lengths;What are Viewport-Percentage Lengths?;From the linked W3 Candidate Recommendation above;The viewport-percentage lengths are relative to the size of the initial containing block. When the height or width of the initial containing block is changed, they are scaled accordingly.;These units are vh (viewport height), vw (viewport width), vmin (viewport minimum length) and vmax (viewport maximum length).;How can this be used to make a divider fill the height of the browser?;For this question, we can make use of vh: 1vh is equal to 1% of the viewport's height. That is to say, 100vh is equal to the height of the browser window, regardless of where the element is situated in the DOM tree;HTML;CSS;div;height:100vh;This is literally all that's needed. Here is a JSFiddle example of this in use.;What browsers support these new units?;This is currently supported on all up-to-date major browsers apart from Opera Mini and Android Browser. Check out Can I use... for further support.;How can this be used with multiple columns?;In the case of the question at hand, featuring a left and a right divider, here is a JSFiddle example showing a two-column layout involving both vh and vw.;How is 100vh different to 100%?;Take this layout for example;Hello, world!;The p tag here is set to 100% height, but because its containing div has 200px height, 100% of 200px becomes 200px, not 100% of the body height. Using 100vh instead means that the p tag will be 100% height of the body regardless of the div height. Take a look at this accompanying Fiddle to easily see the difference!;What exactly is vmin and vmax?;1vmin assumes a value of the smallest between 1vh and 1vw.;1vmax assumes a value of the largest between 1vh and 1vw.;Especially usable for font-size.;*Note that these CSS3 units work dynamically in Firefox, but other browsers require refreshing the page.   
CONTENT;
        $answer->question_id = 66;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Have a look at PrinceXML.;It's definitely the best HTML/CSS to PDF converter out there, although it's not free (But hey, your programming is not free either, so if it saves you 10 hours of work, you're home free (since you also need to take into account that the alternative solutions will require you to setup a dedicated server with the right software);Oh yeah, did I mention that this is the first (and probably only) HTML2PDF solution that does full ACID2?;PrinceXML Samples;Footnote: Please note that this answer was written in 2009 and it might not be the most cost-effective solution today in 2016. Browsers and other open source renderers have become a lot better at this than they were back then.   
CONTENT;
        $answer->question_id = 67;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You don't need any plugins to do this.;Just select all lines (Ctrl A) and then from the menu select Edit → Line → Reindent.;This will work if your file is saved with an extension that contains HTML like.html or.php.;If you do this often, you may find this key mapping useful;{ "keys": ["ctrl+shift+r"], "command": "reindent", "args": { "single_line": false } };If your file is not saved (e.g. you just pasted in a snippet to a new window), you can manually set the language for indentation by selecting the menu View → Syntax → language of choice before selecting the reindent option.    
CONTENT;
        $answer->question_id = 68;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        here's your example in "one" line.;this.$OuterDiv = $(' ').hide().append($(' ').attr({ cellSpacing: 0 }).addClass("text");Update: I thought I'd update this post since it still gets quite a bit of traffic. In the comments below there's some discussion about $(" ") vs $(" ") vs $(document.createElement('div')) as a way of creating new elements, and which is "best".;I put together a small benchmark, and here's roughly the results of repeating the above options 100,000 times;jQuery 1.4, 1.5, 1.6;Chrome 11 Firefox 4 IE9;440ms 640ms 460ms;420ms 650ms 480ms;createElement 100ms 180ms 300ms;jQuery 1.3;Chrome 11;770ms;3800ms;createElement 100ms;jQuery 1.2;Chrome 11;3500ms;3500ms;createElement 100ms;I think it's no big surprise, but document.createElement is the fastest method. Of course, before you go off and start refactoring your entire codebase, remember that the differences we're talking about here (in all but the archaic versions of jQuery) equate to about an extra 3 milliseconds per thousand elements.;Update 2;Updated for jQuery 1.7.2 and put the benchmark on JSPerf which is probably a bit more scientific than my primitive benchmarks, plus it can be crowdsourced now!;http://jsperf.com/jquery-vs-createelement 
CONTENT;
        $answer->question_id = 69;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can try this basic approach;#box;height: 90px;line-height: 90px;Demo;Only works for a single line of text though, because we set the line's height to the same height as the containing box element.;A more versatile approach;And here is another way to align text vertically, this solution will work for a single line and multiple lines of text, but still requires a fixed height container;Lorem ipsum dolor sit amet, consectetur adipiscing elit.;The CSS just sizes the, then vertically center aligns the by setting the 's line-height equal to its height, and making the an inline-block with vertical-align: middle. Then it sets the line-height back to normal for the so its contents will flow naturally inside the block.;div;width: 250px;height: 100px;line-height: 100px;text-align: center;span;display: inline-block;vertical-align: middle;line-height: normal;Demo;Simulating table display;And here is another option, which may not work on older browsers that don't support display: table and display: table-cell (basically that means Internet Explorer 7). The HTML is the same as the second example;Lorem ipsum dolor sit amet, consectetur adipiscing elit.;Using CSS we 'simulate' table display behavior, since tables support vertical alignment;div;display: table;width: 250px;height: 100px;text-align: center;span;display: table-cell;vertical-align: middle;Demo;Using absolute positioning;This technique uses an absolutely positioned element setting top, bottom, left and right to 0. It is described in more detail in an article on Smashing Magazine.   
CONTENT;
        $answer->question_id = 70;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Element Minimization and Empty Element Content;Given an empty instance of an element whose content model is not EMPTY (for example, an empty title or paragraph) do not use the minimized form (e.g. use;and not).;XHTML DTD specifies script tags as;<!ELEMENT script (#PCDATA)>   
CONTENT;
        $answer->question_id = 71;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Note: Place it in the head section. 
CONTENT;
        $answer->question_id = 72;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Unicode arrows heads;▲ - U+25B2 BLACK UP-POINTING TRIANGLE;▼ - U+25BC BLACK DOWN-POINTING TRIANGLE;▴ - U+25B4 SMALL BLACK UP-POINTING TRIANGLE;▾ - U+25BE SMALL BLACK DOWN-POINTING TRIANGLE;Use;x25B2# and;x25BC# if you cannot include Unicode characters directly (use UTF-8!).;Note that the font support for the smaller versions is not as good. Better to use the large versions in smaller font.;More Unicode arrows are at;http://en.wikipedia.org/wiki/Arrow_%28symbol%29#Arrows_in_Unicode;http://en.wikipedia.org/wiki/Geometric_Shapes;Lastly, these arrows are not ASCII, including ↑ and ↓: they are Unicode.    
CONTENT;
        $answer->question_id = 73;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Proper uses of IMG;Use IMG if you intend to have;people print your page and you want the image to be included by default.;— JayTee;Use IMG (with alt text) when the image has an important semantic meaning, such as a warning icon. This ensures that the meaning of the image can be communicated in all user-agents, including screen readers.;Pragmatic uses of IMG;Use IMG if you intend to have;people print your page and you want the image to be included by default.;— JayTee;Use IMG if you rely on browser scaling to render an image in proportion to text size.;Use IMG;for multiple overlay images in IE6.;Use IMG with a z-index in order;to stretch a background image to fill its entire window.;Note, this is no longer true with CSS3 background-size, see #6 below.;Using img instead of background-image can dramatically improve performance of animations over a background.;When to use CSS background-image;Use CSS background images if the;image is not part of the content.;— sanchothefat;Use CSS background images when;doing image-replacement of text eg. paragraphs/headers.;— sanchothefat;Use background-image if you intend to have;people print your page and you do not want the image to be included by default.;— JayTee;Use background-image if you need to improve download times, as;with CSS sprites.;Use background-image if you need for only a portion of the image to be visible, as with CSS sprites.;Use background-image with background-size:cover in order to stretch a background image to fill its entire window.;share 74
         to content);content;(fills remaining space);footer (fixed height);In the CSS above, the flex property shorthands the flex-grow, flex-shrink, and flex-basis properties to establish the flexibility of the flex items. Mozilla has a good introduction to the flexible boxes model.  
CONTENT;
        $answer->question_id = 75;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Probably the best approach is to use the PDF.JS library. It's a pure HTML5 / JavaScript renderer for PDF documents without any third-party plugins.;Online demo;http://mozilla.github.com/pdf.js/web/viewer.html;GitHub;https://github.com/mozilla/pdf.js   
CONTENT;
        $answer->question_id = 76;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Important Update!;In addition to webkit, as of Firefox V35 we'll be able to use the appearance property.;(From the above link:);Using -moz-appearance with the none value on a combobox now remove the;dropdown button;So now in order to hide the default styling - it's as easy as adding the following rules on our select element;select;-webkit-appearance: none;-moz-appearance: none;appearance: none;For IE 11 support, you can use::-ms-expand.;select::-ms-expand { /* for IE 11 */;display: none;Step #1 - FIDDLE;Next, to add our own custom arrow we just add a background image.;Step #2 - FIDDLE;The problem now is that no version of IE currently supports the appearance property.;So we have to remove the background image on IE...;Step #3 (FINAL) - FIDDLE;select;margin: 50px;border: 1px solid #111;background: transparent;width: 150px;padding: 5px 35px 5px 5px;font-size: 16px;border: 1px solid #ccc;height: 34px;-webkit-appearance: none;-moz-appearance: none;appearance: none;background: url(http://www.stackoverflow.com/favicon.ico) 96% / 15% no-repeat #eee;/*target Internet Explorer 9 and Internet Explorer 10:*/;@media screen and (min-width: 0\0);select;background: none;padding: 5px;If the custom arrow is necessary on IE or on Firefox - prior to V35 - then keep reading...;Here are two additional solutions to achieve a custom arrow on a select element;#1 - Hide the default arrow - (Source);FIDDLE;Wrap the select element in a div with a fixed width and overflow:hidden.;Then give the select element a width of about 20 pixels greater than the div.;The result is that the default drop-down arrow of the select element will be hidden (due to the overflow:hidden on the container), and you can place any background image you want on the right-hand-side of the div.;The advantage of this approach is that it is cross-browser (Internet Explorer 8 and later, WebKit, and Gecko). However, the disadvantage of this approach is that the options drop-down juts out on the right-hand-side (by the 20 pixels which we hid... because the option elements take the width of the select element).;[It should be noted, however, that if the custom select element is necessary for MOBILE this above problem doesn't apply - because of the way each phone natively opens the select element. So for mobile, this is probably the best solution.].styled select;background: transparent;width: 150px;font-size: 16px;border: 1px solid #ccc;height: 34px;styled;margin: 50px;width: 120px;height: 34px;border: 1px solid #111;border-radius: 3px;overflow: hidden;background: url(http://www.stackoverflow.com/favicon.ico) 96% / 20% no-repeat #eee;#2 - Use the pointer-events property (Source);FIDDLE;The idea here is to overlay an element over the native drop down arrow (to create our custom one) and then disallow pointer events on it.;Advantage: Works well in WebKit and Gecko. It looks good too (no jutting out option elements);Disadvantage: Internet Explorer (IE10 and down) doesn't support pointer-events, which means you can't click the custom arrow. Also, another (obvious) disadvantage with this method is that you can't target your new arrow image with a hover effect or hand cursor, because we have just disabled pointer events on them!;However, with this method you can use Modernizer or conditional comments to make Internet Explorer revert to the standard built in arrow.;NB: Being that Internet Explorer 10 doesn't support conditional comments anymore: If you want to use approach #2, you should probably use Modernizr. However, it is still possible to exclude the pointer-events CSS from Internet Explorer 10 with a CSS hack described here..notIE;position: relative;display: inline-block;select;display: inline-block;height: 30px;width: 150px;outline: none;color: #74646e;border: 1px solid #C8BFC4;border-radius: 4px;box-shadow: inset 1px 1px 2px #ddd8dc;background: #fff;/* Select arrow styling */.notIE.fancyArrow;width: 23px;height: 28px;position: absolute;display: inline-block;top: 1px;right: 3px;background: url(http://www.stackoverflow.com/favicon.ico) right / 90% no-repeat #fff;pointer-events: none;/*target Internet Explorer 9 and Internet Explorer 10:*/;@media screen and (min-width: 0\0) {.notIE.fancyArrow;display: none  
CONTENT;
        $answer->question_id = 77;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        HTML;The plain HTML way is to put it in a;If necessary, set CSS display: inline, on the form to keep it in the flow with the surrounding text. Instead of in above example, you can also use. The only difference is that the element allows children.;You'd intuitively expect to be able to use analogous with the element, but unfortunately no, this attribute does not exist according to HTML specification.;CSS;If CSS is allowed, simply use an which you style to look like a button using among others the appearance property (only Internet Explorer support is currently (July 2015) still poor).;Go to Google;a.button;-webkit-appearance: button;-moz-appearance: button;appearance: button;text-decoration: none;color: initial;Or pick one of those many CSS libraries like Bootstrap.;Go to Google;JavaScript;If JavaScript is allowed, set the window.location.href. 
CONTENT;
        $answer->question_id = 78;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You have to use the escaped unicode;Like.breadcrumbs a:before;content: '>\0000a0';More info on: http://www.evotech.net/blog/2007/04/named-html-entities-in-numeric-order/   
CONTENT;
        $answer->question_id = 79;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        A CDATA section is required if you need your document to parse as XML (e.g. when an XHTML page is interpreted as XML) and you want to be able to write literal i<10 and a && b instead of i&&lt;10 and a &&amp;amp;b, as XHTML will parse the JavaScript code as parsed character data as opposed to character data by default. This is not an issue with scripts that are stored in external source files, but for any inline JavaScript in XHTML you will probably want to use a CDATA section.;Note that many XHTML pages were never intended to be parsed as XML in which case this will not be an issue.;For a good writeup on the subject, see http://javascript.about.com/library/blxhtml.htm    
CONTENT;
        $answer->question_id = 80;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I'm going to go through your arguments one after another and try to show the errors in them.;It's good to separate content from layout;But this is a fallacious argument, Cliché Thinking.;It's not fallacious at all because HTML was designed intentionally. Misuse of an element might not be completely out of question (after all, new idioms have developed in other languages, as well) but possible negative implications have to be counterbalanced. Additionally, even if there were no arguments against misusing the element today, there might be tomorrow because of the way browser vendors apply special treatment to the element. After all, they know that “ elements are for tabular data only” and might use this fact to improve the rendering engine, in the process subtly changing how s behave, and thus breaking cases where it was previously misused.;So what? Does my boss care? Do my users care?;Depends. Is your boss pointy-haired? Then he might not care. If she's competent, then she will care, because the users will.;Perhaps me or my fellow developers who have to maintain a web page care... Is a table less maintainable? I think using a table is easier than using divs and css.;The majority of professional web developers seem to oppose you [ citation needed ]. That tables are in fact less maintainable should be obvious. Using tables for layout means that changing the corporate layout will in fact mean changing every single page. This can be very expensive. On the other hand, judicious use of semantically meaningful HTML combined with CSS might confine such changes to the CSS and the pictures used.;By the way... why is using a div or a span good separation of content from layout and a table not? Getting a good layout with only divs often requires a lot of nested divs.;Deeply nested s are an anti-pattern just as table layouts. Good web designers don't need many of them. On the other hand, even such deep-nested divs don't have many of the problems of table layouts. In fact, they can even contribute to a semantic structure by logically dividing the content in parts.;Readability of the code;I think it's the other way around. Most people understand html, little understand css. It's simpler.;“Most people” don't matter. Professionals matter. For professionals, table layouts create many more problems than HTML + CSS. This is like saying I shouldn't use GVim or Emacs because Notepad is simpler for most people. Or that I shouldn't use LaTeX because MS Word is simpler for most people.;It's better for SEO not to use tables;I don't know if this is true and wouldn't use this as an argument but it would be logical. Search engines search for relevant data. While tabular data could of course be relevant, it's rarely what users search for. Users search for terms used in the page title or similarly prominent positions. It would therefore be logical to exclude tabular content from filtering and thus cutting the processing time (and costs!) by a large factor.;Tables are slower.;An extra tbody element has to be inserted. This is peanuts for modern web browsers.;The extra element has got nothing to do with tables being slower. On the other hand, the layout algorithm for tables is much harder, the browser often has to wait for the whole table to load before it can begin to layout the content. Additionally, caching of the layout won't work (CSS can easily be cached). All this has been mentioned before.;Show me some benchmarks where the use of a table significantly slows down a page.;Unfortunately, I don't have any benchmark data. I would be interested in it myself because it's right that this argument lacks a certain scientific rigour.;Most web sites that need an upgrade need new content (html) as well. Scenarios where a new version of a web site only needs a new css file are not very likely.;Not at all. I've worked on several cases where changing the design was simplified by a separation of content and design. It's often still necessary to change some HTML code but the changes will always be much more confined. Additionally, design changes must on occasion be made dynamically. Consider template engines such as the one used by the WordPress blogging system. Table layouts would literally kill this system. I've worked on a similar case for a commercial software. Being able to change the design without changing the HTML code was one of the business requirements.;Another thing. Table layout makes automated parsing of websites (screen scraping) much harder. This might sound trivial because, after all, who does it? I was surprised myself. Screen scraping can help a lot if the service in question doesn't offer a WebService alternative to access its data. I'm working in bioinformatics where this is a sad reality. Modern web techniques and WebServices have not reached most developers and often, screen scraping is the only way to automate the process of getting data. No wonder that many biologists still perform such tasks manually. For thousands of data sets.;share   81
        75  Here's what happens when a browser loads a website;Fetch the HTML page (e.g. index.html);Begin parsing the HTML;The parser encounters a;Welcome back, user;Javascript;// my-script.js;document.addEventListener("DOMContentLoaded", function();// this function runs when the DOM is ready, i.e. when the document has been parsed;document.getElementById("user-greeting").textContent = "Welcome back, Bart;Because your browser does not know my-script.js isn't going to modify the document until it has been downloaded & executed, the parser stops parsing.;Antiquated recommendation;The old approach to solve this problem was to put;Scripts with the async attribute are executed asynchronously. This means the script is executed as soon as it's downloaded, without blocking the browser in the meantime.;This implies that it's possible script 2 is downloaded & executed before script 1.;According to http://caniuse.com/#feat=script-async, 90% of all browsers support this.;defer;Scripts with the defer attribute are executed in order (i.e. first script 1, then script 2). This also does not block the browser.;Unlike async scripts, defer scripts are only executed after the entire document has been loaded.;According to http://caniuse.com/#feat=script-defer, 90% of all browsers support this. 92% support it at least partially.;An important note on browser compatibility: in some circumstances IE <= 9 may execute deferred scripts out of order. If you need to support those browsers, please read this first!;Conclusion;The current state-of-the-art is to put scripts in the tag and use the async or defer attributes. This allows your scripts to be downloaded asap without blocking your browser.;The good thing is that your website should still load correctly on the 20% of browsers that do not support these attributes, while speeding up the other 80%.   
CONTENT;
        $answer->question_id = 82;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Edit: This does not work cross domain.;There are two different things here: the style of the iframe block and the style of the page embedded in the iframe. You can set the style of the iframe block the usual way;The style of the page embedded in the iframe must be either set by including it in the child page;Or it can be loaded from the parent page with Javascript;var cssLink = document.createElement("link");cssLink.href = "style.css;cssLink.rel = "stylesheet;cssLink.type = "text/css;frames['frame1'].document.body.appendChild(cssLink)    
CONTENT;
        $answer->question_id = 83;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Have a look at this plug-in (TexoTela jQuery numeric). This (jStepper) is another one.;This is a link if you want to build it yourself.;$(document).ready(function();$("#txtboxToFilter").keydown(function (e);// Allow: backspace, delete, tab, escape, enter and.;if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1;// Allow: Ctrl+A, Command+A;(e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true));// Allow: home, end, left, right, down, up;(e.keyCode >= 35 && e.keyCode e.keyCode||57 e.keyCode||105<e.keyCode)&&e.preventDefault()})    
CONTENT;
        $answer->question_id = 84;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Solution 1;The most reliable and unobtrusive method appears to be this;Demo: http://jsfiddle.net/SO_AMK/wXaEH/;HTML;Div 1;Div 2;​;CSS:.clearfix:after;content: ";display: block;height: 0;clear: both;​With a little CSS targeting you don't even need to add a class to the parent DIV.;This solution is backwards compatible to IE8 so you don't need to worry about older browsers failing.;Solution 2;An adaptation on solution 1 has been suggested and is as follows;Demo: http://jsfiddle.net/wXaEH/162/;HTML;Div 1;Div 2;​;CSS:.clearfix:after;content: ";display: block;height: 0;clear: both;*zoom: expression(this.runtimeStyle['zoom'] = '1', this.innerHTML += ' ');ie7-clear;display: block;clear: both;This solution appears to be backwards compatible to IE5.5 but is untested.;Solution 3;It's also possible to set display: inline-block, and width: 100%, to emulate a normal block element while not collapsing.;Demo: http://jsfiddle.net/SO_AMK/ae5ey/;CSS:.clearfix;display: inline-block;width: 100%;This solution should be backwards compatible to IE5.5 but has only been tested in IE6.    
CONTENT;
        $answer->question_id = 85;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I have found this worked in the end (note the third line overriding the open function which find the button and hides it);$("#div2").dialog;closeOnEscape: false;open: function(event, ui);$(".ui-dialog-titlebar-close", ui.dialog | ui).hide();To hide the close button on all dialogs you can use the following CSS too:.ui-dialog-titlebar-close;visibility: hidden 
CONTENT;
        $answer->question_id = 86;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Had the same problem, came up with this easy solution. It's even working recursive;$(document).mouseup(function (e);var container = $("YOUR CONTAINER SELECTOR");if (!container.is(e.target) // if the target of the click isn't the container...;container.has(e.target).length === 0) //... nor a descendant of the container;container.hide()    
CONTENT;
        $answer->question_id = 87;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I like adding functions to jQuery so this function would help;jQuery.fn.center = function ();this.css("position","absolute");this.css("top", Math.max(0, (($(window).height() - $(this).outerHeight()) / 2) +;$(window).scrollTop()) + "px");this.css("left", Math.max(0, (($(window).width() - $(this).outerWidth()) / 2) +;$(window).scrollLeft()) + "px");return this;Now we can just write;$(element).center();Demo: Fiddle (with added parameter)  
CONTENT;
        $answer->question_id = 88;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        you can use the attribute selector;$('td[name=tcol1]') // matches exactly 'tcol1';$('td[name^=tcol]') // matches those that begin with 'tcol;$('td[name*=tcol]') // matches those that contain 'tcol    
CONTENT;
        $answer->question_id = 89;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        When you make a POST request, you have to encode the data that forms the body of the request in some way.;HTML forms provide three methods of encoding.;application/x-www-form-urlencoded (the default);multipart/form-data;text/plain;Work was being done on adding application/json, but that has been abandoned.;The specifics of the formats don't matter to most developers. The important points are;When you are writing client-side code, all you need to know is use multipart/form-data when your form includes any elements.;When you are writing server-side code: Use a prewritten form handling library (e.g. Perl's CGI->param or the one exposed by PHP's $_POST superglobal) and it will take care of the differences for you. Don't bother trying to parse the raw input received by the server.;Never use text/plain.;If you are writing (or debugging) a library for parsing or generating the raw data, then you need to start worrying about the format. You might also want to know about it for interest's sake.;application/x-www-form-urlencoded is more or less the same as a query string on the end of the URL.;multipart/form-data is significantly more complicated but it allows entire files to be included in the data. An example of the result can be found in the HTML 4 specification.;text/plain is introduced by HTML 5 and is useful only for debugging — from the spec: They are not reliably interpretable by computer — and I'd argue that the others combined with tools (like the Net tab in the developer tools of most browsers) are better for that).  
CONTENT;
        $answer->question_id = 90;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        One does not simply redirect using jQuery;jQuery is not necessary, and window.location.replace(...) will best simulate an HTTP redirect.;It is better than using window.location.href =, because replace() does not keep the originating page in the session history, meaning the user won't get stuck in a never-ending back-button fiasco. If you want to simulate someone clicking on a link, use location.href. If you want to simulate an HTTP redirect, use location.replace.;For example;// similar behavior as an HTTP redirect;window.location.replace("http://stackoverflow.com");// similar behavior as clicking on a link;window.location.href = "http://stackoverflow.com  
CONTENT;
        $answer->question_id = 91;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Since the question refers to a single element, this code might be more suitable;// Checks for display:[none|block], ignores visible:[true|false];$(element).is(":visible");Same as twernt's suggestion, but applied to a single element, and it matches the algorithm recommended in the jQuery FAQ 
CONTENT;
        $answer->question_id = 92;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        1. Don't design your page, and then change it with DOM manipulations;In jQuery, you design a page, and then you make it dynamic. This is because jQuery was designed for augmentation and has grown incredibly from that simple premise.;But in AngularJS, you must start from the ground up with your architecture in mind. Instead of starting by thinking "I have this piece of the DOM and I want to make it do X", you have to start with what you want to accomplish, then go about designing your application, and then finally go about designing your view.;2. Don't augment jQuery with AngularJS;Similarly, don't start with the idea that jQuery does X, Y, and Z, so I'll just add AngularJS on top of that for models and controllers. This is really tempting when you're just starting out, which is why I always recommend that new AngularJS developers don't use jQuery at all, at least until they get used to doing things the "Angular Way".;I've seen many developers here and on the mailing list create these elaborate solutions with jQuery plugins of 150 or 200 lines of code that they then glue into AngularJS with a collection of callbacks and $apply s that are confusing and convoluted, but they eventually get it working! The problem is that in most cases that jQuery plugin could be rewritten in AngularJS in a fraction of the code, where suddenly everything becomes comprehensible and straightforward.;The bottom line is this: when solutioning, first "think in AngularJS", if you can't think of a solution, ask the community, if after all of that there is no easy solution, then feel free to reach for the jQuery. But don't let jQuery become a crutch or you'll never master AngularJS.;3. Always think in terms of architecture;First know that single-page applications are applications. They're not webpages. So we need to think like a server-side developer in addition to thinking like a client-side developer. We have to think about how to divide our application into individual, extensible, testable components.;So then how do you do that? How do you "think in AngularJS"? Here are some general principles, contrasted with jQuery.;The view is the "official record;In jQuery, we programmatically change the view. We could have a dropdown menu defined as a ul like so;Home;Menu 1;Submenu 1;Submenu 2;Submenu 3;Menu 2;In jQuery, in our application logic, we would activate it with something like;$('.main-menu').dropdownMenu();When we just look at the view, it's not immediately obvious that there is any functionality here. For small applications, that's fine. But for non-trivial applications, things quickly get confusing and hard to maintain.;In AngularJS, though, the view is the official record of view-based functionality. Our ul declaration would look like this instead:...;These two do the same thing, but in the AngularJS version anyone looking at the template knows what's supposed to happen. Whenever a new member of the development team comes on board, she can look at this and then know that there is a directive called dropdownMenu operating on it, she doesn't need to intuit the right answer or sift through any code. The view told us what was supposed to happen. Much cleaner.;Developers new to AngularJS often ask a question like: how do I find all links of a specific kind and add a directive onto them. The developer is always flabbergasted when we reply: you don't. But the reason you don't do that is that this is like half-jQuery, half-AngularJS, and no good. The problem here is that the developer is trying to "do jQuery" in the context of AngularJS. That's never going to work well. The view is the official record. Outside of a directive (more on this below), you never, ever, never change the DOM. And directives are applied in the view, so intent is clear.;Remember: don't design, and then mark up. You must architect, and then design.;Data binding;This is by far one of the most awesome features of AngularJS and cuts out a lot of the need to do the kinds of DOM manipulations I mentioned in the previous section. AngularJS will automatically update your view so you don't have to! In jQuery, we respond to events and then update content. Something like;$.ajax;url: '/myEndpoint.json;success: function (data, status);$('ul#log').append(;Data Received! ');For a view that looks like this;Apart from mixing concerns, we also have the same problems of signifying intent that I mentioned before. But more importantly, we had to manually reference and update a DOM node. And if we want to delete a log entry, we have to code against the DOM for that too. How do we test the logic apart from the DOM? And what if we want to change the presentation?;This a little messy and a trifle frail. But in AngularJS, we can do this;$http('/myEndpoint.json').then(function (response);$scope.log.push({ msg: 'Data Received!' });And our view can look like this;{{ entry.msg }};But for that matter, our view could look like this;{{ entry.msg }};And now instead of using an unordered list, we're using Bootstrap alert boxes. And we never had to change the controller code! But more importantly, no matter where or how the log gets updated, the view will change too. Automatically. Neat!;Though I didn't show it here, the data binding is two-way. So those log messages could also be editable in the view just by doing this:. And there was much rejoicing.;Distinct model layer;In jQuery, the DOM is kind of like the model. But in AngularJS, we have a separate model layer that we can manage in any way we want, completely independently from the view. This helps for the above data binding, maintains separation of concerns, and introduces far greater testability. Other answers mentioned this point, so I'll just leave it at that.;Separation of concerns;And all of the above tie into this over-arching theme: keep your concerns separate. Your view acts as the official record of what is supposed to happen (for the most part), your model represents your data, you have a service layer to perform reusable tasks, you do DOM manipulation and augment your view with directives, and you glue it all together with controllers. This was also mentioned in other answers, and the only thing I would add pertains to testability, which I discuss in another section below.;Dependency injection;To help us out with separation of concerns is dependency injection (DI). If you come from a server-side language (from Java to PHP) you're probably familiar with this concept already, but if you're a client-side guy coming from jQuery, this concept can seem anything from silly to superfluous to hipster. But it's not.:-);From a broad perspective, DI means that you can declare components very freely and then from any other component, just ask for an instance of it and it will be granted. You don't have to know about loading order, or file locations, or anything like that. The power may not immediately be visible, but I'll provide just one (common) example: testing.;Let's say in our application, we require a service that implements server-side storage through a REST API and, depending on application state, local storage as well. When running tests on our controllers, we don't want to have to communicate with the server - we're testing the controller, after all. We can just add a mock service of the same name as our original component, and the injector will ensure that our controller gets the fake one automatically - our controller doesn't and needn't know the difference.;Speaking of testing...;4. Test-driven development - always;This is really part of section 3 on architecture, but it's so important that I'm putting it as its own top-level section.;Out of all of the many jQuery plugins you've seen, used, or written, how many of them had an accompanying test suite? Not very many because jQuery isn't very amenable to that. But AngularJS is.;In jQuery, the only way to test is often to create the component independently with a sample/demo page against which our tests can perform DOM manipulation. So then we have to develop a component separately and then integrate it into our application. How inconvenient! So much of the time, when developing with jQuery, we opt for iterative instead of test-driven development. And who could blame us?;But because we have separation of concerns, we can do test-driven development iteratively in AngularJS! For example, let's say we want a super-simple directive to indicate in our menu what our current route is. We can declare what we want in the view of our application;Hello;Okay, now we can write a test for the non-existent when-active directive;it('should add "active" when the route changes', inject(function();var elm = $compile(' Hello ')($scope);$location.path('/not-matching');expect(elm.hasClass('active')).toBeFalsey();$location.path('/hello');expect(elm.hasClass('active')).toBeTruthy();And when we run our test, we can confirm that it fails. Only now should we create our directive:.directive('whenActive', function ($location);return;scope: true;link: function (scope, element, attrs);scope.$on('$routeChangeSuccess', function ();if ($location.path() == element.attr('href'));element.addClass('active');else;element.removeClass('active');Our test now passes and our menu performs as requested. Our development is both iterative and test-driven. Wicked-cool.;5. Conceptually, directives are not packaged jQuery;You'll often hear "only do DOM manipulation in a directive". This is a necessity. Treat it with due deference!;But let's dive a little deeper...;Some directives just decorate what's already in the view (think ngClass) and therefore sometimes do DOM manipulation straight away and then are basically done. But if a directive is like a "widget" and has a template, it should also respect separation of concerns. That is, the template too should remain largely independent from its implementation in the link and controller functions.;AngularJS comes with an entire set of tools to make this very easy, with ngClass we can dynamically update the class, ngModel allows two-way data binding, ngShow and ngHide programmatically show or hide an element, and many more - including the ones we write ourselves. In other words, we can do all kinds of awesomeness without DOM manipulation. The less DOM manipulation, the easier directives are to test, the easier they are to style, the easier they are to change in the future, and the more re-usable and distributable they are.;I see lots of developers new to AngularJS using directives as the place to throw a bunch of jQuery. In other words, they think "since I can't do DOM manipulation in the controller, I'll take that code put it in a directive". While that certainly is much better, it's often still wrong.;Think of the logger we programmed in section 3. Even if we put that in a directive, we still want to do it the "Angular Way". It still doesn't take any DOM manipulation! There are lots of times when DOM manipulation is necessary, but it's a lot rarer than you think! Before doing DOM manipulation anywhere in your application, ask yourself if you really need to. There might be a better way.;Here's a quick example that shows the pattern I see most frequently. We want a toggleable button. (Note: this example is a little contrived and a skosh verbose to represent more complicated cases that are solved in exactly the same way.).directive('myDirective', function ();return;template: ' Toggle me!;link: function (scope, element, attrs);var on = false;$(element).click(function ();on = !on;$(element).toggleClass('active', on);There are a few things wrong with this;First, jQuery was never necessary. There's nothing we did here that needed jQuery at all!;Second, even if we already have jQuery on our page, there's no reason to use it here, we can simply use angular.element and our component will still work when dropped into a project that doesn't have jQuery.;Third, even assuming jQuery was required for this directive to work, jqLite (angular.element) will always use jQuery if it was loaded! So we needn't use the $ - we can just use angular.element.;Fourth, closely related to the third, is that jqLite elements needn't be wrapped in $ - the element that is passed to the link function would already be a jQuery element!;And fifth, which we've mentioned in previous sections, why are we mixing template stuff into our logic?;This directive can be rewritten (even for very complicated cases!) much more simply like so:.directive('myDirective', function ();return;scope: true;template: ' Toggle me!;link: function (scope, element, attrs);scope.on = false;scope.toggle = function ();scope.on = !scope.on;Again, the template stuff is in the template, so you (or your users) can easily swap it out for one that meets any style necessary, and the logic never had to be touched. Reusability - boom!;And there are still all those other benefits, like testing - it's easy! No matter what's in the template, the directive's internal API is never touched, so refactoring is easy. You can change the template as much as you want without touching the directive. And no matter what you change, your tests still pass.;w00t!;So if directives aren't just collections of jQuery-like functions, what are they? Directives are actually extensions of HTML. If HTML doesn't do something you need it to do, you write a directive to do it for you, and then use it just as if it was part of HTML.;Put another way, if AngularJS doesn't do something out of the box, think how the team would accomplish it to fit right in with ngClick, ngClass, et al.;Summary;Don't even use jQuery. Don't even include it. It will hold you back. And when you come to a problem that you think you know how to solve in jQuery already, before you reach for the $, try to think about how to do it within the confines the AngularJS. If you don't know, ask! 19 times out of 20, the best way to do it doesn't need jQuery and to try to solve it with jQuery results in more work for you.;share   93
        87  How do I successfully query the checked property?;The checked property of a checkbox DOM element will give you the checked state of the element.;Given your existing code, you could therefore do this;if(document.getElementById('isAgeSelected').checked);$("#txtAge").show();else;$("#txtAge").hide();However, there's a much prettier way to do this, using toggle;$('#isAgeSelected').click(function();$("#txtAge").toggle(this.checked);Age is something  
CONTENT;
        $answer->question_id = 94;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        jQuery 1.6+;Use the new.prop() function;$('.myCheckbox').prop('checked', true);$('.myCheckbox').prop('checked', false);jQuery 1.5.x and below;The.prop() function is not available, so you need to use.attr().;$('.myCheckbox').attr('checked', true);$('.myCheckbox').attr('checked', false);Note that this is the approach used by jQuery's unit tests prior to version 1.6 and is preferable to using;$('.myCheckbox').removeAttr('checked');since the latter will, if the box was initially checked, change the behaviour of a call to.reset() on any form that contains it - a subtle but probably unwelcome behaviour change.;For more context, some incomplete discussion of the changes to the handling of the checked attribute/property in the transition from 1.5.x to 1.6 can be found in the version 1.6 release notes and the Attributes vs. Properties section of the.prop() documentation.;Any version of jQuery;If you're working with just one element, you can always just modify the HTMLInputElement 's.checked property;$('.myCheckbox')[0].checked = true;$('.myCheckbox')[0].checked = false;The benefit to using the.prop() and.attr() functions instead of this is that they will operate on all matched elements.    
CONTENT;
        $answer->question_id = 95;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        -> For a more general explanation of async behavior with different examples, please see Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference;-> If you already understand the problem, skip to the possible solutions below.;Explanation of the problem;The A in Ajax stands for asynchronous. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, $.ajax returns immediately and the next statement, return result,, is executed before the function you passed as success callback was even called.;Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer;Synchronous;Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer you needed.;The same is happening when you make a function call containing "normal" code;function findItem();var item;while(item_not_found);// search;return item;var item = findItem();// Do something with item;doSomethingElse();Even though findItem might take a long time to execute, any code coming after var item = findItem(), has to wait until the function returns the result.;Asynchronous;You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should call you back on your mobile phone. You hang up, leave the house and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.;That's exactly what's happening when you do an Ajax request.;findItem(function(item);// Do something with item;doSomethingElse();Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a callback (notice something? call back?). Any statement coming after that call is executed before the callback is called.;Solution(s);Embrace the asynchronous nature of JavaScript! While certain asynchronous operations provide synchronous counterparts (so does "Ajax"), it's generally discouraged to use them, especially in a browser context.;Why is it bad do you ask?;JavaScript runs in the UI thread of the browser and any long running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not.;All of this is really bad user experience. The user won't be able to tell whether everything is working fine or not. Furthermore the effect will be worse for users with a slow connection.;Restructure code;Let functions accept callbacks;The better approach is to organize your code properly around callbacks. In the example in the question, you can make foo accept a callback and use it as success callback. So this;var result = foo();// Code that depends on 'result;becomes;foo(function(result);// Code that depends on 'result;Here we pass a function as argument to foo. You can pass any function reference, for example;function myCallback(result);// Code that depends on 'result;foo(myCallback);foo itself is defined as follows;function foo(callback);$.ajax;//...;success: callback;callback will refer to the function we pass to foo when we call it and we simply pass it on to success. I.e. once the Ajax request is successful, $.ajax will call callback and pass the response to the callback (which can be referred to with result, since this is how we defined the callback).;You can also process the response before passing it to the callback;function foo(callback);$.ajax;//...;success: function(response);// For example, filter the response;callback(filtered_response);It's easier to write code using callbacks than it seems. After all, JavaScript in the browser is heavily event driven (DOM events). Receiving the Ajax response is nothing else but an event.;Difficulties could arise when you have to work with third party code, but most problems can be solved by just thinking through the application flow.;Use promises;The Promise API is a new feature of ECMAScript 6, but it has good browser support already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g. bluebird).;Promises are containers for future values. When the promise receives the value (it is resolved) or when it is cancelled (rejected), it notifies all of its "listeners" who want to access this value.;The advantage over plain callbacks is that they allow you do decouple your code and they are easier to compose.;Here is a simple example of using a promise;function delay();// `delay` returns a promise;return new Promise(function(resolve, reject);// Only `delay` is able to resolve or reject the promise;setTimeout(function();resolve(42), // After 3 seconds, resolve the promise with value 42;3000);delay().then(function(v) { // `delay` returns a promise;console.log(v), // Log the value once it is resolved;catch(function(v);// Or do something else if it is rejected;// (it would not happen in this example, since `reject` is not called).;Applied to our Ajax call we could use promises like this;function ajax(url);return new Promise(function(resolve, reject);var xhr = new XMLHttpRequest();xhr.onload = function();resolve(this.responseText);xhr.onerror = reject;xhr.open('GET', url);xhr.send();ajax("/echo/json").then(function(result);// Code depending on result;catch(function();// An error occurred;Describing all the advantages that promises offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.;More information about promises: HTML5 rocks - JavaScript Promises;jQuery: Use deferred objects;Deferred objects are jQuery's custom implementation of promises (before the Promise API was standardized). They behave almost like promises, but expose a slightly different API.;Every Ajax method of jQuery already returns a "deferred object" (actually a promise of a deferred object) which you can just return from your function;function ajax();return $.ajax(...);ajax().done(function(result);// Code depending on result;fail(function();// An error occurred;Promise gotchas;Keep in mind that promises and deferred objects are just containers for a future value, they are not the value itself. For example, suppose you had the following;function checkPassword();return $.ajax;url: '/password;data;username: $('#username').val();password: $('#password').val();type: 'POST;dataType: 'json;if (checkPassword());// Tell the user they're logged in;This code misunderstands the above asynchrony issues. Specifically, $.ajax() doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the if statement is going to always get this Deferred object, treat it as true, and proceed as though the user is logged in. Not good.;But the fix is easy;checkPassword().done(function(r);if (r);// Tell the user they're logged in;else;// Tell the user their password was bad;fail(function(x);// Tell the user something bad happened;So now we're still calling the '/password' page on the server, but our code now properly handles the wait time for the server to respond. The $.ajax() call still returns immediately with a jQuery Ajax Deferred object, but we use it to attach event listeners to.done() and.fail(). In the.done() call, where the server responded with a normal response (HTTP 200), we check the object returned by the server. In this example the server is just returning true if the login was successful, false if not, so if (r) is checking for true/false.;In the.fail() handler we're dealing with something going wrong - for example if the user lost their internet connection while they were typing in their username and password, or if your server went down.;Not recommended: Synchronous "Ajax" calls;As I mentioned, some asynchronous operations have synchronous counterparts. While I don't advocate there use, for completeness, here is how you would perform a synchronous call;Without jQuery;If you directly use a XMLHTTPRequest object, pass false as third argument to.open.;jQuery;If you use jQuery, you can set the async option to false. Note that this option is deprecated since jQuery 1.8.;You can then either still use a success callback or access the responseText property of the jqXHR object;function foo();var jqXHR = $.ajax;//...;async: false;return jqXHR.responseText;If you use any other jQuery Ajax method, such as $.get, $.getJSON, etc., you have to change it to $.ajax (since you can only pass configuration parameters to $.ajax).;Heads up! It is not possible to make a synchronous JSONP request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).    
CONTENT;
        $answer->question_id = 96;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        return false from within a jQuery event handler is effectively the same as calling both e.preventDefault and e.stopPropagation on the passed jQuery.Event object.;e.preventDefault() will prevent the default event from occuring, e.stopPropagation() will prevent the event from bubbling up and return false will do both. Note that this behaviour differs from normal (non-jQuery) event handlers, in which, notably, return false does not stop the event from bubbling up.;Source: John Resig;Any benefit to using event.preventDefault() over "return false" to cancel out an href click?   
CONTENT;
        $answer->question_id = 97;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        With HTML5 you CAN make file uploads with Ajax and jQuery. Not only that, you can do file validations (name, size, and MIME-type) or handle the progress event with the HTML5 progress tag (or a div). Recently I had to make a file uploader, but I didn't want to use Flash nor Iframes or plugins and after some research I came up with the solution.;The HTML;First, you can do some validation if you want. For example, in the onChange event of the file;$(':file').change(function();var file = this.files[0];var name = file.name;var size = file.size;var type = file.type;//Your validation;Now the Ajax submit with the button's click;$(':button').click(function();var formData = new FormData($('form')[0]);$.ajax;url: 'upload.php', //Server script to process data;type: 'POST;xhr: function() { // Custom XMLHttpRequest;var myXhr = $.ajaxSettings.xhr();if(myXhr.upload){ // Check if upload property exists;myXhr.upload.addEventListener('progress',progressHandlingFunction, false), // For handling the progress of the upload;return myXhr;//Ajax events;beforeSend: beforeSendHandler;success: completeHandler;error: errorHandler;// Form data;data: formData;//Options to tell jQuery not to process data or worry about content-type.;cache: false;contentType: false;processData: false;Now if you want to handle the progress.;function progressHandlingFunction(e);if(e.lengthComputable);$('progress').attr({value:e.loaded,max:e.total});As you can see, with HTML5 (and some research) file uploading not only becomes possible but super easy. Try it with Google Chrome as some of the HTML5 components of the examples aren't available in every browser.   
CONTENT;
        $answer->question_id = 98;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The jQuery constructor accepts a 2nd parameter called context which can be used to override the context of the selection.;jQuery("img", this);Which is the same as using.find() like this;jQuery(this).find("img");If the imgs you desire are only direct descendants of the clicked element, you can also use.children();jQuery(this).children("img")  
CONTENT;
        $answer->question_id = 99;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        To get the value of the selected radioName item of a form with id myForm;$('input[name=radioName]:checked', '#myForm').val();Here's an example;$('#myForm input').on('change', function();alert($('input[name=radioName]:checked', '#myForm').val())    
CONTENT;
        $answer->question_id = 100;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        In JavaScript, everything is truthy or falsy and for numbers, 0 means false, everything else true. So you could write;if ($(selector).length);and you don't need that > 0 part. 
CONTENT;
        $answer->question_id = 101;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The approach you suggest is not guaranteed to give you the result you're looking for - what if you had a tbody for example:......;You would end up with the following:.........;I would therefore recommend this approach instead;$('#myTable tr:last').after('...... ');You can include anything within the after() method as long as it's valid HTML, including multiple rows as per the example above.;Update: Revisiting this answer following recent activity with this question. eyelidlessness makes a good comment that there will always be a tbody in the DOM, this is true, but only if there is at least one row. If you have no rows, there will be no tbody unless you have specified one yourself.;DaRKoN_ suggests appending to the tbody rather than adding content after the last tr. This gets around the issue of having no rows, but still isn't bulletproof as you could theoretically have multiple tbody elements and the row would get added to each of them.;Weighing everything up, I'm not sure there is a single one-line solution that accounts for every single possible scenario. You will need to make sure the jQuery code tallies with your markup.;I think the safest solution is probably to ensure your table always includes at least one tbody in your markup, even if it has no rows. On this basis, you can use the following which will work however many rows you have (and also account for multiple tbody elements);$('#myTable > tbody:last-child').append('...... ')    
CONTENT;
        $answer->question_id = 102;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Update 1 November 2012;My original answer applies specifically to jQuery 1.6. My advice remains the same but jQuery 1.6.1 changed things slightly: in the face of the predicted pile of broken websites, the jQuery team reverted attr() to something close to (but not exactly the same as) its old behaviour for Boolean attributes. John Resig also blogged about it. I can see the difficulty they were in but still disagree with the recommendation to prefer attr().;Original answer;If you've only ever used jQuery and not the DOM directly, this could be a confusing change, although it is definitely an improvement conceptually. Not so good for the bazillions of sites using jQuery that will break as a result of this change though.;I'll summarize the main issues;You usually want prop() rather than attr().;In the majority of cases, prop() does what attr() used to do. Replacing calls to attr() with prop() in your code will generally work.;Properties are generally simpler to deal with than attributes. An attribute value may only be a string whereas a property can be of any type. For example, the checked property is a Boolean, the style property is an object with individual properties for each style, the size property is a number.;Where both a property and an attribute with the same name exists, usually updating one will update the other, but this is not the case for certain attributes of inputs, such as value and checked: for these attributes, the property always represents the current state while the attribute (except in old versions of IE) corresponds to the default value/checkedness of the input (reflected in the defaultValue / defaultChecked property).;This change removes some of the layer of magic jQuery stuck in front of attributes and properties, meaning jQuery developers will have to learn a bit about the difference between properties and attributes. This is a good thing.;If you're a jQuery developer and are confused by this whole business about properties and attributes, you need to take a step back and learn a little about it, since jQuery is no longer trying so hard to shield you from this stuff. For the authoritative but somewhat dry word on the subject, there's the specs: DOM4, HTML DOM, DOM Level 2, DOM Level 3. Mozilla's DOM documentation is valid for most modern browsers and is easier to read than the specs, so you may find their DOM reference helpful. There's a section on element properties.;As an example of how properties are simpler to deal with than attributes, consider a checkbox that is initially checked. Here are two possible pieces of valid HTML to do this;So, how do you find out if the checkbox is checked with jQuery? Look on Stack Overflow and you'll commonly find the following suggestions;if ($("#cb").attr("checked") === true) {...};if ($("#cb").attr("checked") == "checked") {...};if ($("#cb").is(":checked")) {...};This is actually the simplest thing in the world to do with the checked Boolean property, which has existed and worked flawlessly in every major scriptable browser since 1995;if (document.getElementById("cb").checked) {...};The property also makes checking or unchecking the checkbox trivial;document.getElementById("cb").checked = false;In jQuery 1.6, this unambiguously becomes;$("#cb").prop("checked", false);The idea of using the checked attribute for scripting a checkbox is unhelpful and unnecessary. The property is what you need.;It's not obvious what the correct way to check or uncheck the checkbox is using the checked attribute;The attribute value reflects the default rather than the current visible state (except in some older versions of IE, thus making things still harder). The attribute tells you nothing about the whether the checkbox on the page is checked. See http://jsfiddle.net/VktA6/49/.    
CONTENT;
        $answer->question_id = 103;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Eval is not necessary. This will work fine;var date = new Date(parseInt(jsonDate.substr(6)));The substr function takes out the "/Date(" part, and the parseInt function gets the integer and ignores the ")/" at the end. The resulting number is passed into the Date constructor.;EDIT: I have intentionally left out the radix (the 2nd argument to parseInt), see my comment below. Also, I completely agree with Rory's comment: ISO-8601 dates are preferred over this old format -- so this format generally shouldn't be used for new development. See the excellent Json.NET library for a great alternative that serializes dates using the ISO-8601 format.;For ISO-8601 formatted JSON dates, just pass the string into the Date constructor;var date = new Date(jsonDate), //no ugly parsing needed, full timezone support 
CONTENT;
        $answer->question_id = 104;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Use location.reload();$('#something').click(function();location.reload();The reload() function takes an optional parameter that can be set to true to force a reload from the server rather than the cache. The parameter defaults to false, so by default the page may reload from the browser's cache.    
CONTENT;
        $answer->question_id = 105;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        opdownid option:selected").text() 
CONTENT;
        $answer->question_id = 106;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        jQuery 1.6+;To change the disabled property you should use the.prop() function.;$("input").prop('disabled', true);$("input").prop('disabled', false);jQuery 1.5 and below;The.prop() function doesn't exist, but.attr() does similar;Set the disabled attribute.;$("input").attr('disabled','disabled');To enable again, the proper method is to use.removeAttr();$("input").removeAttr('disabled');In any version of jQuery;You can always rely on the actual DOM object and is probably a little faster than the other two options if you are only dealing with one element;// assuming an event handler thus 'this;this.disabled = true;The advantage to using the.prop() or.attr() methods is that you can set the property for a bunch of selected items.;Note: In 1.6 there is a.removeProp() method that sounds a lot like removeAttr(), but it SHOULD NOT BE USED on native properties like 'disabled' Excerpt from the documentation;Note: Do not use this method to remove native properties such as checked, disabled, or selected. This will remove the property completely and, once removed, cannot be added again to element. Use.prop() to set these properties to false instead.;In fact, I doubt there are many legitimate uses for this method, boolean props are done in such a way that you should set them to false instead of "removing" them like their "attribute" counterparts in 1.5 
CONTENT;
        $answer->question_id = 107;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you want an intersection, just write the selectors together without spaces in between.;$('.a.b');So for an element that has an ID of a with classes b and c, you would write;$('#a.b.c') 
CONTENT;
        $answer->question_id = 108;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Attach a click event to the document body which closes the window. Attach a separate click event to the window which stops propagation to the document body.;$(window).click(function();//Hide the menus if visible;$('#menucontainer').click(function(event);event.stopPropagation();Warning, if using this technique, be aware of the dangers of stopping propagation.    
CONTENT;
        $answer->question_id = 109;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Most of the jQuery Ajax methods return an XMLHttpRequest (or the equivalent) object, so you can just use abort().;See the documentation;abort Method (MSDN). Cancels the current HTTP request.;abort() (MDN). If the request has been sent already, this method will abort the request.;var xhr = $.ajax;type: "POST;url: "some.php;data: "name=John&location=Boston;success: function(msg);alert("Data Saved: " + msg);//kill the request;xhr.abort();UPDATE;As of jQuery 1.5 the returned object is a wrapper for the native XMLHttpRequest object called jqXHR. This object appears to expose all of the native properties and methods so the above example still works. See The jqXHR Object (jQuery API documentation).    
CONTENT;
        $answer->question_id = 110;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Assuming you have a button with the id button, try this example;$("#button").click(function();$('html, body').animate;scrollTop: $("#elementtoScrollToID").offset().top;2000);I got the code from the article Smoothly scroll to an element without a jQuery plugin. And I have tested it on the example below.;Test;Test 2;Click me    
CONTENT;
        $answer->question_id = 111;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        To get the path, you can use;var pathname = window.location.pathname, // Returns path only;var url = window.location.href, // Returns full URL  
CONTENT;
        $answer->question_id = 112;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        serializeArray already does exactly that. You just need to massage the data into your required format;$.fn.serializeObject = function();var o = {};var a = this.serializeArray();$.each(a, function();if (o[this.name] !== undefined);if (!o[this.name].push);o[this.name] = [o[this.name]];o[this.name].push(this.value || '');else;o[this.name] = this.value || ';return o;Example of this in action;Fiddle   
CONTENT;
        $answer->question_id = 113;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        There is a standards based replacement, DOMContentLoaded that is supported by over 90%+ of browsers, though not IE8;document.addEventListener("DOMContentLoaded", function(event);//do work;jQuery's native function is much more complicated than just window.onload, as depicted below.;function bindReady();if (readyBound) return;readyBound = true;// Mozilla, Opera and webkit nightlies currently support this event;if (document.addEventListener);// Use the handy event callback;document.addEventListener("DOMContentLoaded", function();document.removeEventListener("DOMContentLoaded", arguments.callee, false);jQuery.ready();false);// If IE event model is used;else if (document.attachEvent);// ensure firing before onload;// maybe late but safe also for iframes;document.attachEvent("onreadystatechange", function();if (document.readyState === "complete");document.detachEvent("onreadystatechange", arguments.callee);jQuery.ready();// If IE and not an iframe;// continually check to see if the document is ready;if (document.documentElement.doScroll && window == window.top) (function();if (jQuery.isReady) return;try;// If IE is used, use the trick by Diego Perini;// http://javascript.nwbox.com/IEContentLoaded/;document.documentElement.doScroll("left");catch(error);setTimeout(arguments.callee, 0);return;// and execute any waiting functions;jQuery.ready();();// A fallback to window.onload, that will always work;jQuery.event.add(window, "load", jQuery.ready)    
CONTENT;
        $answer->question_id = 114;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        After a bit of investigation, turns out that Safari on iOS6 will cache POSTs that have either no Cache-Control headers or even "Cache-Control: max-age=0".;The only way I've found of preventing this caching from happening at a global level rather than having to hack random querystrings onto the end of service calls is to set "Cache-Control: no-cache".;So;No Cache-Control or Expires headers = iOS6 Safari will cache;Cache-Control max-age=0 and an immediate Expires = iOS6 Safari will cache;Cache-Control: no-cache = iOS6 Safari will NOT cache;I suspect that Apple is taking advantage of this from the HTTP spec in section 9.5 about POST;Responses to this method are not cacheable, unless the response;includes appropriate Cache-Control or Expires header fields. However;the 303 (See Other) response can be used to direct the user agent to;retrieve a cacheable resource.;So in theory you can cache POST responses...who knew. But no other browser maker has ever thought it would be a good idea until now. But that does NOT account for the caching when no Cache-Control or Expires headers are set, only when there are some set. So it must be a bug.;Below is what I use in the right bit of my Apache config to target the whole of my API because as it happens I don't actually want to cache anything, even gets. What I don't know is how to set this just for POSTs.;Header set Cache-Control "no-cache;Update: Just noticed that I didn't point out that it is only when the POST is the same, so change any of the POST data or URL and you're fine. So you can as mentioned elsewhere just add some random data to the URL or a bit of POST data.;Update: You can limit the "no-cache" just to POSTs if you wish like this in Apache;SetEnvIf Request_Method "POST" IS_POST;Header set Cache-Control "no-cache" env=IS_POST  
CONTENT;
        $answer->question_id = 115;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        JSON-js - JSON in JavaScript.;To convert an object to a string, use JSON.stringify;var json_text = JSON.stringify(your_object, null, 2);To convert a JSON string to object, use JSON.parse;var your_object = JSON.parse(json_text);It was recently recommended by John Resig:...PLEASE start migrating;your JSON-using applications over to;Crockford's json2.js. It is fully;compatible with the ECMAScript 5;specification and gracefully degrades;if a native (faster!) implementation;exists.;In fact, I just landed a change in jQuery yesterday that utilizes the;JSON.parse method if it exists, now;that it has been completely specified.;I tend to trust what he says on JavaScript matters:);Newer browsers support the JSON object natively. The current version of Crockford's JSON library will only define JSON.stringify and JSON.parse if they're not already defined, leaving any browser native implementation intact.   
CONTENT;
        $answer->question_id = 116;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If Chrome DevTools is reporting a 404 for a.map file (maybe jquery-1.10.2.min.map, jquery.min.map or jquery-2.0.3.min.map, but can happen with anything) first thing to know is this is only requested when using the DevTools.;Your users will not be hitting this 404.;Now you can fix this or disable the sourcemap functionality.;Fix: get the files;Next, it's an easy fix. Head to http://jquery.com/download/ and click the Download the map file link for your version, and you'll want the uncompressed file downloaded as well.;Having the map file in place allows you do debug your minified jQuery via the original sources, which will save a lot of time and frustration if you don't like dealing with variable names like a and c.;More about sourcemaps here: An Introduction to JavaScript Source Maps;Dodge: disable sourcemaps;Instead of getting the files, you can alternatively disable JavaScript source maps completely for now, in your settings. This is a fine choice if you never plan on debugging JavaScript on this page.;Use the cog icon in the bottom right of the DevTools, to open settings, then 
CONTENT;
        $answer->question_id = 117;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Same as other answers, in jQuery fashion;$.each(selectValues, function(key, value);$('#mySelect').append($(" ").attr("value",key).text(value))  
CONTENT;
        $answer->question_id = 118;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It's looking for an element with id list which has a property value equal to 2. What you want is the option child of the list.;$("#list option[value='2']").text()  
CONTENT;
        $answer->question_id = 119;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can achieve it like this;This should be in your page's and any jQuery ready event handlers should be in the to avoid errors (although it's not fool-proof!).;One more reason to not use Google-hosted jQuery is that in some countries, Google's domain name is banned. 
CONTENT;
        $answer->question_id = 120;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can do this;if (variable == null);// your code here.;(Edited heavily from previously incorrect answer, see edit history to make sense of comments.) 
CONTENT;
        $answer->question_id = 121;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        As of jQuery 1.7 you should use jQuery.fn.on;$(staticAncestors).on(eventName, dynamicChild, function() {});Prior to this, the recommended approach was to use live();$(selector).live(eventName, function(){});However, live() was deprecated in 1.7 in favour of on(), and completely removed in 1.9. The live() signature;$(selector).live(eventName, function(){}),... can be replaced with the following on() signature;$(document).on(eventName, selector, function(){});For example, if your page was dynamically creating elements with the class name dosomething you would bind the event to a parent which already exists, often document.;$(document).on('mouseover mouseout', '.dosomething', function();// what you want to happen when mouseover and mouseout;// occurs on elements that match '.dosomething;Any parent that exists at the time the event is bound is fine. For example;$('.buttons').on('click', 'button', function();// do something;would apply to 
CONTENT;
        $answer->question_id = 122;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        See the plugin;https://github.com/carhartl/jquery-cookie;You can then do;$.cookie("test", 1);To delete;$.removeCookie("test");Additionally, to set a timeout of a certain number of days (10 here) on the cookie;$.cookie("test", 1, { expires: 10 });If the expires option is omitted, then the cookie becomes a session cookie, and is deleted when the browser exits.;To cover all the options;$.cookie("test", 1;expires: 10, //expires in 10 days;path: '/', //The value of the path attribute of the cookie;//(default: path of page that created the cookie).;domain: 'jquery.com', //The value of the domain attribute of the cookie;//(default: domain of page that created the cookie).;secure: true //If set to true the secure attribute of the cookie;//will be set and the cookie transmission will;//require a secure protocol (defaults to false).;To read back the value of the cookie;var cookieValue = $.cookie("test");You may wish to specify the path parameter if the cookie was created on a different path to the current one;var cookieValue = $.cookie("test", { path: '/foo' });UPDATE (April 2015);As stated in the comments below, the team that worked on the original plugin has removed jquery dependency in a new project (https://github.com/js-cookie/js-cookie) which has the same functionality and general syntax as the jquery version. Apparently the original plugin isn't going anywhere though. 
CONTENT;
        $answer->question_id = 123;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I read this question and implemented the approach that has been stated regarding setting the response status code to 278 in order to avoid the browser transparently handling the redirects. Even though this worked, I was a little dissatisfied as it is a bit of a hack.;After more digging around, I ditched this approach and used JSON. In this case, all responses to ajax requests have the status code 200 and the body of the response contains a JSON object that is constructed on the server. The javascript on the client can then use the JSON object to decide what it needs to do.;I had a similar problem to yours. I perform an ajax request that has 2 possible responses: one that redirects the browser to a new page and one that replaces an existing HTML form on the current page with a new one. The jquery code to do this looks something like;$.ajax;type: "POST;url: reqUrl;data: reqBody;dataType: "json;success: function(data, textStatus);if (data.redirect);// data.redirect contains the string URL to redirect to;window.location.href = data.redirect;else;// data.form contains the HTML for the replacement form;$("#myform").replaceWith(data.form);The JSON object "data" is constructed on the server to have 2 members: data.redirect and data.form. I found this approach to be much better.  
CONTENT;
        $answer->question_id = 124;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        r("href", "http://www.google.com/")...Will modify the href of all hyperlinks to point to Google. You probably want a somewhat more refined selector though. For instance, if you have a mix of link source (hyperlink) and link target (a.k.a. "anchor") anchor tags;The CodeProject...Then you probably don't want to accidentally add href attributes to them. For safety then, we can specify that our selector will only match tags with an existing href attribute;$("a[href]") //...;Of course, you'll probably have something more interesting in mind. If you want to match an anchor with a specific existing href, you might use something like this;$("a[href='http://www.google.com/']").attr('href', 'http://www.live.com/');This will find links where the href exactly matches the string http://www.google.com/. A more involved task might be matching, then updating only part of the href;$("a[href^='http://stackoverflow.com']").each(function();this.href = this.href.replace(/^http:\/\/beta\.stackoverflow\.com/;http://stackoverflow.com");The first part selects only links where the href starts with http://stackoverflow.com. Then, a function is defined that uses a simple regular expression to replace this part of the URL with a new one. Note the flexibility this gives you - any sort of modification to the link could be done here.   
CONTENT;
        $answer->question_id = 125;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        jQuery 1.7 <];With jQuery 1.7 onward the event API has been updated,.bind() /.unbind() are still available for backwards compatibility, but the preferred method is using the on() / off() functions. The below would now be;$('#myimage').click(function() { return false, }), // Adds another click event;$('#myimage').off('click');$('#myimage').on('click.mynamespace', function() { /* Do stuff */ });$('#myimage').off('click.mynamespace');In your example code you are simply adding another click event to the image, not overriding the previous one;$('#myimage').click(function() { return false, }), // Adds another click event;Both click events will then get fired.;As people have said you can use unbind to remove all click events;$('#myimage').unbind('click');If you want to add a single event and then remove it (without removing any others that might have been added) then you can use event namespacing;$('#myimage').bind('click.mynamespace', function() { /* Do stuff */ });and to remove just your event;$('#myimage').unbind('click.mynamespace')   
CONTENT;
        $answer->question_id = 126;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you don't need the change to animate then you don't need to use any special plugins - I'd just use the native JavaScript window.scrollTo method -- passing in 0,0 will scroll the page to the top left instantly.;window.scrollTo(x-coord, y-coord);Parameters;x-coord is the pixel along the horizontal axis.;y-coord is the pixel along the vertical axis. 
CONTENT;
        $answer->question_id = 127;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The ready event occurs after the HTML document has been loaded, while the onload event occurs later, when all content (e.g. images) also has been loaded.;The onload event is a standard event in the DOM, while the ready event is specific to jQuery. The purpose of the ready event is that it should occur as early as possible after the document has loaded, so that code that adds functionality to the elements in the page doesn't have to wait for all content to load.   
CONTENT;
        $answer->question_id = 128;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        From the jQuery documentation: you specify the asynchronous option to be false to get a synchronous Ajax request. Then your callback can set some data before your mother function proceeds.;Here's what your code would look like if changed as suggested;beforecreate: function (node, targetNode, type, to);jQuery.ajax;url: 'http://example.com/catalog/create/' + targetNode.id + '?name=' + encode(to.inp[0].value);success: function (result);if (result.isOk == false) alert(result.message);async: false   
CONTENT;
        $answer->question_id = 129;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        This should do the trick;function isScrolledIntoView(elem);var docViewTop = $(window).scrollTop();var docViewBottom = docViewTop + $(window).height();var elemTop = $(elem).offset().top;var elemBottom = elemTop + $(elem).height();return ((elemBottom = docViewTop)) 
CONTENT;
        $answer->question_id = 130;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        As you are already using jQuery, you can use the grep function which is intended for searching an array;var result = $.grep(myArray, function(e){ return e.id == id, });The result is an array with the items found. If you know that the object is always there and that it only occurs once, you can just use result[0].foo to get the value. Otherwise you should check the length of the resulting array. Example;if (result.length == 0);// not found;else if (result.length == 1);// access the foo property using result[0].foo;else;// multiple items found 
CONTENT;
        $answer->question_id = 131;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Up until jQuery 1.11.1, you could use the following URLs to get the latest version of jQuery;http://code.jquery.com/jquery-latest.min.js - jQuery hosted (minified);http://code.jquery.com/jquery-latest.js - jQuery hosted (uncompressed);http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js - Google hosted (minified);http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js - Google hosted (uncompressed);For example;However, since jQuery 1.11.1, both jQuery and Google stopped updating these URLs, they will forever be fixed at 1.11.1. There is no supported alternative URL to use. For an explanation of why this is the case, see this blog post, Don't use jquery-latest.js.;Both hosts support https as well as http, so change the protocol as you see fit (or use a protocol relative URI);See also    
CONTENT;
        $answer->question_id = 132;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Use prepared statements and parameterized queries. These are SQL statements that are sent to and parsed by the database server separately from any parameters. This way it is impossible for an attacker to inject malicious SQL.;You basically have two options to achieve this;Using PDO (for any supported database driver);$stmt = $pdo->prepare('SELECT * FROM employees WHERE name =:name');$stmt->execute(array('name' => $name));foreach ($stmt as $row);// do something with $row;Using MySQLi (for MySQL);$stmt = $dbConnection->prepare('SELECT * FROM employees WHERE name =?');$stmt->bind_param('s', $name);$stmt->execute();$result = $stmt->get_result();while ($row = $result->fetch_assoc());// do something with $row;If you're connecting to a database other than MySQL, there is a driver-specific second option that you can refer to (e.g. pg_prepare() and pg_execute() for PostgreSQL). PDO is the universal option.;Correctly setting up the connection;Note that when using PDO to access a MySQL database real prepared statements are not used by default. To fix this you have to disable the emulation of prepared statements. An example of creating a connection using PDO is;$dbConnection = new PDO('mysql:dbname=dbtest,host=127.0.0.1,charset=utf8', 'user', 'pass');$dbConnection->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);$dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);In the above example the error mode isn't strictly necessary, but it is advised to add it. This way the script will not stop with a Fatal Error when something goes wrong. And it gives the developer the chance to catch any error(s) which are throw n as PDOException s.;What is mandatory however is the first setAttribute() line, which tells PDO to disable emulated prepared statements and use real prepared statements. This makes sure the statement and the values aren't parsed by PHP before sending it to the MySQL server (giving a possible attacker no chance to inject malicious SQL).;Although you can set the charset in the options of the constructor, it's important to note that 'older' versions of PHP (prepare('INSERT INTO table (column) VALUES (:column)');$preparedStatement->execute(array('column' => $unsafeValue));Can Prepared Statements Be Used For Dynamic Queries?;While you can still use prepared statements for the query parameters, the structure of the dynamic query itself cannot be parametrized and certain query features cannot be parametrized.;For these specific scenarios, the best thing to do is use a whitelist filter that restricts the possible values.;// Value whitelist;// $dir can only be 'DESC' or 'ASC;$dir = !empty($direction)? 'DESC': 'ASC;share 133
        127 Incrementing / Decrementing Operators;++ increment operator;-- decrement operator;Example Name Effect;---------------------------------------------------------------------;++$a Pre-increment Increments $a by one, then returns $a.;$a++ Post-increment Returns $a, then increments $a by one.;--$a Pre-decrement Decrements $a by one, then returns $a.;$a-- Post-decrement Returns $a, then decrements $a by one.;These can go before or after the variable.;If put before the variable, the increment / decrement operation is done to the variable first then the result is returned. If put after the variable, the variable is first returned, then the increment / decrement operation is done.;For example;$apples = 10;for ($i = 0, $i < 10, ++$i);echo 'I have '. $apples--. " apples. I just ate one.\n;Live example;In the case above ++$i is used, since it is faster. $i++ would have the same results.;Pre-increment is a little bit faster, because it really increments the variable and after that 'returns' the result. Post-increment creates a special variable, copies there value of the first variable and only after first variable is used, replaces its value with second's.;However, you must use $apples--, since first you want to display the current number of apples, and then you want to subtract one from it.;You can also increment letters in PHP;$i = "a;while ($i < "c");echo $i++;Once z is reached aa is next, and so on.;Note that character variables can be incremented but not decremented and even so only plain ASCII characters (a-z and A-Z) are supported.;Stack Overflow Posts;Understanding Incrementing 
CONTENT;
        $answer->question_id = 134;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        There is no simple regular expression for this problem: see;this fully RFC‑822–compliant regex, which is anything but simple. (It was written before the days of grammatical patterns.) The grammar specified in RFC 5322 is too complicated for primitive regular expressions.;The more sophisticated grammatical patterns in Perl, PCRE, and PHP can all manage to correctly parse RFC 5322 without a hitch. Python and C# should also be able to manage it, but they use a different syntax from those first three. However, if you are forced to use one of the many less powerful pattern-matching languages, then it’s best to use a real parser.;It's also important to understand that validating it per the RFC tells you absolutely nothing about whether that address actually exists at the supplied domain, or whether the person entering the address is its true owner. People sign others up to mailing lists this way all the time. Fixing that requires a fancier kind of validation that involves sending that address a message that includes a confirmation token meant to be entered in the same web page as was the address.;Confirmation tokens are the only way to know you got the address of the person entering it. This is why most mailing lists now use that mechanism to confirm sign-ups. After all, anybody can put down president@whitehouse.gov, and that will even parse as legal, but it isn't likely to be the person at the other end.;For PHP, you should not use the pattern given in Validate an E-Mail Address with PHP, the Right Way from which I quote;There is some danger that common usage and widespread sloppy coding will establish a de facto standard for e-mail addresses that is more restrictive than the recorded formal standard.;That is no better than all the other non-RFC patterns. It isn’t even smart enough to handle even RFC 822, let alone RFC 5322. This one, however, is.;If you want to get fancy and pedantic, implement a complete state engine. A regular expression can only act as a rudimentary filter. The problem with regular expressions is that telling someone that their perfectly valid e-mail address is invalid (a false positive) because your regular expression can't handle it is just rude and impolite from the user's perspective. A state engine for the purpose can both validate and even correct e-mail addresses that would otherwise be considered invalid as it disassembles the e-mail address according to each RFC. This allows for a potentially more pleasing experience, like;The specified e-mail address 'myemail@address,com' is invalid. Did you mean 'myemail@address.com'?;See also Validating Email Addresses, including the comments. Or Comparing E-mail Address Validating Regular Expressions.;Debuggex Demo   
CONTENT;
        $answer->question_id = 135;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can use the strpos function which is used to find the occurrence of one string inside other;if (strpos($a, 'are') !== false);echo 'true;Note that the use of !== false is deliberate, strpos returns either the offset at which the needle string begins in the haystack string, or the boolean false if the needle isn't found. Since 0 is a valid offset and 0 is "falsey", we can't use simpler constructs like !strpos($a, 'are').  
CONTENT;
        $answer->question_id = 136;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Native XML Extensions;I prefer using one of the native XML extensions since they come bundled with PHP, are usually faster than all the 3rd party libs and give me all the control I need over the markup.;DOM;The DOM extension allows you to operate on XML documents through the DOM API with PHP 5. It is an implementation of the W3C's Document Object Model Core Level 3, a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents.;DOM is capable of parsing and modifying real world (broken) HTML and it can do XPath queries. It is based on libxml.;It takes some time to get productive with DOM, but that time is well worth it IMO. Since DOM is a language-agnostic interface, you'll find implementations in many languages, so if you need to change your programming language, chances are you will already know how to use that language's DOM API then.;A basic usage example can be found in Grabbing the href attribute of an A element and a general conceptual overview can be found at DOMDocument in php;How to use the DOM extension has been covered extensively on StackOverflow, so if you choose to use it, you can be sure most of the issues you run into can be solved by searching/browsing Stack Overflow.;XMLReader;The XMLReader extension is an XML pull parser. The reader acts as a cursor going forward on the document stream and stopping at each node on the way.;XMLReader, like DOM, is based on libxml. I am not aware of how to trigger the HTML Parser Module, so chances are using XMLReader for parsing broken HTML might be less robust than using DOM where you can explicitly tell it to use libxml's HTML Parser Module.;A basic usage example can be found at getting all values from h1 tags using php;XML Parser;This extension lets you create XML parsers and then define handlers for different XML events. Each XML parser also has a few parameters you can adjust.;The XML Parser library is also based on libxml, and implements a SAX style XML push parser. It may be a better choice for memory management than DOM or SimpleXML, but will be more difficult to work with than the pull parser implemented by XMLReader.;SimpleXml;The SimpleXML extension provides a very simple and easily usable toolset to convert XML to an object that can be processed with normal property selectors and array iterators.;SimpleXML is an option when you know the HTML is valid XHTML. If you need to parse broken HTML, don't even consider SimpleXml because it will choke.;A basic usage example can be found at A simple program to CRUD node and node values of xml file and there is lots of additional examples in the PHP Manual.;3rd Party Libraries (libxml based);If you prefer to use a 3rd-party lib, I'd suggest using a lib that actually uses DOM / libxml underneath instead of string parsing.;FluentDom;FluentDOM provides a jQuery-like fluent XML interface for the DOMDocument in PHP. Selectors are written in XPath or CSS (using a CSS to XPath converter). Current versions extend the DOM implementing standard interfaces and add features from the DOM Living Standard. FluentDOM can load formats like JSON, CSV, JsonML, RabbitFish and others. Can be installed via Composer.;HtmlPageDom;Wa72\HtmlPageDom` is a PHP library for easy manipulation of HTML;documents using It requires DomCrawler from Symfony2;components for traversing the;DOM tree and extends it by adding methods for manipulating the DOM;tree of HTML documents.;phpQuery (not updated for years);phpQuery is a server-side, chainable, CSS3 selector driven Document Object Model (DOM) API based on jQuery JavaScript Library written in PHP5 and provides additional Command Line Interface (CLI).;Also see: https://github.com/electrolinux/phpquery;Zend_Dom;Zend_Dom provides tools for working with DOM documents and structures. Currently, we offer Zend_Dom_Query, which provides a unified interface for querying DOM documents utilizing both XPath and CSS selectors.;QueryPath;QueryPath is a PHP library for manipulating XML and HTML. It is designed to work not only with local files, but also with web services and database resources. It implements much of the jQuery interface (including CSS-style selectors), but it is heavily tuned for server-side use. Can be installed via Composer.;fDOMDocument;fDOMDocument extends the standard DOM to use exceptions at all occasions of errors instead of PHP warnings or notices. They also add various custom methods and shortcuts for convenience and to simplify the usage of DOM.;sabre/xml;sabre/xml is a library that wraps and extends the XMLReader and XMLWriter classes to create a simple "xml to object/array" mapping system and design pattern. Writing and reading XML is single-pass and can therefore be fast and require low memory on large xml files.;FluidXML;FluidXML is a PHP library for manipulating XML with a concise and fluent API.;It leverages XPath and the fluent programming pattern to be fun and effective.;3rd-Party (not libxml-based);The benefit of building upon DOM/libxml is that you get good performance out of the box because you are based on a native extension. However, not all 3rd-party libs go down this route. Some of them listed below;SimpleHtmlDom;An HTML DOM parser written in PHP5+ lets you manipulate HTML in a very easy way!;Require PHP 5+.;Supports invalid HTML.;Find tags on an HTML page with selectors just like jQuery.;Extract contents from HTML in a single line.;I generally do not recommend this parser. The codebase is horrible and the parser itself is rather slow and memory hungry. Any of the libxml based libraries should outperform this easily.;Ganon;A universal tokenizer and HTML/XML/RSS DOM Parser;Ability to manipulate elements and their attributes;Supports invalid HTML and UTF8;Can perform advanced CSS3-like queries on elements (like jQuery -- namespaces supported);A HTML beautifier (like HTML Tidy);Minify CSS and Javascript;Sort attributes, change character case, correct indentation, etc.;Extensible;Parsing documents using callbacks based on current character/token;Operations separated in smaller functions for easy overriding;Fast and Easy;Never used it. Can't tell if it's any good.;HTML 5;You can use the above for parsing HTML5, but there can be quirks due to the markup HTML5 allows. So for HTML5 you want to consider using a dedicated parser, like;html5lib;A Python and PHP implementations of a HTML parser based on the WHATWG HTML5 specification for maximum compatibility with major desktop web browsers.;We might see more dedicated parsers once HTML5 is finalized. There is also a blogpost by the W3's titled How-To for html 5 parsing that is worth checking out.;WebServices;If you don't feel like programming PHP, you can also use web services. In general, I found very little utility for these, but that's just me and my use cases.;YQL;The YQL Web Service enables applications to query, filter, and combine data from different sources across the Internet. YQL statements have a SQL-like syntax, familiar to any developer with database experience.;ScraperWiki.;ScraperWiki's external interface allows you to extract data in the form you want for use on the web or in your own applications. You can also extract information about the state of any scraper.;Regular Expressions;Last and least recommended, you can extract data from HTML with regular expressions. In general using Regular Expressions on HTML is discouraged.;Most of the snippets you will find on the web to match markup are brittle. In most cases they are only working for a very particular piece of HTML. Tiny markup changes, like adding whitespace somewhere, or adding or changing attributes in a tag, can make the regex fails when it's not properly written. You should know what you are doing before using regex on HTML.;HTML parsers already know the syntactical rules of HTML. Regular expressions have to be taught for each new regex you write. Regex are fine in some cases, but it really depends on your use-case.;You can write more reliable parsers, but writing a complete and reliable custom parser with regular expressions is a waste of time when the aforementioned libraries already exist and do a much better job on this.;Also see Parsing Html The Cthulhu Way;Books;If you want to spend some money, have a look at;PHP Architect's Guide to Webscraping with PHP;I am not affiliated with PHP Architect or the authors.  
CONTENT;
        $answer->question_id = 137;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The MySQL extension;Is not under active development;Is officially deprecated as of PHP 5.5 (released June 2013).;Has been removed entirely as of PHP 7.0 (released December 2015);Lacks an OO interface;Doesn't support;Non-blocking, asynchronous queries;Prepared statements or parameterized queries;Stored procedures;Multiple Statements;Transactions;The "new" password authentication method (on by default in MySQL 5.6, required in 5.7);All of the functionality in MySQL 5.1;Since it is deprecated, using it makes your code less future proof.;Lack of support for prepared statements is particularly important as they provide a clearer, less error prone method of escaping and quoting external data than manually escaping it with a separate function call.;See the comparison of SQL extensions.   
CONTENT;
        $answer->question_id = 138;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        From http://www.phpbuilder.com/board/showthread.php?t=10354489;Use $this to refer to the current;object. Use self to refer to the;current class. In other words, use;$this->member for non-static members;use self::$member for static members. 
CONTENT;
        $answer->question_id = 139;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Each YouTube video has 4 generated images. They are predictably formatted as follows;http://img.youtube.com/vi/ /0.jpg;http://img.youtube.com/vi/ /1.jpg;http://img.youtube.com/vi/ /2.jpg;http://img.youtube.com/vi/ /3.jpg;The first one in the list is a full size image and others are thumbnail images. The default thumbnail image (ie. one of 1.jpg, 2.jpg, 3.jpg) is;http://img.youtube.com/vi/ /default.jpg;For the high quality version of the thumbnail use a url similar to this;http://img.youtube.com/vi/ /hqdefault.jpg;There is also a medium quality version of the thumbnail, using a url similar to the HQ;http://img.youtube.com/vi/ /mqdefault.jpg;For the standard definition version of the thumbnail, use a url similar to this;http://img.youtube.com/vi/ /sddefault.jpg;For the maximum resolution version of the thumbnail use a url similar to this;http://img.youtube.com/vi/ /maxresdefault.jpg;All of the above urls are available over https too. Just change http to https in any of the above urls. Additionally, the slightly shorter hostname i3.ytimg.com works in place of img.youtube.com in the example urls above.;Alternatively, you can use the YouTube Data API (v3) to get thumbnail images.   
CONTENT;
        $answer->question_id = 140;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        How about taking another approach or angle at this problem? Ask why the password is required to be in plaintext: if it's so that the user can retrieve the password, then strictly speaking you don't really need to retrieve the password they set (they don't remember what it is anyway), you need to be able to give them a password they can use.;Think about it: if the user needs to retrieve the password, it's because they've forgotten it. In which case a new password is just as good as the old one. But, one of the drawbacks of common password reset mechanisms used today is that the generated passwords produced in a reset operation are generally a bunch of random characters, so they're difficult for the user to simply type in correctly unless they copy-n-paste. That can be a problem for less savvy computer users.;One way around that problem is to provide auto-generated passwords that are more or less natural language text. While natural language strings might not have the entropy that a string of random characters of the same length has, there's nothing that says your auto-generated password needs to have only 8 (or 10 or 12) characters. Get a high-entropy auto-generated passphrase by stringing together several random words (leave a space between them, so they're still recognizable and typeable by anyone who can read). Six random words of varying length are probably easier to type correctly and with confidence than 10 random characters, and they can have a higher entropy as well. For example, the entropy of a 10 character password drawn randomly from uppercase, lowercase, digits and 10 punctuation symbols (for a total of 72 valid symbols) would have an entropy of 61.7 bits. Using a dictionary of 7776 words (as Diceware uses) which could be randomly selected for a six word passphrase, the passphrase would have an entropy of 77.4 bits. See the Diceware FAQ for more info.;a passphrase with about 77 bits of entropy: "admit prose flare table acute flair;a password with about 74 bits of entropy: "K:&$R^tt~qkD;I know I'd prefer typing the phrase, and with copy-n-paste, the phrase is no less easy to use that the password either, so no loss there. Of course if your website (or whatever the protected asset is) doesn't need 77 bits of entropy for an auto-generated passphrase, generate fewer words (which I'm sure your users would appreciate).;I understand the arguments that there are password protected assets that really don't have a high level of value, so the breach of a password might not be the end of the world. For example, I probably wouldn't care if 80% of the passwords I use on various websites was breached: all that could happen is a someone spamming or posting under my name for a while. That wouldn't be great, but it's not like they'd be breaking into my bank account. However, given the fact that many people use the same password for their web forum sites as they do for their bank accounts (and probably national security databases), I think it would be best to handle even those 'low-value' passwords as non-recoverable.  
CONTENT;
        $answer->question_id = 141;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        There are different ways to delete an array element, where some are more useful for some specific tasks than others.;Delete one array element;If you want to delete just one array element you can use unset() or alternative array_splice().;Also if you have the value and don't know the key to delete the element you can use array_search() to get the key.;unset() method;Note that when you use unset() the array keys won't change/reindex. If you want to reindex the keys you can use array_values() after unset() which will convert all keys to numerical enumerated keys starting from 0.;Code;a", 1 => "b", 2 => "c");unset($array[1]);//↑ Key which you want to delete;?>;Output;Array;[0] => a;[2] => c;array_splice() method;If you use array_splice() the keys will be automatically reindexed, but the associative keys won't change opposed to array_values() which will convert all keys to numerical keys.;Also array_splice() needs the offset, not the key!, as second parameter.;Code;a", 1 => "b", 2 => "c");array_splice($array, 1, 1);//↑ Offset which you want to delete;?>;Output;Array;[0] => a;[1] => c;array_splice() same as unset() take the array by reference, this means you don't want to assign the return values of those functions back to the array.;Delete multiple array elements;If you want to delete multiple array elements and don't want to call unset() or array_splice() multiple times you can use the functions array_diff() or array_diff_key() depending on if you know the values or the keys of the elements which you want to delete.;array_diff() method;If you know the values of the array elements which you want to delete, then you can use array_diff(). As before with unset() it won't change/reindex the keys of the array.;Code;a", 1 => "b", 2 => "c");$array = array_diff($array, ["a", "c"]);//└────────┘→ Array values which you want to delete;?>;Output;Array;[1] => b;array_diff_key() method;If you know the keys of the elements which you want to delete, then you want to use array_diff_key(). Here you have to make sure you pass the keys as keys in the second parameter and not as values. Otherwise you have to flip the array with array_flip(). And also here the keys won't change/reindex.;Code;a", 1 => "b", 2 => "c");$array = array_diff_key($array, [0 => "xy", "2" => "xy"]);//↑ ↑ Array keys which you want to delete;?>;Output;Array;[1] => b;Also if you want to use unset() or array_splice() to delete multiple elements with the same value you can use array_keys() to get all the keys for a specific value and then delete all elements.  
CONTENT;
        $answer->question_id = 142;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
    foreach supports iteration over three different kinds of values;Arrays;Normal objects;Traversable objects;In the following I will try to explain precisely how iteration works in the different cases. By far the simplest case are Traversable objects, as for these foreach is essentially only syntax sugar for code along these lines;foreach ($it as $k => $v) { /*... */ };/* translates to: */;if ($it instanceof IteratorAggregate);$it = $it->getIterator();for ($it->rewind(), $it->valid(), $it->next());$v = $it->current();$k = $it->key();/*... */;For internal classes actual method calls are avoided by using an internal API that essentially just mirrors the Iterator interface on the C level.;Iteration of arrays and plain objects is significantly more complicated. First of all, it should be noted that in PHP "arrays" are really ordered dictionaries and they will be traversed according to this order (which matches the insertion order as long as you didn't use something like sort). This is opposed to iterating by the natural order of the keys (how lists in other languages often work) or having no defined order at all (how dictionaries in other languages often work).;The same also applies to objects, as the object properties can be seen as another (ordered) dictionary mapping property names to their values, plus some visibility handling. In the majority of cases the object properties are not actually stored in this rather inefficient way. However if you start iterating over an object, the packed representation that is normally used will be converted to a real dictionary. At that point, iteration of plain objects becomes very similar to iteration of arrays (which is why I'm not discussing plain-object iteration much in here).;So far, so good. Iterating over a dictionary can't be too hard, right? The problems begin when you realize that an array/object can change during iteration. There are multiple ways this can happen;If you iterate by reference using foreach ($arr as &$v) then $arr is turned into a reference and you can change it during iteration.;In PHP 5 the same applies even if you iterate by value, but the array was a reference beforehand: $ref =&& $arr;foreach ($ref as $v);Objects have by-handle passing semantics, which for must practical purposes means that they behave like references. So objects can always be changed during iteration.;The problem with allowing modifications during iteration is the case where the element you are currently on is removed. Say you use a pointer to keep track of which array element you are currently at. If this element is now freed, you are left with a dangling pointer (usually resulting in a segfault).;There are different ways of solving this issue. PHP 5 and PHP 7 differ significantly in this regard and I'll describe both behaviors in the following. The summary is that PHP 5's approach was rather dumb and lead to all kinds of weird edge-case issues, while PHP 7's more involved approach results in more predictable and consistent behavior.;As a last preliminary, it should be noted that PHP uses reference counting and copy-on-write to manage memory. This means that if you "copy" a value, you actually just reuse the old value and increment its reference count (refcount). Only once you perform some kind of modification a real copy (called a "duplication") will be done. See You're being lied to for a more extensive introduction on this topic.;PHP 5;Internal array pointer and HashPointer;Arrays in PHP 5 have one dedicated "internal array pointer" (IAP), which properly supports modifications: Whenever an element is removed, there will be a check whether the IAP points to this element. If it does, it is advanced to the next element instead.;While foreach does make use of the IAP, there is an additional complication: There is only one IAP, but one array can be be part of multiple foreach loops;// Using by-ref iteration here to make sure that it's really;// the same array in both loops and not a copy;foreach ($arr as &$v1);foreach ($arr as &$v);//...;To support two simultaneous loops with only one internal array pointer, foreach performs the following schenanigans: Before the loop body is executed, foreach will back up a pointer to the current element and its hash into a per-foreach HashPointer. After the loop body runs, the IAP will be set back to this element if it still exists. If however the element has been removed, we'll just use whereever the IAP is currently at. This scheme mostly-kinda-sortof works, but there's a lot of weird behavior you can get out of it, some of which I'll demonstrate below.;Array duplication;The IAP is a visible feature of an array (exposed through the current family of functions), as such changes to the IAP count as modifications under copy-on-write semantics. This unfortunately means that foreach is in many cases forced to duplicate the array it is iterating over. The precise conditions are;The array is not a reference (is_ref=0). If it's a reference, then changes to it are supposed to propagate, so it should not be duplicated.;The array has refcount>1. If refcount is 1, then the array is not shared and we're free to modify it directly.;If the array is not duplicated (is_ref=0, refcount=1), then only its refcount will be incremented (*). Additionally, if foreach by reference is used, then the (potentially duplicated) array will be turned into a reference.;Consider this code as an example where duplication occurs;function iterate($arr);foreach ($arr as $v) {};$outerArr = [0, 1, 2, 3, 4];iterate($arr);Here, $arr will be duplicated to prevent IAP changes on $arr from leaking to $outerArr. In terms of the conditions above, the array is not a reference (is_ref=0) and is used in two places (refcount=2). This requirement is unfortunate and an artifact of the suboptimal implementation (there is no concern of modification during iteration here, so we don't really need to use the IAP in the first place).;(*) Incrementing the refcount here sounds innocuous, but violates copy-on-write (COW) semantics: This means that we are going to modify the IAP of a refcount=2 array, while COW dictates that modifications can only be performed on refcount=1 values. This violation results in user-visible behavior change (while COW is normally transparent), because the IAP change on the iterated array will be observable -- but only until the first non-IAP modification on the array. Instead, the three "valid" options would have been a) to always duplicate, b) to not increment the refcount and thus allowing the iterated array to be arbitrarily modified in the loop, or c) don't use the IAP at all (the PHP 7 solution).;Position advancement order;There is one last implementation detail that you have to be aware of to properly understand the code samples below. The "normal" way of looping through some data structure would look something like this in pseudocode;reset(arr);while (get_current_data(arr, &data) == SUCCESS);code();move_forward(arr);However foreach, being a rather special snowflake, chooses to do things slightly differently;reset(arr);while (get_current_data(arr, &data) == SUCCESS);move_forward(arr);code();Namely, the array pointer is already moved forward before the loop body runs. This means that while the loop body is working on element $i, the IAP is already at element $i+1. This is the reason why code samples showing modification during iteration will always unset the next element, rather than the current one.;Examples: Your test cases;The three aspects described above should provide you with a mostly complete impression of the idiosyncracies of the foreach implementation and we can move on to discussing some examples.;The behavior of your test cases is simple to explain at this point;In test cases 1 and 2 $array starts off with refcount=1, so it will not be duplicated by foreach: Only the refcount is incremented. When the loop body subsequently modifies the array (which has refcount=2 at that point), the duplication will occur at that point. Foreach will continue working on an unmodified copy of $array.;In test case 3, once again the array is not duplicated, thus foreach will be modifying the IAP of the $array variable. At the end of the iteration the IAP is NULL (meaning iteration done), which each indicates by returning false.;In test cases 4 and 5 both each and reset are by-reference functions. The $array has a refcount=2 when it is passed to them, so it has to be duplicated. As such foreach will be working on a separate array again.;Examples: Effects of current in foreach;A good way to show the various duplication behaviors is to observe the behavior of the current() function inside a foreach loop. Consider this example;foreach ($array as $val);var_dump(current($array));/* Output: 2 2 2 2 2 */;Here you should know that current() is a by-ref function (actually: prefer-ref), even though it does not modify the array. It has to be in order to play nice with all the other functions like next which are all by-ref. By-reference passing implies that the array has to be separated and thus $array and the foreach-array will be different. The reason you get 2 instead of 1 is also mentioned above: foreach advances the array pointer before running the user code, not after. So even though the code is at the first element, foreach already advanced the pointer to the second.;Now lets try a small modification;$ref = &&$array;foreach ($array as $val);var_dump(current($array));/* Output: 2 3 4 5 false */;Here we have the is_ref=1 case, so the array is not copied (just like above). But now that it is a reference, the array no longer has to be duplicated when passing to the by-ref current() function. Thus current() and foreach work on the same array. You still see the off-by-one behavior though, due to the way foreach advances the pointer.;You get the same behavior when doing by-ref iteration;foreach ($array as &$val);var_dump(current($array));/* Output: 2 3 4 5 false */;Here the important part is that foreach will make $array an is_ref=1 when it is iterated by reference, so basically you have the same situation as above.;Another small variation, this time we'll assign the array to another variable;$foo = $array;foreach ($array as $val);var_dump(current($array));/* Output: 1 1 1 1 1 */;Here the refcount of the $array is 2 when the loop is started, so for once we actually have to do the duplication upfront. Thus $array and the array used by foreach will be completely separate from the outset. That's why you get the position of the IAP wherever it was before the loop (in this case it was at the first position).;Examples: Modification during iteration;Trying to account for modifications during iteration is where all our foreach troubles originated, so it serves to consider some examples for this case.;Consider these nested loops over the same array (where by-ref iteration is used to make sure it really is the same one);foreach ($array as &$v1);foreach ($array as &$v2);if ($v1 == 1 && $v2 == 1);unset($array[1]);echo "($v1, $v2)\n;// Output: (1, 1) (1, 3) (1, 4) (1, 5);The expected part here is that (1, 2) is missing from the output, because element 1 was removed. What's probably unexpected is that the outer loop stops after the first element. Why is that?;The reason behind this is the nested-loop hack described above: Before the loop body runs, the current IAP position and hash is backed up into a HashPointer. After the loop body it will be restored, but only if the element still exists, otherwise the current IAP position (whatever it may be) is used instead. In the example above this is exactly the case: The current element of the outer loop has been remove, so it will use the IAP, which has already been marked as finished by the inner loop!;Another consequence of the HashPointer backup+restore mechanism is that changes to the IAP though reset() etc. usually do not impact foreach. For example, the following code executes as if the reset() were not present at all;$array = [1, 2, 3, 4, 5];foreach ($array as &$value);var_dump($value);reset($array);// output: 1, 2, 3, 4, 5;The reason is that, while reset() temporarily modifies the IAP, it will be restored to the current foreach element after the loop body. To force reset() to make an effect on the loop, you have to additionally remove the current element, so that the backup/restore mechanism fails;$array = [1, 2, 3, 4, 5];$ref =&& $array;foreach ($array as $value);var_dump($value);unset($array[1]);reset($array);// output: 1, 1, 3, 4, 5;But, those examples are still sane. The real fun starts if you remember that the HashPointer restore uses a pointer to the element and its hash to determine whether it still exists. But: Hashes have collisions, and pointers can be reused! This means that, with a careful choice of array keys, we can make foreach believe that an element that has been removed still exists, so it will jump directly to it. An example;$array = ['EzEz' => 1, 'EzFY' => 2, 'FYEz' => 3];$ref =&& $array;foreach ($array as $value);unset($array['EzFY']);$array['FYFY'] = 4;reset($array);var_dump($value);// output: 1, 4;Here we should normally expect the output 1, 1, 3, 4 according to the previous rules. How what happens is that 'FYFY' has the same hash as the removed element 'EzFY', and the allocator happens to reuse the same memory location to store the element. So foreach ends up directly jumping to the newly inserted element, thus short-cutting the loop.;Substituting the iterated entity during the loop;One last odd case that I'd like to mention, is is that PHP allows you to substitute the iterated entity during the loop. So you can start iterating on one array and then replace it with another array halfway through. Or start iterating on an array and then replace it with an object;$arr = [1, 2, 3, 4, 5];$obj = (object) [6, 7, 8, 9, 10];$ref =&& $arr;foreach ($ref as $val);echo "$val\n;if ($val == 3);$ref = $obj;/* Output: 1 2 3 6 7 8 9 10 */;As you can see in this case PHP will just start iterating the other entity from the start once the substitution has happened.;PHP 7;Hashtable iterators;If you still remember, the main problem with array iteration was how to handle removal of elements mid-iteration. PHP 5 used a single internal array pointer (IAP) for this purpose, which was somewhat suboptimal, as one array pointer had to be stretched to support multiple simultaneous foreach loops and interaction with reset() etc. on top of that.;PHP 7 uses a different approach, namely it supports creating an arbitrary amount of external, safe hashtable iterators. These iterators have to be registered in the array, from which point on they have the same semantics as the IAP: If an array element is removed, all hashtable iterators pointing to that element will be advanced to the next element.;This means that foreach will no longer use the IAP at all. The foreach loop will be absolutely no effect on the results of current() etc. and its own behavior will never be influence by functions like reset() etc.;Array duplication;Another important change between PHP 5 and PHP 7 relates to array duplication. Now that the IAP is no longer used, by-value array iteration will only do a refcount increment (instead of duplication the array) in all cases. If the array is modified during the foreach loop, at that point a duplication will occur (according to copy-on-write) and foreach will keep working on the old array.;In most cases this change is transparent and has no other effect than better performance. However there is one occasion where it results in different behavior, namely the case where the array was a reference beforehand;$array = [1, 2, 3, 4, 5];$ref = &&$array;foreach ($array as $val);var_dump($val);$array[2] = 0;/* Old output: 1, 2, 0, 4, 5 */;/* New output: 1, 2, 3, 4, 5 */;Previously by-value iteration of reference-arrays was special cases. In this case no duplication occurred, so all modifications of the array during iteration would be reflected by the loop. In PHP 7 this special case is gone: A by-value iteration of an array will always keep working on the original elements, disregarding any modifications during the loop.;This, of course, does not apply to by-reference iteration. If you iterate by-reference all modifications will be reflected by the loop. Interestingly, the same is true for by-value iteration of plain objects;$obj = new stdClass;$obj->foo = 1;$obj->bar = 2;foreach ($obj as $val);var_dump($val);$obj->bar = 42;/* Old and new output: 1, 42 */;This reflects by-handle semantics of objects (i.e. they behave reference-like even in by-value contexts).;Examples;Lets consider a few examples, starting with your test cases;Test cases 1 and 2 retain the same output: By-value array iteration always keeps working on the original elements. (In this case even refcounting and duplication behavior is exactly the same between PHP 5 and PHP 7).;Test case 3 changes: Foreach no longer uses the IAP, so each() is not affected by the loop. It will have the same output before and after.;Test cases 4 and 5 stay the same: each() and reset() will duplicate the array before changing the IAP, while foreach still uses the original array. (Not that the IAP change would have mattered, even if the array was shared.);The second set of examples was related to the behavior of current() under different reference/refcounting configurations. This no longer makes sense, as current() is completely unaffected by the loop, so its return value always stays the same.;However, we get some interesting changes when considering modifications during iteration. I hope you will find the new behavior more sane. The first example;$array = [1, 2, 3, 4, 5];foreach ($array as &$v1);foreach ($array as &$v2);if ($v1 == 1 && $v2 == 1);unset($array[1]);echo "($v1, $v2)\n;// Old output: (1, 1) (1, 3) (1, 4) (1, 5);// New output: (1, 1) (1, 3) (1, 4) (1, 5);// (3, 1) (3, 3) (3, 4) (3, 5);// (4, 1) (4, 3) (4, 4) (4, 5);// (5, 1) (5, 3) (5, 4) (5, 5);As you can see, the outer loop no longer aborts after the first iteration. The reason is that both loops now have entirely separate hashtable iterators, and there is no longer any cross-contamination of both loops through a shared IAP.;Another weird edge case that is fixed now, is the odd effect you get when you remove and add elements that happen to have the same hash;$array = ['EzEz' => 1, 'EzFY' => 2, 'FYEz' => 3];foreach ($array as &$value);unset($array['EzFY']);$array['FYFY'] = 4;var_dump($value);// Old output: 1, 4;// New output: 1, 3, 4;Previously the HashPointer restore mechanism jumped right to the new element, because it "looked" like it's the same as the remove element (due to colliding hash and pointer). As we no longer rely on the element hash for anything, this is no longer an issue.    
CONTENT;
        $answer->question_id = 143;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        bcrypt is a hashing algorithm which is scalable with hardware (via a configurable number of rounds). Its slowness and multiple rounds ensures that an attacker must deploy massive funds and hardware to be able to crack your passwords. Add to that per-password salts (bcrypt REQUIRES salts) and you can be sure that an attack is virtually unfeasible without either ludicrous amount of funds or hardware.;bcrypt uses the Eksblowfish algorithm to hash passwords. While the encryption phase of Eksblowfish and Blowfish are exactly the same, the key schedule phase of Eksblowfish ensures that any subsequent state depends on both salt and key (user password), and no state can be precomputed without the knowledge of both. Because of this key difference, bcrypt is a one-way hashing algorithm. You cannot retrieve the plain text password without already knowing the salt, rounds and key (password). [ Source ];How to use bcrypt;Using PHP >= 5.5-DEV;Password hashing functions have now been built directly into PHP >= 5.5. You may now use password_hash() to create a bcrypt hash of any password;11);echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options)."\n;// $2y$11$6DP.V0nO7YI3iSki4qog6OQI5eiO6Jnjsqg7vdnb.JgGIsxniOn4C;To verify a user provided password against an existing hash, you may use the password_verify() as such;= 5.3.7, = 5.3.3);There is a compatibility library on GitHub created based on the source code of the above functions originally written in C, which provides the same functionality. Once the compatibility library is installed, usage is the same as above (minus the shorthand array notation if you are still on the 5.3.x branch).;Using PHP rounds = $rounds;public function hash($input);$hash = crypt($input, $this->getSalt());if(strlen($hash) > 13);return $hash;return false;public function verify($input, $existingHash);$hash = crypt($input, $existingHash);return $hash === $existingHash;private function getSalt();$salt = sprintf('$2a$%02d$', $this->rounds);$bytes = $this->getRandomBytes(16);$salt.= $this->encodeBytes($bytes);return $salt;private $randomState;private function getRandomBytes($count);$bytes = ';if(function_exists('openssl_random_pseudo_bytes');(strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN')) { // OpenSSL is slow on Windows;$bytes = openssl_random_pseudo_bytes($count);if($bytes === '' && is_readable('/dev/urandom');($hRand = @fopen('/dev/urandom', 'rb')) !== FALSE);$bytes = fread($hRand, $count);fclose($hRand);if(strlen($bytes) randomState === null);$this->randomState = microtime();if(function_exists('getmypid'));$this->randomState.= getmypid();for($i = 0, $i randomState = md5(microtime(). $this->randomState);if (PHP_VERSION >= '5');$bytes.= md5($this->randomState, true);else;$bytes.= pack('H*', md5($this->randomState));$bytes = substr($bytes, 0, $count);return $bytes;private function encodeBytes($input);// The following is code from the PHP Password Hashing Framework;$itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';$output = ';$i = 0;do;$c1 = ord($input[$i++]);$output.= $itoa64[$c1 >> 2];$c1 = ($c1 && 0x03) > 4;$output.= $itoa64[$c1];$c1 = ($c2 && 0x0f) 6;$output.= $itoa64[$c1];$output.= $itoa64[$c2 && 0x3f];while (1);return $output;You can use this code like this;$bcrypt = new Bcrypt(15);$hash = $bcrypt->hash('password');$isGood = $bcrypt->verify('password', $hash);Alternatively, you may also use the Portable PHP Hashing Framework.  
CONTENT;
        $answer->question_id = 144;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It is possible to use strrpos and strpos to check start-with and ends-with respectively;function startsWith($haystack, $needle);// search backwards starting from haystack length characters from the end;return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== false;function endsWith($haystack, $needle);// search forward starting from end minus needle length characters;return $needle === "" || (($temp = strlen($haystack) - strlen($needle)) >= 0 && strpos($haystack, $needle, $temp) !== false);Tests and results (compare with this);startsWith("abcdef", "ab") -> true;startsWith("abcdef", "cd") -> false;startsWith("abcdef", "ef") -> false;startsWith("abcdef", "") -> true;startsWith("", "abcdef") -> false;endsWith("abcdef", "ab") -> false;endsWith("abcdef", "cd") -> false;endsWith("abcdef", "ef") -> true;endsWith("abcdef", "") -> true;endsWith("", "abcdef") -> false;Note: the strncmp and substr_compare functions will outperform this function.    
CONTENT;
        $answer->question_id = 145;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        characters after it will be written out as page content;still.;It's commonly advised, in particular to newcomers, that trailing?> PHP;close tags should be omitted. This eschews a small portion of these cases.;(Quite commonly include()d scripts are the culprit.);Error source mentioned as "Unknown on line 0";It's typically a PHP extension or php.ini setting if no error source;is concretized.;It's occasionally the gzip stream encoding setting;or the ob_gzhandler.;But it could also be any doubly loaded extension= module;generating an implicit PHP startup/warning message.;Preceding error messages;If another PHP statement or expression causes a warning message or;notice being printeded out, that also counts as premature output.;In this case you need to eschew the error;delay the statement execution, or suppress the message with e.g.;isset() or @() -;when either doesn't obstruct debugging later on.;No error message;If you have error_reporting or display_errors disabled per php.ini;then no warning will show up. But ignoring errors won't make the problem go;away. Headers still can't be sent after premature output.;So when header("Location:...") redirects silently fail it's very;advisable to probe for warnings. Reenable them with two simple commands;atop the invocation script;error_reporting(E_ALL);ini_set("display_errors", 1);Or set_error_handler("var_dump"), if all else fails.;Speaking of redirect headers, you should often use an idiom like;this for final code paths;exit(header("Location: /finished.html"));Preferrably even a utility function, which prints a user message;in case of header() failures.;Output buffering as workaround;PHPs output buffering;is a workaround to alleviate this issue. It often works reliably, but shouldn't;substitute for proper application structuring and separating output from control;logic. Its actual purpose is minimizing chunked transfers to the webserver.;The output_buffering=;setting nevertheless can help.;Configure it in the php.ini;or via.htaccess;or even.user.ini on;modern FPM/FastCGI setups.;Enabling it will allow PHP to buffer output instead of passing it to the webserver;instantly. PHP thus can aggregate HTTP headers.;It can likewise be engaged with a call to ob_start();atop the invocation script. Which however is less reliable for multiple reasons;Even if starts the first script, whitespace or a;BOM might get shuffled before, rendering it ineffective.;It can conceal whitespace for HTML output. But as soon as the application;logic attempts to send binary content (a generated image for example);the buffered extraneous output becomes a problem. (Necessitating ob_clean();as furher workaround.);The buffer is limited in size, and can easily overrun when left to defaults.;And that's not a rare occurence either, difficult to track down;when it happens.;Both approaches therefore may become unreliable - in particular when switching between;development setups and/or production servers. Which is why output buffering is;widely considered just a crutch / strictly a workaround.;See also the basic usage example;in the manual, and for more pros and cons;What is output buffering?;Why use output buffering in PHP?;Is using output buffering considered a bad practice?;Use case for output buffering as the correct solution to "headers already sent;But it worked on the other server!?;If you didn't get the headers warning before, then the output buffering;php.ini setting;has changed. It's likely unconfigured on the current/new server.;Checking with headers_sent();You can always use headers_sent() to probe if;it's still possible to... send headers. Which is useful to conditionally print;an info or apply other fallback logic.;if (headers_sent());die("Redirect failed. Please click on this link: ");else;exit(header("Location: /user.php"));Useful fallback workarounds are;HTML tag;If your application is structurally hard to fix, then an easy (but;somewhat unprofessional) way to allow redirects is injecting a HTML;tag. A redirect can be achieved with;Or with a short delay;This leads to non-valid HTML when utilized past the section.;Most browsers still accept it.;JavaScript redirect;As alternative a JavaScript redirect;can be used for page redirects;While this is often more HTML compliant than the workaround;it incurs a reliance on JavaScript-capable clients.;Both approaches however make acceptable fallbacks when genuine HTTP header();calls fail. Ideally you'd always combine this with a user-friendly message and;clickable link as last resort. (Which for instance is what the http_redirect();PECL extension does.);Why setcookie() and session_start() are also affected;Both setcookie() and session_start() need to send a Set-Cookie: HTTP header.;The same conditions therefore apply, and similar error messages will be generated;for premature output situations.;(Of course they're furthermore affected by disabled cookies in the browser;or even proxy issues. The session functionality obviously also depends on free;disk space and other php.ini settings, etc.);Further links;Google provides a lengthy list of similar discussions.;And of course many specific cases have been covered on Stack Overflow as well.;The Wordpress FAQ explains How do I solve the Headers already sent warning problem? in a generic manner.;Adobe Community: PHP development: why redirects don't work (headers already sent);Nucleus FAQ: What does "page headers already sent" mean?;One of the more thorough explanations is HTTP Headers and the PHP header() Function - A tutorial by NicholasSolutions (Internet Archive link).;It covers HTTP in detail and gives a few guidelines for rewriting scripts.;share 146
        140 DISCLAIMER: This answer was written in 2008.;Since then, PHP has given us password_hash and password_verify and, since their introduction, they are the recommended password hashing & checking method.;The theory of the answer is still a good read though.;TL,DR;Don'ts;Don't limit what characters users can enter for passwords. Only idiots do this.;Don't limit the length of a password. If your users want a sentence with supercalifragilisticexpialidocious in it, don't prevent them from using it.;Never store your user's password in plain-text.;Never email a password to your user except when they have lost theirs, and you sent a temporary one.;Never, ever log passwords in any manner.;Never hash passwords with SHA1 or MD5 or even SHA256! Modern crackers can exceed 60 and 180 billion hashes/second (respectively).;Don't mix bcrypt and with the raw output of hash(), either use hex output or base64_encode it. (This applies to any input that may have a rogue \0 in it, which can seriously weaken security.);Dos;Use scrypt when you can, bcrypt if you cannot.;Use PBKDF2 if you cannot use either bcrypt or scrypt, with SHA2 hashes.;Reset everyone's passwords when the database is compromised.;Implement a reasonable 8-10 character minimum length, plus require at least 1 upper case letter, 1 lower case letter, a number, and a symbol. This will improve the entropy of the password, in turn making it harder to crack. (See the "What makes a good password?" section for some debate.);Why hash passwords anyway?;The objective behind hashing passwords is simple: preventing malicious access to user accounts by compromising the database. So the goal of password hashing is to deter a hacker or cracker by costing them too much time or money to calculate the plain-text passwords. And time/cost are the best deterrents in your arsenal.;Another reason that you want a good, robust hash on a user accounts is to give you enough time to change all the passwords in the system. If your database is compromised you will need enough time to at least lock the system down, if not change every password in the database.;Jeremiah Grossman, CTO of Whitehat Security, stated on his blog after a recent password recovery that required brute-force breaking of his password protection;Interestingly, in living out this nightmare, I learned A LOT I didn’t know about password cracking, storage, and complexity. I’ve come to appreciate why password storage is ever so much more important than password complexity. If you don’t know how your password is stored, then all you really can depend upon is complexity. This might be common knowledge to password and crypto pros, but for the average InfoSec or Web Security expert, I highly doubt it.;(Emphasis mine.);What makes a good password anyway?;Entropy. (Not that I fully subscribe to Randall's viewpoint.);In short, entropy is how much variation is within the password. When a password is only lowercase roman letters, that's only 26 characters. That isn't much variation. Alpha-numeric passwords are better, with 36 characters. But allowing upper and lower case, with symbols, is roughly 96 characters. That's a lot better than just letters. One problem is, to make our passwords memorable we insert patterns—which reduces entropy. Oops!;Password entropy is approximated easily. Using the full range of ascii characters (roughly 96 typeable characters) yields an entropy of 6.6 per character, which at 8 characters for a password is still too low (52.679 bits of entropy) for future security. But the good news is: longer passwords, and passwords with unicode characters, really increase the entropy of a password and make it harder to crack.;There's a longer discussion of password entropy on the Crypto StackExchange site. A good Google search will also turn up a lot of results.;In the comments I talked with @popnoodles, who pointed out that enforcing a password policy of X length with X many letters, numbers, symbols, etc, can actually reduce entropy by making the password scheme more predictable. I do agree. Randomess, as truly random as possible, is always the safest but least memorable solution.;So far as I've been able to tell, making the world's best password is a Catch-22. Either its not memorable, too predictable, too short, too many unicode characters (hard to type on a Windows/Mobile device), too long, etc. No password is truly good enough for our purposes, so we must protect them as though they were in Fort Knox.;Best practices;Bcrypt and scrypt are the current best practices. Scrypt will be better than bcrypt in time, but it hasn't seen adoption as a standard by Linux/Unix or by webservers, and hasn't had in-depth reviews of its algorithm posted yet. But still, the future of the algorithm does look promising. If you are working with Ruby there is an scrypt gem that will help you out, and Node.js now has its own scrypt package. You can use Scrypt in PHP either via the Scrypt extension or the Libsodium extension (both are available in PECL).;I highly suggest reading the documentation for the crypt function if you want to understand how to use bcrypt, or finding yourself a good wrapper or use something like PHPASS for a more legacy implementation. I recommend a minimum of 12 rounds of bcrypt, if not 15 to 18.;I changed my mind about using bcrypt when I learned that bcrypt only uses blowfish's key schedule, with a variable cost mechanism. The latter lets you increase the cost to brute-force a password by increasing blowfish's already expensive key schedule.;Average practices;I almost can't imagine this situation anymore. PHPASS supports PHP 3.0.18 through 5.3, so it is usable on almost every installation imaginable—and should be used if you don't know for certain that your environment supports bcrypt.;But suppose that you cannot use bcrypt or PHPASS at all. What then?;Try an implementation of PDKBF2 with the maximum number of rounds that your environment/application/user-perception can tolerate. The lowest number I'd recommend is 2500 rounds. Also, make sure to use hash_hmac() if it is available to make the operation harder to reproduce.;Future Practices;Coming in PHP 5.5 is a full password protection library that abstracts away any pains of working with bcrypt. While most of us are stuck with PHP 5.2 and 5.3 in most common environments, especially shared hosts, @ircmaxell has built a compatibility layer for the coming API that is backward compatible to PHP 5.3.7.;Cryptography Recap & Disclaimer;The computational power required to actually crack a hashed password doesn't exist. The only way for computers to "crack" a password is to recreate it and simulate the hashing algorithm used to secure it. The speed of the hash is linearly related to its ability to be brute-forced. Worse still, most hash algorithms can be easily parallelized to perform even faster. This is why costly schemes like bcrypt and scrypt are so important.;You cannot possibly foresee all threats or avenues of attack, and so you must make your best effort to protect your users up front. If you do not, then you might even miss the fact that you were attacked until it's too late... and you're liable. To avoid that situation, act paranoid to begin with. Attack your own software (internally) and attempt to steal user credentials, or modify other user's accounts or access their data. If you don't test the security of your system, then you cannot blame anyone but yourself.;Lastly: I am not a cryptographer. Whatever I've said is my opinion, but I happen to think it's based on good ol' common sense... and lots of reading. Remember, be as paranoid as possible, make things as hard to intrude as possible, and then, if you are still worried, contact a white-hat hacker or cryptographer to see what they say about your code/system.    
CONTENT;
        $answer->question_id = 147;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Depending upon use case, I would normally use something simple like the following;abstract class DaysOfWeek;const Sunday = 0;const Monday = 1;// etc.;$today = DaysOfWeek::Sunday;However, other use cases may require more validation of constants and values. Based on the comments below about reflection, and a few other notes, here's an expanded example which may better serve a much wider range of cases;abstract class BasicEnum;private static $constCacheArray = NULL;private static function getConstants();if (self::$constCacheArray == NULL);self::$constCacheArray = [];$calledClass = get_called_class();if (!array_key_exists($calledClass, self::$constCacheArray));$reflect = new ReflectionClass($calledClass);self::$constCacheArray[$calledClass] = $reflect->getConstants();return self::$constCacheArray[$calledClass];public static function isValidName($name, $strict = false);$constants = self::getConstants();if ($strict);return array_key_exists($name, $constants);$keys = array_map('strtolower', array_keys($constants));return in_array(strtolower($name), $keys);public static function isValidValue($value, $strict = true);$values = array_values(self::getConstants());return in_array($value, $values, $strict);By creating a simple enum class that extends BasicEnum, you now have the ability to use methods thusly for simple input validation;abstract class DaysOfWeek extends BasicEnum;const Sunday = 0;const Monday = 1;const Tuesday = 2;const Wednesday = 3;const Thursday = 4;const Friday = 5;const Saturday = 6;DaysOfWeek::isValidName('Humpday'), // false;DaysOfWeek::isValidName('Monday'), // true;DaysOfWeek::isValidName('monday'), // true;DaysOfWeek::isValidName('monday', $strict = true), // false;DaysOfWeek::isValidName(0), // false;DaysOfWeek::isValidValue(0), // true;DaysOfWeek::isValidValue(5), // true;DaysOfWeek::isValidValue(7), // false;DaysOfWeek::isValidValue('Friday'), // false;As a side note, any time I use reflection at least once on a static/const class where the data won't change (such as in an enum), I cache the results of those reflection calls, since using fresh reflection objects each time will eventually have a noticeable performance impact (Stored in an assocciative array for multiple enums).;Now that most people have finally upgraded to at least 5.3, and SplEnum is available, that is certainly a viable option as well--as long as you don't mind the traditionally unintuitive notion of having actual enum instantiations throughout your codebase. In the above example, BasicEnum and DaysOfWeek cannot be instantiated at all, nor should they be.  
CONTENT;
        $answer->question_id = 148;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It's a common misconception that user input can be filtered. PHP even has a (now deprecated) "feature", called magic-quotes, that builds on this idea. It's nonsense. Forget about filtering (Or cleaning, or whatever people call it).;What you should do, to avoid problems is quite simple: Whenever you embed a string within foreign code, you must escape it, according to the rules of that language. For example, if you embed a string in some SQL targeting MySql, you must escape the string with MySql's function for this purpose (mysqli_real_escape_string).;Another example is HTML: If you embed strings within HTML markup, you must escape it with htmlspecialchars. This means that every single echo or print statement should use htmlspecialchars.;A third example could be shell commands: If you are going to embed strings (Such as arguments) to external commands, and call them with exec, then you must use escapeshellcmd and escapeshellarg.;And so on and so forth...;The only case where you need to actively filter data, is if you're accepting preformatted input. Eg. if you let your users post HTML markup, that you plan to display on the site. However, you should be wise to avoid this at all cost, since no matter how well you filter it, it will always be a potential security hole.   
CONTENT;
        $answer->question_id = 149;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        stdClass is PHP's generic empty class, kind of like Object in Java or object in Python (Edit: but not actually used as universal base class, thanks @Ciaran for pointing this out).;It is useful for anonymous objects, dynamic properties, etc.;See Dynamic Properties in PHP and StdClass for example.    
CONTENT;
        $answer->question_id = 150;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You should implement a session timeout of your own. Both options mentioned by others (session.gc_maxlifetime and session.cookie_lifetime) are not reliable. I'll explain the reasons for that.;First;session.gc_maxlifetime;session.gc_maxlifetime specifies the number of seconds after which data will be seen as 'garbage' and cleaned up. Garbage collection occurs during session start.;But the garbage collector is only started with a probability of session.gc_probability divided by session.gc_divisor. And using the default values for those options (1 and 100 respectively), the chance is only at 1%.;Well, you could simply adjust these values so that the garbage collector is started more often. But when the garbage collector is started, it will check the validity for every registered session. And that is cost-intensive.;Furthermore, when using PHP's default session.save_handler files, the session data is stored in files in a path specified in session.save_path. With that session handler, the age of the session data is calculated on the file's last modification date and not the last access date;Note: If you are using the default file-based session handler, your filesystem must keep track of access times (atime). Windows FAT does not so you will have to come up with another way to handle garbage collecting your session if you are stuck with a FAT filesystem or any other filesystem where atime tracking is not available. Since PHP 4.2.3 it has used mtime (modified date) instead of atime. So, you won't have problems with filesystems where atime tracking is not available.;So it additionally might occur that a session data file is deleted while the session itself is still considered as valid because the session data was not updated recently.;And second;session.cookie_lifetime;session.cookie_lifetime specifies the lifetime of the cookie in seconds which is sent to the browser. […];Yes, that's right. This only affects the cookie lifetime and the session itself may still be valid. But it's the server's task to invalidate a session, not the client. So this doesn't help anything. In fact, having session.cookie_lifetime set to 0 would make the session’s cookie a real session cookie that is only valid until the browser is closed.;Conclusion / best solution;The best solution is to implement a session timeout of your own. Use a simple time stamp that denotes the time of the last activity (i.e. request) and update it with every request;if (isset($_SESSION['LAST_ACTIVITY']) && (time() - $_SESSION['LAST_ACTIVITY'] > 1800));// last request was more than 30 minutes ago;session_unset(), // unset $_SESSION variable for the run-time;session_destroy(), // destroy session data in storage;$_SESSION['LAST_ACTIVITY'] = time(), // update last activity time stamp;Updating the session data with every request also changes the session file's modification date so that the session is not removed by the garbage collector prematurely.;You can also use an additional time stamp to regenerate the session ID periodically to avoid attacks on sessions like session fixation;if (!isset($_SESSION['CREATED']));$_SESSION['CREATED'] = time();else if (time() - $_SESSION['CREATED'] > 1800);// session started more than 30 minutes ago;session_regenerate_id(true), // change session ID for the current session and invalidate old session ID;$_SESSION['CREATED'] = time(), // update creation time;Notes;session.gc_maxlifetime should be at least equal to the lifetime of this custom expiration handler (1800 in this example);if you want to expire the session after 30 minutes of activity instead of after 30 minutes since start, you'll also need to use setcookie with an expire of time()+60*30 to keep the session cookie active.   
CONTENT;
        $answer->question_id = 151;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It's simpler than I initially thought.. Basically you have a page that does nothing, until the data you want to send is available (say, a new message arrives).;Here is a really basic example, which sends a simple string after 2-10 seconds. 1 in 3 chance of returning an error 404 (to show error handling in the coming Javascript example);msgsrv.php;Note: With a real site, running this on a regular web-server like Apache will quickly tie up all the "worker threads" and leave it unable to respond to other requests.. There are ways around this, but it is recommended to write a "long-poll server" in something like Python's twisted, which does not rely on one thread per request. cometD is an popular one (which is available in several languages), and Tornado is a new framework made specifically for such tasks (it was built for FriendFeed's long-polling code)... but as a simple example, Apache is more than adequate! This script could easily be written in any language (I chose Apache/PHP as they are very common, and I happened to be running them locally);Then, in Javascript, you request the above file (msg_srv.php), and wait for a response. When you get one, you act upon the data. Then you request the file and wait again, act upon the data (and repeat);What follows is an example of such a page.. When the page is loaded, it sends the initial request for the msgsrv.php file.. If it succeeds, we append the message to the #messages div, then after 1 second we call the waitForMsg function again, which triggers the wait.;The 1 second setTimeout() is a really basic rate-limiter, it works fine without this, but if msgsrv.php always returns instantly (with a syntax error, for example) - you flood the browser and it can quickly freeze up. This would better be done checking if the file contains a valid JSON response, and/or keeping a running total of requests-per-minute/second, and pausing appropriately.;If the page errors, it appends the error to the #messages div, waits 15 seconds and then tries again (identical to how we wait 1 second after each message);The nice thing about this approach is it is very resilient. If the clients internet connection dies, it will timeout, then try and reconnect - this is inherent in how long polling works, no complicated error-handling is required;Anyway, the long_poller.htm code, using the jQuery framework;BargePoller;BargePoll message requester! 
CONTENT;
        $answer->question_id = 152;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Whatever you do, make sure not to trust data sent from the client. $_SERVER['REMOTE_ADDR'] contains the real IP address of the connecting party. That is the most reliable value you can find.;However, they can be behind a proxy server in which case the proxy may have set the $_SERVER['HTTP_X_FORWARDED_FOR'], but this value is easily spoofed. For example, it can be set by someone without a proxy, or the IP can be an internal IP from the LAN behind the proxy.;This means that if you are going to save the $_SERVER['HTTP_X_FORWARDED_FOR'], make sure you also save the $_SERVER['REMOTE_ADDR'] value. E.g. by saving both values in different fields in your database.;If you are going to save the IP to a database as a string, make sure you have space for at least 45 characters. IPv6 is here to stay and those addresses are larger than the older IPv4 addresses.;(Note that IPv6 usually uses 39 characters at most but there is also a special IPv6 notation for IPv4 addresses which in its full form can be up to 45 characters. So if you know what you are doing you can use 39 characters, but if you just want to set and forget it, use 45).  
CONTENT;
        $answer->question_id = 153;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Warning: Cannot modify header information - headers already sent;Happens when your script tries to send a HTTP header to the client but there already was output before, which resulted in headers to be already sent to the client.;This is an E_WARNING and it will not stop the script.;A typical example would be a template file like this;My Page...;The session_start() function will try to send headers with the session cookie to the client. But PHP already sent headers when it wrote the element to the output stream. You'd have to move the session_start() to the top.;You can solve this by going through the lines before the code triggering the Warning and check where it outputs. Move any header sending code before that code.;An often overlooked output is new lines after PHP's closing?>. It is considered a standard practice to omit?> when it is the last thing in the file. Likewise, another common cause for this warning is when the opening <?php has an empty space, line, or invisible character before it, causing the webserver to send the headers and the whitespace/newline thus when PHP starts parsing won't be able to submit any header.;If your file has more than one code block in it, you should not have any spaces in between them. (Note: You might have multiple blocks if you had code that was automatically constructed);Also make sure you don't have any Byte Order Marks in your code, for example when the encoding of the script is UTF-8 with BOM.;Related Questions;Headers already sent by PHP;All PHP "Headers already sent" Questions on Stackoverflow;Byte Order Mark;What PHP Functions Create Output?   
CONTENT;
        $answer->question_id = 154;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        In the examples below the client is the browser and the server is the webserver hosting the website.;Before you can understand these technologies, you have to understand classic HTTP web traffic first.;Regular HTTP;A client requests a webpage from a server.;The server calculates the response;The server sends the response to the client.;Ajax Polling;A client requests a webpage from a server using regular HTTP (see HTTP above).;The requested webpage executes JavaScript which requests a file from the server at regular intervals (e.g. 0.5 seconds).;The server calculates each response and sends it back, just like normal HTTP traffic.;Ajax Long-Polling;A client requests a webpage from a server using regular HTTP (see HTTP above).;The requested webpage executes JavaScript which requests a file from the server.;The server does not immediately respond with the requested information but waits until there's new information available.;When there's new information available, the server responds with the new information.;The client receives the new information and immediately sends another request to the server, re-starting the process.;HTML5 Server Sent Events (SSE) / EventSource;A client requests a webpage from a server using regular HTTP (see HTTP above).;The requested webpage executes javascript which opens a connection to the server.;The server sends an event to the client when there's new information available.;Real-time traffic from server to client, mostly that's what you'll need;You'll want to use a server that has an event loop;Not possible to connect with a server from another domain;If you want to read more, I found these very useful: (article), (article), (article), (tutorial).;HTML5 Websockets;A client requests a webpage from a server using regular http (see HTTP above).;The requested webpage executes JavaScript which opens a connection with the server.;The server and the client can now send each other messages when new data (on either side) is available.;Real-time traffic from the server to the client and from the client to the server;You'll want to use a server that has an event loop;With WebSockets it is possible to connect with a server from another domain.;It is also possible to use a third party hosted websocket server, for example Pusher or others. This way you'll only have to implement the client side, which is very easy!;If you want to read more, I found these very useful: (article), (article) (tutorial).;Comet;Comet is a collection of techniques prior to HTML5 which use streaming and long-polling to achieve real time applications. Read more on wikipedia or this article.;Now, which one of them should I use for a realtime app (that I need to;code). I have been hearing a lot about websockets (with socket.io [a;node.js library]) but why not PHP?;You can use PHP with WebSockets, check out Ratchet.   
CONTENT;
        $answer->question_id = 155;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Data Storage;Specify the utf8mb4 character set on all tables and text columns in your database. This makes MySQL physically store and retrieve values encoded natively in UTF-8. Note that MySQL will implicitly use utf8mb4 encoding if a utf8mb4_* collation is specified (without any explicit character set).;In older versions of MySQL (set_charset('utf8mb4'), // object oriented style;mysqli_set_charset($link, 'utf8mb4'), // procedural style;If you're stuck with plain mysql but happen to be running PHP ≥ 5.2.3, you can call mysql_set_charset.;If the driver does not provide its own mechanism for setting the connection character set, you may have to issue a query to tell MySQL how your application expects data on the connection to be encoded: SET NAMES 'utf8mb4'.;The same consideration regarding utf8mb4 / utf8 applies as above.;Output;If your application transmits text to other systems, they will also need to be informed of the character encoding. With web applications, the browser must be informed of the encoding in which data is sent (through HTTP response headers or HTML metadata).;In PHP, you can use the default_charset php.ini option, or manually issue the Content-Type MIME header yourself, which is just more work but has the same effect.;Input;Unfortunately, you should verify every received string as being valid UTF-8 before you try to store it or use it anywhere. PHP's mb_check_encoding() does the trick, but you have to use it religiously. There's really no way around this, as malicious clients can submit data in whatever encoding they want, and I haven't found a trick to get PHP to do this for you reliably.;From my reading of the current HTML spec, the following sub-bullets are not necessary or even valid anymore for modern HTML. My understanding is that browsers will work with and submit data in the character set specified for the document. However, if you're targeting older versions of HTML (XHTML, HTML4, etc.), these points may still be useful;For HTML before HTML5 only: you want all data sent to you by browsers to be in UTF-8. Unfortunately, if you go by the the only way to reliably do this is add the accept-charset attribute to all your tags:.;For HTML before HTML5 only: note that the W3C HTML spec says that clients "should" default to sending forms back to the server in whatever charset the server served, but this is apparently only a recommendation, hence the need for being explicit on every single tag.;Other Code Considerations;Obviously enough, all files you'll be serving (PHP, HTML, JavaScript, etc.) should be encoded in valid UTF-8.;You need to make sure that every time you process a UTF-8 string, you do so safely. This is, unfortunately, the hard part. You'll probably want to make extensive use of PHP's mbstring extension.;PHP's built-in string operations are not by default UTF-8 safe. There are some things you can safely do with normal PHP string operations (like concatenation), but for most things you should use the equivalent mbstring function.;To know what you're doing (read: not mess it up), you really need to know UTF-8 and how it works on the lowest possible level. Check out any of the links from utf8.com for some good resources to learn everything you need to know.    
CONTENT;
        $answer->question_id = 156;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        There are require and include_once as well.;So your question should be...;When should I use require vs. include?;When should I use require_once vs. require;The answer to 1 is described here.;The require() function is identical to include(), except that it handles errors differently. If an error occurs, the include() function generates a warning, but the script will continue execution. The require() generates a fatal error, and the script will stop.;The answer to 2 can be found here.;The require_once() statement is identical to require() except PHP will check if the file has already been included, and if so, not include (require) it again.  
CONTENT;
        $answer->question_id = 157;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Try a usort: If you are still on PHP 5.2 or earlier, you'll have to define a sorting function first;function sortByOrder($a, $b);return $a['order'] - $b['order'];usort($myArray, 'sortByOrder');Starting in PHP 5.3, you can use an anonymous function;usort($myArray, function($a, $b);return $a['order'] - $b['order'];And finally with PHP 7 you can use the "spaceship operator;usort($myArray, function($a, $b);return $a['order'] $b['order']    
CONTENT;
        $answer->question_id = 158;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        A query may fail for various reasons in which case both the mysql_* and the mysqli extension will return false from their respective query functions/methods. You need to test for that error condition and handle it accordingly.;mysql_* extension;NOTE The mysql_ functions are deprecated and have been removed in php version 7.;Check $result before passing it to mysql_fetch_array. You'll find that it's false because the query failed. See the mysql_query documentation for possible return values and suggestions for how to deal with them.;$username = mysql_real_escape_string($_POST['username']);$password = $_POST['password'];$result = mysql_query("SELECT * FROM Users WHERE UserName LIKE '$username'");if($result === FALSE);die(mysql_error()), // TODO: better error handling;while($row = mysql_fetch_array($result));echo $row['FirstName'];mysqli extension;procedural style;$username = mysqli_real_escape_string($mysqli, $_POST['username']);$result = mysqli_query($mysqli, "SELECT * FROM Users WHERE UserName LIKE '$username'");// mysqli_query returns false if something went wrong with the query;if($result === FALSE);yourErrorHandler(mysqli_error($mysqli));else;// as of php 5.4 mysqli_result implements Traversable, so you can use it with foreach;foreach($result as $row) {...;oo-style;$username = $mysqli->escape_string($_POST['username']);$result = $mysqli->query("SELECT * FROM Users WHERE UserName LIKE '$username'");if($result === FALSE);yourErrorHandler($mysqli->error), // or $mysqli->error_list;else;// as of php 5.4 mysqli_result implements Traversable, so you can use it with foreach;foreach($result as $row) {...;using a prepared statement;$stmt = $mysqli->prepare('SELECT * FROM Users WHERE UserName LIKE?');if (!$stmt);yourErrorHandler($mysqli->error), // or $mysqli->error_list;else if (!$stmt->bind_param('s', $_POST['username']));yourErrorHandler($stmt->error), // or $stmt->error_list;else if (!$stmt->execute());yourErrorHandler($stmt->error), // or $stmt->error_list;else;$result = $stmt->get_result();// as of php 5.4 mysqli_result implements Traversable, so you can use it with foreach;foreach($result as $row) {...;These examples only illustrate what should be done (error handling), not how to do it. Production code shouldn't use or die when outputting HTML, else it will (at the very least) generate invalid HTML. Also, database error messages shouldn't be displayed to non-admin users, as it discloses too much information.    
CONTENT;
        $answer->question_id = 159;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        By using;$_SERVER['REQUEST_METHOD'];For more details please see the documentation for the $_SERVER variable.    
CONTENT;
        $answer->question_id = 160;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Have a look at $_SERVER['REQUEST_URI'], i.e.;$actual_link = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI];(Note that the double quoted string syntax is perfectly correct);Editor's note: using this code has security implications. The client can set HTTP_HOST and REQUEST_URI to any arbitrary value it wants.   
CONTENT;
        $answer->question_id = 161;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        This always works for me;ini_set('display_errors', 1);ini_set('display_startup_errors', 1);error_reporting(E_ALL);However, this doesn't make PHP to show parse errors - the only way to show those errors is to modify your php.ini with this line;display_errors = on  
CONTENT;
        $answer->question_id = 162;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        array_shift(array_values($array));Edited with suggestions from comments for other use cases etc...;If modifying (in the sense of resetting array pointers) of $array is not a problem, you might use;reset($array);This should be theoretically more efficient, if a array "copy" is needed;array_shift(array_slice($array, 0, 1));With PHP 5.4+;array_values($array)[0];A note from an anonymous user (unverified);If you only want to go through the array in totality, prefer the use of array_pop(), because array_shift has O(n) complexity, whereas array_pop has O(1).   
CONTENT;
        $answer->question_id = 163;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You use;public scope to make that variable/function available from anywhere, other classes and instances of the object.;private scope when you want your variable/function to be visible in its own class only.;protected scope when you want to make your variable/function visible in all classes that extend current class including the parent class.;More: (For comprehensive information);http://php.net/manual/en/language.oop5.visibility.php   
CONTENT;
        $answer->question_id = 164;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Summary of existing answers plus my own two cents;1. Basic answer;You can use the header() function to send a new HTTP header, but this must be sent to the browser before any HTML or text (so before the <!DOCTYPE...> declaration, for example).;header('Location: '.$newURL);2. Important details;die() or exit();header("Location: http://example.com/myOtherPage.php");die();Why you should use die() or exit(): The Daily WTF;Absolute URL;The URL must be an absolute. See RFC 2616. But in most cases a relative URL will be accepted too.;Status Codes;PHP's "Location"-header still uses the HTTP 302 -redirect code, but this is not the one you should use. You should consider either 301 (permanent redirect) or 303 (other).;Note: W3C mentions that the 303-header is incompatible with "many pre-HTTP/1.1 user agents. Currently used browsers are all HTTP/1.1 user agents. This is not true for many other user agents like spiders and robots.;3. Documentation;HTTP Headers and the header() function in PHP;What the PHP manual says;What Wikipedia says;What the W3C says;4. Alternatives;You may use the alternative method of http_redirect($url), which needs the PECL package pecl to be installed.;5. Helper Functions;This function doesn't incorporate the 303 status code;function Redirect($url, $permanent = false);header('Location: '. $url, true, $permanent? 301: 302);exit();Redirect('http://example.com/', false);This is more flexible;function redirect($url, $statusCode = 303);header('Location: '. $url, true, $statusCode);die();6. Workaround;As mentioned header() redirects only work before anything is written out. They usually fail if invoked inmidst HTML output. Then you might use a HTML header workaround (not very professional!) like;Or a Javascript redirect even.;window.location.replace("http://example.com/")   
CONTENT;
        $answer->question_id = 165;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Needed background on Concurrency approaches;Different web servers implement different techniques for handling incoming HTTP requests in parallel. A pretty popular technique is using Threads -- that is, the web server will create/dedicate a single thread for each incoming request. The Apache HTTP web server supports multiple models for handling requests, one of which (called the Worker MPM) uses Threads. But it supports another concurrency model called the Prefork MPM which uses Processes -- that is, the web server will create/dedicate a single process for each request.;There are also other completely different concurrency models (using Asynchronous sockets/IO), as well as ones that mix two or even three models together. For the purpose of answering this question, we are only concerned with the two models above, and taking Apache HTTP server as an example.;Needed background on how PHP "integrates" with web servers;PHP itself does not respond to the actual HTTP requests -- this is the job of the web server. So what we do, is configure the web server to forward requests to PHP for processing, then receive the result and send it back to the user. There are multiple ways to chain the web server with PHP. For Apache HTTP Server, the most popular is "mod_php". This module is actually PHP itself but compiled as a module for the web server, and so it gets loaded right inside it.;There are other methods for chaining PHP with Apache and other web servers, but mod_php is the most popular one and will also serve for answering your question.;You may not have needed to understand these details before, because hosting companies and GNU/Linux distros come with everything prepared for us.;Now, onto your question!;Since with mod_php, PHP gets loaded right into Apache, if Apache is going to handle concurrency using its Worker MPM (that is, using Threads) then PHP must be able to operate within this same multi-threaded environment -- meaning, PHP has to be thread-safe to be able to play ball correctly with Apache!;At this point, you should be thinking "Ok, so if I'm using a multi-threaded web server and I'm going to embed PHP right into it, then I must use the thread-safe version of PHP". And this would be correct thinking. However, as it happens, PHP's thread-safety is highly disputed. It's a use-if-you-really-really-know-what-you-are-doing ground.;Final notes;In case you are wondering, my personal advice would be to not use PHP in a multi-threaded environment if you have the choice!;Speaking only of UNIX-based environments, I'd say that fortunately, you only have to think of this if you are going to use PHP with Apache web server, in which case you are advised to go with the Prefork MPM of Apache (which doesn't use threads, and therefore, PHP thread-safety doesn't matter) and all GNU/Linux distros that I know of will take that decision for you when you are installing Apache + PHP through their package system, without even prompting you for a choice. If you are going to use other webservers such as nginx or lighttpd, you won't have the option to embed PHP into them anyway. You will be looking at using FastCGI or something equal which works in a different model where PHP is totally outside of the web server with multiple PHP processes used for answering requests through e.g. FastCGI. For such cases, thread-safety also doesn't matter. To see which version your website is using put a file containing on your site and look for the Server API entry. This could say something like CGI/FastCGI or Apache 2.0 Handler.;If you also look at the Command Line version of PHP -- thread safety does not matter.;Finally, if thread-safety doesn't matter so which version should you use -- the thread-safe or the non-thread-safe? Frankly, I don't have a scientific answer! But I'd guess that the non-thread-safe version is faster and/or less buggy, or otherwise they would have just offered the thread-safe version and not bothered to give us the choice! 
CONTENT;
        $answer->question_id = 166;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The main difference is sorting accuracy (when comparing characters in the language) and performance. The only special one is utf8_bin which is for comparing characters in binary format.;utf8_general_ci is somewhat faster than utf8_unicode_ci, but less accurate (for sorting). The specific language utf8 encoding (such as utf8_swedish_ci) contain additional language rules that make them the most accurate to sort for those languages. Most of the time I use utf8_unicode_ci (I prefer accuracy to small performance improvements), unless I have a good reason to prefer a specific language.;You can read more on specific unicode character sets on the MySQL manual - http://dev.mysql.com/doc/refman/5.0/en/charset-unicode-sets.html  
CONTENT;
        $answer->question_id = 167;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        For PHP < 5.3 otherwise see jurka's answer below;You can use strtotime() to convert two dates to unix time and then calculate the number of seconds between them. From this it's rather easy to calculate different time periods.;$date1 = "2007-03-24";$date2 = "2009-06-26";$diff = abs(strtotime($date2) - strtotime($date1));$years = floor($diff / (365*60*60*24));$months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));$days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));printf("%d years, %d months, %d days\n", $years, $months, $days);Edit: Obviously the preferred way of doing this is like described by jurka below. My code is generally only recommended if you don't have PHP 5.3 or better.;Several people in the comments have pointed out that the code above is only an approximation. I still believe that for most purposes that's fine, since the usage of a range is more to provide a sense of how much time has passed or remains rather than to provide precision - if you want to do that, just output the date.;Despite all that, I've decided to address the complaints. If you truly need an exact range but haven't got access to PHP 5.3, use the code below (it should work in PHP 4 as well). This is a direct port of the code that PHP uses internally to calculate ranges, with the exception that it doesn't take daylight savings time into account. That means that it's off by an hour at most, but except for that it should be correct.;<?php;/**;* Calculate differences between two dates with precise semantics. Based on PHPs DateTime::diff();* implementation by Derick Rethans. Ported to PHP by Emil H, 2011-05-02. No rights reserved.;*;* See here for original code;* http://svn.php.net/viewvc/php/php-src/trunk/ext/date/lib/tm2unixtime.c?revision=302890&view=markup;* http://svn.php.net/viewvc/php/php-src/trunk/ext/date/lib/interval.c?revision=298973&view=markup;*/;function _date_range_limit($start, $end, $adj, $a, $b, $result);if ($result[$a] = $end);$result[$b] += intval($result[$a] / $adj);$result[$a] -= $adj * intval($result[$a] / $adj);return $result;function _date_range_limit_days($base, $result);$days_in_month_leap = array(31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);$days_in_month = array(31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);date_range_limit(1, 13, 12, "m", "y", &&$base);$year = $base["y"];$month = $base["m"];if (!$result["invert"]);while ($result["d"] < 0);$month--;if ($month $two);list($one, $two) = array($two, $one);$invert = true;$key = array("y", "m", "d", "h", "i", "s");$a = array_combine($key, array_map("intval", explode(" ", date("Y m d H i s", $one))));$b = array_combine($key, array_map("intval", explode(" ", date("Y m d H i s", $two))));$result = array();$result["y"] = $b["y"] - $a["y"];$result["m"] = $b["m"] - $a["m"];$result["d"] = $b["d"] - $a["d"];$result["h"] = $b["h"] - $a["h"];$result["i"] = $b["i"] - $a["i"];$result["s"] = $b["s"] - $a["s"];$result["invert"] = $invert? 1: 0;$result["days"] = intval(abs(($one - $two)/86400));if ($invert);date_normalize(&&$a, &$result);else;date_normalize(&&$b, &$result);return $result;$date = "1986-11-10 19:37:22";print_r(_date_diff(strtotime($date), time()));print_r(_date_diff(time(), strtotime($date)))    
CONTENT;
        $answer->question_id = 168;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can use either date or strftime. In this case I'd say it doesn't matter as a year is a year, no matter what (unless there's a locale that formats the year differently?);For example;On a side note, when formatting dates in PHP it matters when you want to format your date in a different locale than your default. If so, you have to use setlocale and strftime. According to the php manual on date;To format dates in other languages;you should use the setlocale() and;strftime() functions instead of;date().;From this point of view, I think it would be best to use strftime as much as possible, if you even have a remote possibility of having to localize your application. If that's not an issue, pick the one you like best.   
CONTENT;
        $answer->question_id = 169;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Notice: Undefined variable;From the vast wisdom of the PHP Manual;Relying on the default value of an uninitialized variable is problematic in the case of including one file into another which uses the same variable name. It is also a major security risk with register_globals turned on. E_NOTICE level error is issued in case of working with uninitialized variables, however not in the case of appending elements to the uninitialized array. isset() language construct can be used to detect if a variable has been already initialized.;Although PHP does not require variable declaration, it does recommend it in order to avoid some security vulnerabilities or bugs where one would forget to give a value to a variable that he will use later in the script. What PHP does in the case of undeclared variables is issue a very low level error, E_NOTICE, one that is not even reported by default, but the Manual advises to allow during development.;Ways to deal with the issue;Recommended: Declare your variables, for example when you try to append a string to an undefined variable. Or use isset() / !empty() to check if they are declared before referencing them, as in;//Initializing variable;$value = "", //Initialization value, Examples;//"" When you want to append stuff later;//0 When you want to add numbers later;//isset();$value = isset($_POST['value'])? $_POST['value']: ';//empty();$value = !empty($_POST['value'])? $_POST['value']: ';Set a custom error handler for E_NOTICE and redirect the messages away from the standard output (maybe to a log file);set_error_handler('myHandlerForMinorErrors', E_NOTICE | E_STRICT);Disable E_NOTICE from reporting. A quick way to exclude just E_NOTICE is;error_reporting(error_reporting() & ~E_NOTICE);Suppress the error with the @ operator.;Note: It's strongly recommended to implement just point 1.;Notice: Undefined index;This notice appears when you try to access an undefined index of an array.;Ways to deal with the issue;Check if the index exists before you access it. For this you can use isset() or array_key_exists();//isset();$value = isset($array['my_index'])? $array['my_index']: ';//array_key_exists();$value = array_key_exists('my_index', $array)? $array['my_index']: ';$_POST / $_GET / $_SESSION variable;The notices above appear often when working with $_POST, $_GET or $_SESSION. For $_POST and $_GET you just have to check if the index exists or not before you use them. For $_SESSION you have to make sure you have the session started with session_start() and that the index also exists.;Related;Notice: Undefined variable;Notice: Undefined Index  
CONTENT;
        $answer->question_id = 170;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You have asked two questions that are not quite equivalent;Firstly, how to determine whether an array has only numeric keys;Secondly, how to determine whether an array has sequential numeric keys, starting from 0;Consider which of these behaviours you actually need. (It may be that either will do for your purposes.);The first question (simply checking that all keys are numeric) is answered well by Captain kurO.;For the second question (checking whether the array is zero-indexed and sequential), you can use the following function;function isAssoc($arr);return array_keys($arr) !== range(0, count($arr) - 1);var_dump(isAssoc(array('a', 'b', 'c'))), // false;var_dump(isAssoc(array("0" => 'a', "1" => 'b', "2" => 'c'))), // false;var_dump(isAssoc(array("1" => 'a', "0" => 'b', "2" => 'c'))), // true;var_dump(isAssoc(array("a" => 'a', "b" => 'b', "c" => 'c'))), // true    
CONTENT;
        $answer->question_id = 171;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        use INSERT IGNORE INTO table;see http://bogdan.org.ua/2007/10/18/mysql-insert-if-not-exists-syntax.html;there's also INSERT … ON DUPLICATE KEY UPDATE syntax, you can find explanations on dev.mysql.com;Post from bogdan.org.ua according to Google's webcache;18th October 2007;To start: as of the latest MySQL, syntax presented in the title is not;possible. But there are several very easy ways to accomplish what is;expected using existing functionality.;There are 3 possible solutions: using INSERT IGNORE, REPLACE, or;INSERT … ON DUPLICATE KEY UPDATE.;Imagine we have a table;CREATE TABLE `transcripts`;`ensembl_transcript_id` varchar(20) NOT NULL;`transcript_chrom_start` int(10) unsigned NOT NULL;`transcript_chrom_end` int(10) unsigned NOT NULL;PRIMARY KEY (`ensembl_transcript_id`);ENGINE=InnoDB DEFAULT CHARSET=latin1;Now imagine that we have an automatic pipeline importing transcripts;meta-data from Ensembl, and that due to various reasons the pipeline;might be broken at any step of execution. Thus, we need to ensure two;things: 1) repeated executions of the pipeline will not destroy our;database, and 2) repeated executions will not die due to ‘duplicate;primary key’ errors.;Method 1: using REPLACE;It’s very simple;REPLACE INTO `transcripts`;SET `ensembl_transcript_id` = ‘ENSORGT00000000001′;`transcript_chrom_start` = 12345;`transcript_chrom_end` = 12678;If the record exists, it will be overwritten, if it does not yet;exist, it will be created. However, using this method isn’t efficient;for our case: we do not need to overwrite existing records, it’s fine;just to skip them.;Method 2: using INSERT IGNORE Also very simple;INSERT IGNORE INTO `transcripts`;SET `ensembl_transcript_id` = ‘ENSORGT00000000001′;`transcript_chrom_start` = 12345;`transcript_chrom_end` = 12678;Here, if the ‘ensembl_transcript_id’ is already present in the;database, it will be silently skipped (ignored). (To be more precise;here’s a quote from MySQL reference manual: “If you use the IGNORE;keyword, errors that occur while executing the INSERT statement are;treated as warnings instead. For example, without IGNORE, a row that;duplicates an existing UNIQUE index or PRIMARY KEY value in the table;causes a duplicate-key error and the statement is aborted.”.) If the;record doesn’t yet exist, it will be created.;This second method has several potential weaknesses, including;non-abortion of the query in case any other problem occurs (see the;manual). Thus it should be used if previously tested without the;IGNORE keyword.;There is one more option: to use INSERT … ON DUPLICATE KEY UPDATE;syntax, and in the UPDATE part just do nothing do some meaningless;(empty) operation, like calculating 0+0 (Geoffray suggests doing the;id=id assignment for the MySQL optimization engine to ignore this;operation). Advantage of this method is that it only ignores duplicate;key events, and still aborts on other errors.;As a final notice: this post was inspired by Xaprb. I’d also advise to;consult his other post on writing flexible SQL queries.  
CONTENT;
        $answer->question_id = 172;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Depends on your priorities.;If performance is your absolute driving characteristic, then by all means use the fastest one. Just make sure you have a full understanding of the differences before you make a choice;By default, json_encode() converts UTF-8 characters to Unicode escape sequences while serialize() does not. Note: To leave UTF-8 characters untouched, you can use the option JSON_UNESCAPED_UNICODE as of PHP 5.4.;JSON will have no memory of what the object's original class was (they are always restored as instances of stdClass).;You can't leverage __sleep() and __wakeup() with JSON;Only public properties are serialized with JSON. Note: As of PHP 5.4, you can implement JsonSerializable to change this behavior.;JSON is more portable;And there's probably a few other differences I can't think of at the moment.;A simple speed test to compare the two;<?php;ini_set('display_errors', 1);error_reporting(E_ALL);// Make a big, honkin test array;// You may need to adjust this depth to avoid memory limit errors;$testArray = fillArray(0, 5);// Time json encoding;$start = microtime(true);json_encode($testArray);$jsonTime = microtime(true) - $start;echo "JSON encoded in $jsonTime seconds\n;// Time serialization;$start = microtime(true);serialize($testArray);$serializeTime = microtime(true) - $start;echo "PHP serialized in $serializeTime seconds\n;// Compare them;if ($jsonTime < $serializeTime);printf("json_encode() was roughly %01.2f%% faster than serialize()\n", ($serializeTime / $jsonTime - 1) * 100);elseif ($serializeTime < $jsonTime);printf("serialize() was roughly %01.2f%% faster than json_encode()\n", ($jsonTime / $serializeTime - 1) * 100);else;echo "Unpossible!\n;function fillArray($depth, $max);static $seed;if (is_null($seed));$seed = array('a', 2, 'c', 4, 'e', 6, 'g', 8, 'i', 10);if ($depth < $max);$node = array();foreach ($seed as $key);$node[$key] = fillArray($depth + 1, $max);return $node;return 'empty 
CONTENT;
        $answer->question_id = 173;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can use reset and key;reset($array);$first_key = key($array);It's essentially the same as your initial code, but with a little less overhead, and it's more obvious what is happening.;Just remember to call reset, or you may get any of the keys in the array. You can also use end instead of reset to get the last key.;If you wanted the key to get the first value, reset actually returns it;$first_value = reset($array);There is one special case to watch out for though (so check the length of the array first);$arr1 = array(false);$arr2 = array();var_dump(reset($arr1) === reset($arr2)), // bool(true) 
CONTENT;
        $answer->question_id = 174;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        They're not recommended because it's a PITA if you ever have to move your code to a server where it's not supported (and you can't enable it). As you say, lots of shared hosts do support shorttags but "lots" isn't all of them. If you want to share your scripts, it's best to use the full syntax.;I agree that <? and <?= are easier on programmers than <?php and <?php echo but it is possible to do a bulk find-and-replace as long as you use the same form each time (and don't chuck in spaces (eg: <? php or <? =);I don't buy readability as a reason at all. Most serious developers have the option of syntax highlighting available to them.;As ThiefMaster mentions in the comments, as of PHP 5.4, tags are supported everywhere, regardless of shorttags settings. This should mean they're safe to use in portable code but that does mean there's then a dependency on PHP 5.4+. If you want to support pre-5.4 and can't guarantee shorttags, you'll still need to use.;Also, you need to know that ASP tags, <%=, and script tag are removed from PHP 7. So if you would like to support long-term portable code and would like switching to the most modern tools consider changing that parts of code.    
CONTENT;
        $answer->question_id = 175;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        People from other scripting languages always think theirs is better because they have a built in function to do that and not PHP (I am looking at pythonistas right now:-)).;In fact, it does exist, but few people know it. Meet pathinfo();$ext = pathinfo($filename, PATHINFO_EXTENSION);This is fast, efficient, reliable and built-in. pathinfo() can give you other information, such as canonical path, depending on the constant you pass to it.;Enjoy  
CONTENT;
        $answer->question_id = 176;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Timestamps in MySQL generally used to track changes to records, and are often updated every time the record is changed. If you want to store a specific value you should use a datetime field.;If you meant that you want to decide between using a UNIX timestamp or a native MySQL datetime field, go with the native format. You can do calculations within MySQL that way;("SELECT DATE_ADD(my_datetime, INTERVAL 1 DAY)") and it is simple to change the format of the value to a UNIX timestamp ("SELECT UNIX_TIMESTAMP(my_datetime)") when you query the record if you want to operate on it with PHP.   
CONTENT;
        $answer->question_id = 177;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Use this query;SELECT User FROM mysql.user;Which will output a table like this;+-------+;User;+-------+;root;+-------+;user2;+-------+;As Matthew Scharley points out in the comments on this answer, you can group by the User column if you'd only like to see unique usernames.  
CONTENT;
        $answer->question_id = 178;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        For MySQL 5.0.3 and higher, you can use BIT. The manual says;As of MySQL 5.0.3, the BIT data type is used to store bit-field;values. A type of BIT(M) enables storage of M-bit values. M can range;from 1 to 64.;Otherwise, according to the MySQL manual you can use bool and boolean which are at the moment aliases of tinyint(1);Bool, Boolean: These types are synonyms for TINYINT(1). A value of;zero is considered false. Non-zero;values are considered true.;MySQL also states that;We intend to implement full boolean;type handling, in accordance with;standard SQL, in a future MySQL;release.;BTW: this is just a matter of https://google.com/search?q=mysql+boolean+datatype.;Funny isn't it, this link, posted a few years back, has become recursive.    
CONTENT;
        $answer->question_id = 179;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I have briefly discuss this matter by table so you can conclude which has to be chosen either InnoDB or MyISAM.;http://developer99.blogspot.com/2011/07/mysql-innodb-vs-myisam.html;Here is a small overview of which type you should use in which situation;MyISAM InnoDB;----------------------------------------------------------------;Required full-text search Yes 5.6.4;----------------------------------------------------------------;Require transactions Yes;----------------------------------------------------------------;Frequent select queries Yes;----------------------------------------------------------------;Frequent insert, update, delete Yes;----------------------------------------------------------------;Row locking (multi processing on single table) Yes;----------------------------------------------------------------;Relational base design Yes;To summarize;Frequent reading, almost no writing => MyISAM;Full-text search in MySQL MyISAM;In all other circumstances, InnoDB is usually the best way to go.   
CONTENT;
        $answer->question_id = 180;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Connecting to MYSQL with Python in 3 steps;1 - Setting;You must install a MySQL driver before doing anything. Unlike PHP, only the SQLite driver is installed by default with Python. The most used package to do so is MySQLdb but it's hard to install it using easy_install.;For Windows user, you can get an exe of MySQLdb.;For Linux, this is a casual package (python-mysqldb). (You can use sudo apt-get install python-mysqldb (for debian based distros), yum install mysql-python (for rpm-based), or dnf install python-mysql (for modern fedora distro) in command line to download.);For Mac, you can install MySQLdb using Macport.;2 - Usage;After installing, reboot. This is not mandatory, but will prevent me from answering 3 or 4 other questions in this post if something goes wrong. So please reboot.;Then it is just like using another package;#!/usr/bin/python;import MySQLdb;db = MySQLdb.connect(host="localhost", # your host, usually localhost;user="john", # your username;passwd="megajonhy", # your password;db="jonhydb") # name of the data base;# you must create a Cursor object. It will let;# you execute all the queries you need;cur = db.cursor();# Use all the SQL you like;cur.execute("SELECT * FROM YOUR_TABLE_NAME");# print all the first cell of all the rows;for row in cur.fetchall();print row[0];db.close();Of course, there are thousand of possibilities and options, this is a very basic example. You will have to look at the documentation. A good starting point.;3 - More advanced usage;Once you know how it works, you may want to use an ORM to avoid writting SQL manually and manipulate your tables as they were Python objects. The most famous ORM in the Python community is SQLAlchemy.;I strongly advise you to use it: your life is going to be much easier.;I recently discovered another jewel in the Python world: peewee. It's a very lite ORM, really easy and fast to setup then use. It makes my day for small projects or stand alone apps, where using big tools like SQLAlchemy or Django is overkill;import peewee;from peewee import *;db = MySQLDatabase('jonhydb', user='john',passwd='megajonhy');class Book(peewee.Model);author = peewee.CharField();title = peewee.TextField();class Meta;database = db;Book.create_table();book = Book(author="me", title='Peewee is cool');book.save();for book in Book.filter(author="me");print book.title;Peewee is cool;This example works out of the box. Nothing other than having peewee (pip install peewee:-)) is required. No complicated setup. It's really cool.  
CONTENT;
        $answer->question_id = 181;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Reading this original article on The Code Project will help you a lot: Visual Representation of SQL Joins.;Also check this post: SQL SERVER – Better Performance – LEFT JOIN or NOT IN?.;Find original one at: Difference between JOIN and OUTER JOIN in MySQL. 
CONTENT;
        $answer->question_id = 182;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        From http://www.tech-recipes.com/rx/1475/save-mysql-query-results-into-a-text-or-csv-file/;SELECT order_id,product_name,qty;FROM orders;WHERE foo = 'bar;INTO OUTFILE '/tmp/orders.csv;FIELDS TERMINATED BY ',;ENCLOSED BY '";LINES TERMINATED BY '\n;Using this command columns names will not be exported.    
CONTENT;
        $answer->question_id = 183;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can use GROUP_CONCAT.;As in;SELECT person_id, GROUP_CONCAT(hobbies SEPARATOR ', ');FROM peoples_hobbies GROUP BY person_id;Death;As Dag stated in his comment, there is a 1024 byte limit on result. To solve this, run this query before your query;SET group_concat_max_len = 2048;Of course, you can change 2048 according to your needs.    
CONTENT;
        $answer->question_id = 184;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        IMPORTANT EDIT;It is now possible to achieve this with DATETIME fields since MySQL 5.6.5, take a look at the other post below...;Previous versions can't do that with DATETIME...;But you can do it with TIMESTAMP;mysql> create table test (str varchar(32), ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP);Query OK, 0 rows affected (0.00 sec);mysql> desc test;+-------+-------------+------+-----+-------------------+-------+;Field | Type | Null | Key | Default | Extra;+-------+-------------+------+-----+-------------------+-------+;str | varchar(32) | YES | | NULL;ts | timestamp | NO | | CURRENT_TIMESTAMP;+-------+-------------+------+-----+-------------------+-------+;2 rows in set (0.00 sec);mysql> insert into test (str) values ("demo");Query OK, 1 row affected (0.00 sec);mysql> select * from test;+------+---------------------+;str | ts;+------+---------------------+;demo | 2008-10-03 22:59:52;+------+---------------------+;1 row in set (0.00 sec);mysql>  
CONTENT;
        $answer->question_id = 185;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        TEXT and BLOB is stored off the table with the table just having a pointer to the location of the actual storage.;VARCHAR is stored inline with the table. VARCHAR is faster when the size is reasonable, the tradeoff of which would be faster depends upon your data and your hardware, you'd want to benchmark a realworld scenario with your data.  
CONTENT;
        $answer->question_id = 186;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can reset the counter with;ALTER TABLE tablename AUTO_INCREMENT = 1;For InnoDB you cannot set the auto_increment value lower or equal to the highest current index. (quote from ViralPatel);Note that you cannot reset the counter to a value less than or equal;to any that have already been used. For MyISAM, if the value is less;than or equal to the maximum value currently in the AUTO_INCREMENT;column, the value is reset to the current maximum plus one. For;InnoDB, if the value is less than the current maximum value in the;column, no error occurs and the current sequence value is not changed.;See How to Reset an MySQL AutoIncrement using a MAX value from another table? on how to dynamically get an acceptable value. 
CONTENT;
        $answer->question_id = 187;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        For InnoDB, the following seems to work: create the new empty database, then rename each table in turn into the new database;RENAME TABLE old_db.table TO new_db.table;You will need to adjust the permissions after that.;For scripting in a shell, you can use either of the following;mysql -u username -ppassword old_db -sNe 'show tables' | while read table, \;do mysql -u username -ppassword -sNe "rename table old_db.$table to new_db.$table", done;Or;for table in `mysql -u root -s -N -e "show tables from old_db"\`, do mysql -u root -s -N -e "rename table old_db.$table to new_db.$table", done,`;Notes: there is no space between the option -p and the password. If your database has no password, remove the -u username -ppassword part.;Also, if you have stored procedures, you can copy them afterwards;mysqldump -R old_db | mysql new_db 
CONTENT;
        $answer->question_id = 188;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I would recommend using INSERT...ON DUPLICATE KEY UPDATE.;If you use INSERT IGNORE, then the row won't actually be inserted if it results in a duplicate key. But the statement won't generate an error. It generates a warning instead. These cases include;Inserting a duplicate key in columns with PRIMARY KEY or UNIQUE constraints.;Inserting a NULL into a column with a NOT NULL constraint.;Inserting a row to a partitioned table, but the values you insert don't map to a partition.;If you use REPLACE, MySQL actually does a DELETE followed by an INSERT internally, which has some unexpected side effects;A new auto-increment ID is allocated.;Dependent rows with foreign keys may be deleted (if you use cascading foreign keys) or else prevent the REPLACE.;Triggers that fire on DELETE are executed unnecessarily.;Side effects are propagated to replication slaves too.;correction: both REPLACE and INSERT...ON DUPLICATE KEY UPDATE are non-standard, proprietary inventions specific to MySQL. ANSI SQL 2003 defines a MERGE statement that can solve the same need (and more), but MySQL does not support the MERGE statement.;A user tried to edit this post (the edit was rejected by moderators). The edit tried to add a claim that INSERT...ON DUPLICATE KEY UPDATE causes a new auto-increment id to be allocated. It's true that the new id is generated, but it is not used in the changed row.;See demonstration below, tested with Percona Server 5.5.28. The configuration variable innodb_autoinc_lock_mode=1 (the default);mysql> create table foo (id serial primary key, u int, unique key (u));mysql> insert into foo (u) values (10);mysql> select * from foo;+----+------+;id | u;+----+------+;1 | 10;+----+------+;mysql> show create table foo\G;CREATE TABLE `foo`;`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;`u` int(11) DEFAULT NULL;PRIMARY KEY (`id`);UNIQUE KEY `u` (`u`);ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;mysql> insert into foo (u) values (10) on duplicate key update u = 20;mysql> select * from foo;+----+------+;id | u;+----+------+;1 | 20;+----+------+;mysql> show create table foo\G;CREATE TABLE `foo`;`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;`u` int(11) DEFAULT NULL;PRIMARY KEY (`id`);UNIQUE KEY `u` (`u`);ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;The above demonstrates that the IODKU statement detects the duplicate, and invokes the update to change the value of u. Note the AUTO_INCREMENT=3 indicates an id was generated, but not used in the row.;Whereas REPLACE does delete the original row and inserts a new row, generating and storing a new auto-increment id;mysql> select * from foo;+----+------+;id | u;+----+------+;1 | 20;+----+------+;mysql> replace into foo (u) values (20);mysql> select * from foo;+----+------+;id | u;+----+------+;3 | 20;+----+------+  
CONTENT;
        $answer->question_id = 189;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        These two collations are both for the UTF-8 character encoding. The differences are in how text is sorted and compared.;Note: in MySQL 5.5.3 and up use utf8mb4, rather than utf8, which is the same UTF-8 data format with the same performance but removes a MySQL-specific limitation where only characters up to xFFFD were supported.;Accuracy;utf8mb4_unicode_ci is based on the Unicode standard for sorting and comparison, which sorts accurately in a very wide range of languages.;utf8mb4_general_ci fails to implement all of the Unicode sorting rules, which will result in undesirable sorting in some situations, such as when using particular languages or characters.;Performance;utf8mb4_general_ci is faster at comparisons and sorting, because it takes a bunch of performance-related shortcuts.;On modern servers, this performance boost will be all but negligible. It was devised in a time when servers had a tiny fraction of the CPU performance of today's computers.;utf8mb4_unicode_ci, which uses the Unicode rules for sorting and comparison, employs a fairly complex algorithm for correct sorting in a wide range of languages and when using a wide range of special characters. These rules need to take into account language-specific conventions, not everybody sorts their characters in what we would call 'alphabetical order'.;As far as Latin (ie "European") languages go, there is not much difference between the Unicode sorting and the simplified utf8mb4_general_ci sorting in MySQL, but there are still a few differences;For examples, the Unicode collation sorts "ß" like "ss", and "Œ" like "OE" as people using those characters would normally want, whereas utf8mb4_general_ci sorts them as single characters (presumably like "s" and "e" respectively).;Some Unicode characters are defined as ignorable, which means they shouldn't count toward the sort order and the comparison should move on to the next character instead. utf8mb4_unicode_ci handles these properly.;In non-latin languages, such as Asian languages or languages with different alphabets, there may be a lot more differences between Unicode sorting and the simplified utf8mb4_general_ci sorting. The suitability of utf8mb4_general_ci will depend heavily on the language used. For some languages, it'll be quite inadequate.;What should you use?;There is almost certainly no reason to use utf8mb4_general_ci anymore, as we have left behind the point where CPU speed is low enough that the performance difference would be important. Your database will almost certainly be limited by other bottlenecks than this.;The difference in performance is only going to be measurable in extremely specialised situations, and if that's you, you probably already know about it. If you're experiencing slow sorting, in almost all cases it'll be an issue with your indexes/query plan. Changing your collation function should not be high on the list of things to troubleshoot.;In the past, some people recommended to use utf8mb4_general_ci except when accurate sorting was going to be important enough to justify the performance cost. Today, that performance cost has all but disappeared, and developers are treating internationalization more seriously.;One other thing I'll add is that even if you know your application only supports the English language, it may still need to deal with people's names, which can often contain characters used in other languages in which it is just as important to sort correctly. Using the Unicode rules for everything helps add peace of mind that the very smart Unicode people have worked very hard to make sorting work properly. 
CONTENT;
        $answer->question_id = 190;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        ALTER TABLE `votes` ADD UNIQUE `unique_index`(`user`, `email`, `address`)   
CONTENT;
        $answer->question_id = 191;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        INNER JOIN is ANSI syntax which you should use.;It is generally considered more readable, especially when you join lots of tables.;It can also be easily replaced with an OUTER JOIN whenever a need arises.;The WHERE syntax is more relational model oriented.;A result of two tables JOIN 'ed is a cartesian product of the tables to which a filter is applied which selects only those rows with joining columns matching.;It's easier to see this with the WHERE syntax.;As for your example, in MySQL (and in SQL generally) these two queries are synonyms.;Also note that MySQL also has a STRAIGHT_JOIN clause.;Using this clause, you can control the JOIN order: which table is scanned in the outer loop and which one is in the inner loop.;You cannot control this in MySQL using WHERE syntax.  
CONTENT;
        $answer->question_id = 192;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The key is to rewrite this query so that it can be used as a subquery.;SELECT firstname;lastname;list.address;FROM list;INNER JOIN (SELECT address;FROM list;GROUP BY address;HAVING COUNT(id) > 1) dup;ON list.address = dup.address   
CONTENT;
        $answer->question_id = 193;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        At first glance...;All you need is a GROUP BY clause with the MAX aggregate function;SELECT id, MAX(rev);FROM YourTable;GROUP BY id;It's never that simple, is it?;I just noticed you need the content column as well.;This is a very common question in SQL: find the whole data for the row with some max value in a column per some group identifier. I heard that a lot during my career. Actually, it was one the questions I answered in my current job's technical interview.;It is, actually, so common that StackOverflow community has created a single tag just to deal with questions like that: greatest-n-per-group.;Basically, you have two approaches to solve that problem;Joining with simple group-identifier, max-value-in-group Sub-query;In this approach, you first find the group-identifier, max-value-in-group (already solved above) in a sub-query. Then you join your table to the sub-query with equality on both group-identifier and max-value-in-group;SELECT a.id, a.rev, a.contents;FROM YourTable a;INNER JOIN;SELECT id, MAX(rev) rev;FROM YourTable;GROUP BY id;b ON a.id = b.id AND a.rev = b.rev;Left Joining with self, tweaking join conditions and filters;In this approach, you left join the table with itself. Equality, of course, goes in the group-identifier. Then, 2 smart moves;The second join condition is having left side value less than right value;When you do step 1, the row(s) that actually have the max value will have NULL in the right side (it's a LEFT JOIN, remember?). Then, we filter the joined result, showing only the rows where the right side is NULL.;So you end up with;SELECT a.*;FROM YourTable a;LEFT OUTER JOIN YourTable b;ON a.id = b.id AND a.rev < b.rev;WHERE b.id IS NULL;Conclusion;Both approaches bring the exact same result.;If you have two rows with max-value-in-group for group-identifier, both rows will be in the result in both approaches.;Both approaches are SQL ANSI compatible, thus, will work with your favorite RDBMS, regardless of its "flavor".;Both approaches are also performance friendly, however your mileage may vary (RDBMS, DB Structure, Indexes, etc.). So when you pick one approach over the other, benchmark. And make sure you pick the one which make most of sense to you.   
CONTENT;
        $answer->question_id = 194;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        First, I see two issues with what you're trying to do. Since you already have an installed version, you should either uninstall the current existing driver or use pip install -I MySQL_python==1.2.2;However, you'll soon find out that this doesn't work. If you look at pip's installation log, or if you do a pip install -Iv MySQL_python==1.2.2 you'll find that the PyPI URL link does not work for MySQL_python v1.2.2. You can verify this here: http://pypi.python.org/pypi/MySQL-python/1.2.2;The download link 404s and the fallback URL links are re-directing infinitely due to sourceforge.net's recent upgrade and PyPI's stale URL.;So to properly install the driver, you can follow these steps;pip uninstall MySQL_python;pip install -Iv http://sourceforge.net/projects/mysql-python/files/mysql-python/1.2.2/MySQL-python-1.2.2.tar.gz/download  
CONTENT;
        $answer->question_id = 195;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        To get all tables with columns columnA or ColumnB in the database YourDatabase;SELECT DISTINCT TABLE_NAME;FROM INFORMATION_SCHEMA.COLUMNS;WHERE COLUMN_NAME IN ('columnA','ColumnB');AND TABLE_SCHEMA='YourDatabase 
CONTENT;
        $answer->question_id = 196;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You are so close! All you need to do is select BOTH the home and it's max date time, then join back to the topten table on BOTH fields;SELECT tt.*;FROM topten tt;INNER JOIN;(SELECT home, MAX(datetime) AS MaxDateTime;FROM topten;GROUP BY home) groupedtt;ON tt.home = groupedtt.home;AND tt.datetime = groupedtt.MaxDateTime    
CONTENT;
        $answer->question_id = 197;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Try;mysql -u username -p database_name < file.sql;Check MySQL Options.;Note: It is better to use the full path of the SQL file file.sql.    
CONTENT;
        $answer->question_id = 198;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Sub-queries are the logically correct way to solve problems of the form, "Get facts from A, conditional on facts from B". In such instances, it makes more logical sense to stick B in a sub-query than to do a join. It is also safer, in a practical sense, since you don't have to be cautious about getting duplicated facts from A due to multiple matches against B.;Practically speaking, however, the answer usually comes down to performance. Some optimisers suck lemons when given a join vs a sub-query, and some suck lemons the other way, and this is optimiser-specific, DBMS-version-specific and query-specific.;Historically, explicit joins usually win, hence the established wisdom that joins are better, but optimisers are getting better all the time, and so I prefer to write queries first in a logically coherent way, and then restructure if performance constraints warrant this. 
CONTENT;
        $answer->question_id = 199;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        That ibdata1 isn't shrinking is a particularly annoying feature of MySQL. The ibdata1 file can´t actually be shrunk unless you delete all databases, remove the files and reload a dump.;But you can configure MySQL so that each table, including its indexes, is stored as a separate file. In that way ibdata1 will not grow as large. According to Bill Karwin's comment this is enabled by default as of version 5.6 of MySQL.;It was a while ago I did this. However, to setup your server to use separate files for each table you need to change my.cnf in order to enable this;[mysqld];innodb_file_per_table=1;http://dev.mysql.com/doc/refman/5.5/en/innodb-multiple-tablespaces.html;As you want to reclaim the space from ibdata1 you actually have to delete the file;Do a mysqldump of all databases, procedures, triggers etc except the mysql and performance_schema databases;Drop all databases except the above 2 databases;Stop mysql;Delete ibdata1 and ib_log files;Start mysql;Restore from dump;When you start MySQL in step 5 the ibdata1 and ib_log files will be recreated.;Now you're fit to go. When you create a new database for analysis, the tables will be located in separate ibd* files, not in ibdata1. As you usually drop the database soon after, the ibd* files will be deleted.;http://dev.mysql.com/doc/refman/5.1/en/drop-database.html;You have probably seen this;http://bugs.mysql.com/bug.php?id=1341;By using the command ALTER TABLE ENGINE=innodb or OPTIMIZE TABLE one can extract data and index pages from ibdata1 to separate files. However, ibdata1 will not shrink unless you do the steps above.    
CONTENT;
        $answer->question_id = 200;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I write the solution this way;SELECT m1.*;FROM messages m1 LEFT JOIN messages m2;ON (m1.name = m2.name AND m1.id < m2.id);WHERE m2.id IS NULL;Regarding performance, one solution or the other can be better, depending on the nature of your data. So you should test both queries and use the one that is better at performance given your database.;For example, I have a copy of the StackOverflow August data dump. I'll use that for benchmarking. There are 1,114,357 rows in the Posts table. This is running on MySQL 5.0.75 on my Macbook Pro 2.40GHz.;I'll write a query to find the most recent post for a given user ID (mine).;First using the technique shown by @Eric with the GROUP BY in a subquery;SELECT p1.postid;FROM Posts p1;INNER JOIN (SELECT pi.owneruserid, MAX(pi.postid) AS maxpostid;FROM Posts pi GROUP BY pi.owneruserid) p2;ON (p1.postid = p2.maxpostid);WHERE p1.owneruserid = 20860;1 row in set (1 min 17.89 sec);Even the EXPLAIN analysis takes over 16 seconds;+----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+;id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra;+----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+;1 | PRIMARY | | ALL | NULL | NULL | NULL | NULL | 76756;1 | PRIMARY | p1 | eq_ref | PRIMARY,PostId,OwnerUserId | PRIMARY | 8 | p2.maxpostid | 1 | Using where;2 | DERIVED | pi | index | NULL | OwnerUserId | 8 | NULL | 1151268 | Using index;+----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+;3 rows in set (16.09 sec);Now produce the same query result using my technique with LEFT JOIN;SELECT p1.postid;FROM Posts p1 LEFT JOIN posts p2;ON (p1.owneruserid = p2.owneruserid AND p1.postid < p2.postid);WHERE p2.postid IS NULL AND p1.owneruserid = 20860;1 row in set (0.28 sec);The EXPLAIN analysis shows that both tables are able to use their indexes;+----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+;id | select_type | table | type | possible_keys | key | key_len | ref | rows | Extra;+----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+;1 | SIMPLE | p1 | ref | OwnerUserId | OwnerUserId | 8 | const | 1384 | Using index;1 | SIMPLE | p2 | ref | PRIMARY,PostId,OwnerUserId | OwnerUserId | 8 | const | 1384 | Using where, Using index, Not exists;+----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+;2 rows in set (0.00 sec);Here's the DDL for my Posts table;CREATE TABLE `posts`;`PostId` bigint(20) unsigned NOT NULL auto_increment;`PostTypeId` bigint(20) unsigned NOT NULL;`AcceptedAnswerId` bigint(20) unsigned default NULL;`ParentId` bigint(20) unsigned default NULL;`CreationDate` datetime NOT NULL;`Score` int(11) NOT NULL default '0';`ViewCount` int(11) NOT NULL default '0';`Body` text NOT NULL;`OwnerUserId` bigint(20) unsigned NOT NULL;`OwnerDisplayName` varchar(40) default NULL;`LastEditorUserId` bigint(20) unsigned default NULL;`LastEditDate` datetime default NULL;`LastActivityDate` datetime default NULL;`Title` varchar(250) NOT NULL default ';`Tags` varchar(150) NOT NULL default ';`AnswerCount` int(11) NOT NULL default '0';`CommentCount` int(11) NOT NULL default '0';`FavoriteCount` int(11) NOT NULL default '0';`ClosedDate` datetime default NULL;PRIMARY KEY (`PostId`);UNIQUE KEY `PostId` (`PostId`);KEY `PostTypeId` (`PostTypeId`);KEY `AcceptedAnswerId` (`AcceptedAnswerId`);KEY `OwnerUserId` (`OwnerUserId`);KEY `LastEditorUserId` (`LastEditorUserId`);KEY `ParentId` (`ParentId`);CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`PostTypeId`) REFERENCES `posttypes` (`PostTypeId`);ENGINE=InnoDB 
CONTENT;
        $answer->question_id = 201;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Differences;KEY or INDEX refers to a normal non-unique index. Non-distinct values for the index are allowed, so the index may contain rows with identical values in all columns of the index. These indexes don't enforce any restraints on your data so they are used only for making sure certain queries can run quickly.;UNIQUE refers to an index where all rows of the index must be unique. That is, the same row may not have identical non-NULL values for all columns in this index as another row. As well as being used to speed up queries, UNIQUE indexes can be used to enforce restraints on data, because the database system does not allow this distinct values rule to be broken when inserting or updating data.;Your database system may allow a UNIQUE index to be applied to columns which allow NULL values, in which case two rows are allowed to be identical if they both contain a NULL value (the rationale here is that NULL is considered not equal to itself). Depending on your application, however, you may find this undesirable: if you wish to prevent this, you should disallow NULL values in the relevant columns.;PRIMARY acts exactly like a UNIQUE index, except that it is always named 'PRIMARY', and there may be only one on a table (and there should always be one, though some database systems don't enforce this). A PRIMARY index is intended as a primary means to uniquely identify any row in the table, so unlike UNIQUE it should not be used on any columns which allow NULL values. Your PRIMARY index should be on the smallest number of columns that are sufficient to uniquely identify a row. Often, this is just one column containing a unique auto-incremented number, but if there is anything else that can uniquely identify a row, such as "countrycode" in a list of countries, you can use that instead.;Some database systems (such as MySQL's InnoDB) will store a table's records on disk in the order in which they appear in the PRIMARY index.;FULLTEXT indexes are different from all of the above, and their behaviour differs significantly between database systems. FULLTEXT indexes are only useful for full text searches done with the MATCH() / AGAINST() clause, unlike the above three - which are typically implemented internally using b-trees (allowing for selecting, sorting or ranges starting from left most column) or hash tables (allowing for selection starting from left most column).;Where the other index types are general-purpose, a FULLTEXT index is specialised, in that it serves a narrow purpose: it's only used for a "full text search" feature.;Similarities;All of these indexes may have more than one column in them.;With the exception of FULLTEXT, the column order is significant: for the index to be useful in a query, the query must use columns from the index starting from the left - it can't use just the second, third or fourth part of an index, unless it is also using the previous columns in the index to match static values. (For a FULLTEXT index to be useful to a query, the query must use all columns of the index.) 
CONTENT;
        $answer->question_id = 202;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        SELECT;id, IF(type = 'P', amount, amount * -1) as amount;FROM report;See http://dev.mysql.com/doc/refman/5.0/en/control-flow-functions.html.;Additionally, you could handle when the condition is null. In the case of a null amount;SELECT;id, IF(type = 'P', IFNULL(amount,0), IFNULL(amount,0) * -1) as amount;FROM report;The part IFNULL(amount,0) means when amount is not null return amount else return 0.  
CONTENT;
        $answer->question_id = 203;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        GROUP BY YEAR(record_date), MONTH(record_date);Check out the date and time functions in MySQL.  
CONTENT;
        $answer->question_id = 204;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        On Ubuntu/Debian and other distributions using aptitude;sudo apt-get install libmysql-ruby libmysqlclient-dev;If the above command doesn't work because libmysql-ruby cannot be found, the following should be sufficient;sudo apt-get install libmysqlclient-dev;On Red Hat/CentOS and other distributions using yum;sudo yum install mysql-devel;On Mac OS X with Homebrew;brew install mysql 
CONTENT;
        $answer->question_id = 205;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you're working with small databases I've found running mysqldump on both databases with the --skip-comments and --skip-extended-insert options to generate SQL scripts, then running diff on the SQL scripts works pretty well.;By skipping comments you avoid meaningless differences such as the time you ran the mysqldump command. By using the --skip-extended-insert command you ensure each row is inserted with its own insert statement. This eliminates the situation where a single new or modified record can cause a chain reaction in all future insert statements. Running with these options produces larger dumps with no comments so this is probably not something you want to do in production use but for development it should be fine. I've put examples of the commands I use below;mysqldump --skip-comments --skip-extended-insert -u root -p dbName1>file1.sql;mysqldump --skip-comments --skip-extended-insert -u root -p dbName2>file2.sql;diff file1.sql file2.sql;share   206
        200 I can see you said you didn't want to use mysqldump, but I reached this page while looking for a similar solution and others might find it as well. With that in mind, here is a simple way to duplicate a database from the command line of a windows server;Create the target database using MySQLAdmin or your preferred method. In this example, db2 is the target database, where the source database db1 will be copied.;Execute the following statement on a command line;mysqldump -h [server] -u [user] -p[password] db1 | mysql -h [server] -u [user] -p[password] db2;Note: There is NO space between -p and [password]  
CONTENT;
        $answer->question_id = 207;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        From the documentation;Type | Maximum length;-----------+-------------------------------------;TINYTEXT | 255 (2 8 −1) bytes;TEXT | 65,535 (2 16 −1) bytes = 64 KiB;MEDIUMTEXT | 16,777,215 (2 24 −1) bytes = 16 MiB;LONGTEXT | 4,294,967,295 (2 32 −1) bytes = 4 GiB;Note that the number of characters that can be stored in your column will depend on the character encoding.   
CONTENT;
        $answer->question_id = 208;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Well, you could argue with the object oriented aspect, the prepared statements, the fact that it becomes a standard, etc. But I know that most of the time, convincing somebody works better with a killer feature. So there it is;A really nice thing with PDO is you can fetch the data, injecting it automatically in an object. If you don't want to use an ORM (cause it's a just a quick script) but you do like object mapping, it's REALLY cool;class Student;public $id;public $first_name;public $last_name;public function getFullName();return $this->first_name.' '.$this->last_name;try;$dbh = new PDO("mysql:host=$hostname,dbname=school", $username, $password);$stmt = $dbh->query("SELECT * FROM students");/* MAGIC HAPPENS HERE */;$stmt->setFetchMode(PDO::FETCH_INTO, new Student);foreach($stmt as $student);echo $student->getFullName().;$dbh = null;catch(PDOException $e);echo $e->getMessage();share   209
        --no-data ${DATABASE} > ${DB_FILE};echo "Dump content;mysqldump --host=${HOST} --user=${USER} --password=${PASSWORD} ${DATABASE} ${IGNORED_TABLES_STRING} >> ${DB_FILE} 
CONTENT;
        $answer->question_id = 210;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        MySQL has the concept of user-defined variables.;They are loosely typed variables that may be initialized somewhere in a session and keep their value until the session ends.;They are prepended with an @ sign, like this: @var;You can initialize this variable with a SET statement or inside in a query;SET @var = 1;SELECT @var2:= 2;When you develop a stored procedure in MySQL, you can pass the input parameters and declare the local variables;DELIMITER //;CREATE PROCEDURE prc_test (var INT);BEGIN;DECLARE var2 INT;SET var2 = 1;SELECT var2;END;//;DELIMITER;These variables are not prepended with any prefixes.;The difference between a procedure variable and a session-specific user-defined variable is that procedure variable is reinitialized to NULL each time the procedure is called, while the session-specific variable is not;CREATE PROCEDURE prc_test ();BEGIN;DECLARE var2 INT DEFAULT 1;SET var2:= var2 + 1;SET @var2:= @var2 + 1;SELECT var2, @var2;END;SET @var2 = 1;CALL prc_test();var2 @var2;--- ---;2 2;CALL prc_test();var2 @var2;--- ---;2 3;CALL prc_test();var2 @var2;--- ---;2 4;As you can see, var2 (procedure variable) is reinitialized each time the procedure is called, while @var2 (session-specific variable) is not.;(In addition to user-defined variables, MySQL also has some predefined "system variables", which may be "global variables" such as @@global.port or "session variables" such as @@session.sql_mode, these "session variables" are unrelated to session-specific user-defined variables.)    
CONTENT;
        $answer->question_id = 211;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Use INSERT... ON DUPLICATE KEY UPDATE;QUERY;INSERT INTO table (id, name, age) VALUES(1, "A", 19) ON DUPLICATE KEY UPDATE;name="A", age=19   
CONTENT;
        $answer->question_id = 212;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        GRANT ALL PRIVILEGES ON mydb.* TO 'myuser'@'%' WITH GRANT OPTION;This is how I create my "Super User" privileges (although I would normally specify a host).;IMPORTANT NOTE;While this answer can solve the problem of access, WITH GRANT OPTION creates a MySQL user that can edit the permissions of other users.;The GRANT OPTION privilege enables you to give to other users or remove from other users those privileges that you yourself possess.;For security reasons, you should not use this type of user account for any process that the public will have access to (i.e. a website). It is recommended that you create a user with only database privileges for that kind of use.  
CONTENT;
        $answer->question_id = 213;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can use this query to show the size of a table (although you need to substitute the variables first);SELECT;table_name AS `Table`;round(((data_length + index_length) / 1024 / 1024), 2) `Size in MB`;FROM information_schema.TABLES;WHERE table_schema = "$DB_NAME;AND table_name = "$TABLE_NAME;or this query to list the size of every table in every database, largest first;SELECT;table_schema as `Database`;table_name AS `Table`;round(((data_length + index_length) / 1024 / 1024), 2) `Size in MB`;FROM information_schema.TABLES;ORDER BY (data_length + index_length) DESC  
CONTENT;
        $answer->question_id = 214;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Laravel 4;In Laravel 4, you have to call DB::getQueryLog() to get all ran queries.;$queries = DB::getQueryLog();$last_query = end($queries);Or you can download a profiler package. I'd recommend barryvdh/laravel-debugbar, which is pretty neat. You can read for instructions on how to install in their repository.;Laravel 3;In Laravel 3, you can get the last executed query from an Eloquent model calling the static method last_query on the DB class.;DB::last_query();This, however, requires that you enable the profiler option in application/config/database.php. Alternatively you could, as @dualed mentioned, enable the profiler option, in application/config/application.php or call DB::profile() to get all queries ran in the current request and their execution time.    
CONTENT;
        $answer->question_id = 215;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I thought I'd take a crack at answering my own question. What follows is just one way of solving the issues 1-3 in my original question.;Disclaimer: I may not always use the right terms when describing patterns or techniques. Sorry for that.;The Goals;Create a complete example of a basic controller for viewing and editing Users.;All code must be fully testable and mockable.;The controller should have no idea where the data is stored (meaning it can be changed).;Example to show a SQL implementation (most common).;For maximum performance, controllers should only receive the data they need—no extra fields.;Implementation should leverage some type of data mapper for ease of development.;Implementation should have the ability to perform complex data lookups.;The Solution;I'm splitting my persistent storage (database) interaction into two categories: R (Read) and CUD (Create, Update, Delete). My experience has been that reads are really what causes an application to slow down. And while data manipulation (CUD) is actually slower, it happens much less frequently, and is therefore much less of a concern.;CUD (Create, Update, Delete) is easy. This will involve working with actual models, which are then passed to my Repositories for persistence. Note, my repositories will still provide a Read method, but simply for object creation, not display. More on that later.;R (Read) is not so easy. No models here, just value objects. Use arrays if you prefer. These objects may represent a single model or a blend of many models, anything really. These are not very interesting on their own, but how they are generated is. I'm using what I'm calling Query Objects.;The Code;User Model;Let's start simple with our basic user model. Note that there is no ORM extending or database stuff at all. Just pure model glory. Add your getters, setters, validation, whatever.;class User;public $id;public $first_name;public $last_name;public $gender;public $email;public $password;Repository Interface;Before I create my user repository, I want to create my repository interface. This will define the "contract" that repositories must follow in order to be used by my controller. Remember, my controller will not know where the data is actually stored.;Note that my repositories will only every contain these three methods. The save() method is responsible for both creating and updating users, simply depending on whether or not the user object has an id set.;interface UserRepositoryInterface;public function find($id);public function save(User $user);public function remove(User $user);SQL Repository Implementation;Now to create my implementation of the interface. As mentioned, my example was going to be with an SQL database. Note the use of a data mapper to prevent having to write repetitive SQL queries.;class SQLUserRepository implements UserRepositoryInterface;protected $db;public function __construct(Database $db);$this->db = $db;public function find($id);// Find a record with the id = $id;// from the 'users' table;// and return it as a User object;return $this->db->find($id, 'users', 'User');public function save(User $user);// Insert or update the $user;// in the 'users' table;$this->db->save($user, 'users');public function remove(User $user);// Remove the $user;// from the 'users' table;$this->db->remove($user, 'users');Query Object Interface;Now with CUD (Create, Update, Delete) taken care of by our repository, we can focus on the R (Read). Query objects are simply an encapsulation of some type of data lookup logic. They are not query builders. By abstracting it like our repository we can change it's implementation and test it easier. An example of a Query Object might be an AllUsersQuery or AllActiveUsersQuery, or even MostCommonUserFirstNames.;You may be thinking "can't I just create methods in my repositories for those queries?" Yes, but here is why I'm not doing this;My repositories are meant for working with model objects. In a real world app, why would I ever need to get the password field if I'm looking to list all my users?;Repositories are often model specific, yet queries often involve more than one model. So what repository do you put your method in?;This keeps my repositories very simple—not an bloated class of methods.;All queries are now organized into their own classes.;Really, at this point, repositories exist simply to abstract my database layer.;For my example I'll create a query object to lookup "AllUsers". Here is the interface;interface AllUsersQueryInterface;public function fetch($fields);Query Object Implementation;This is where we can use a data mapper again to help speed up development. Notice that I am allowing one tweak to the returned dataset—the fields. This is about as far as I want to go with manipulating the performed query. Remember, my query objects are not query builders. They simply perform a specific query. However, since I know that I'll probably be using this one a lot, in a number of different situations, I'm giving myself the ability to specify the fields. I never want to return fields I don't need!;class AllUsersQuery implements AllUsersQueryInterface;protected $db;public function __construct(Database $db);$this->db = $db;public function fetch($fields);return $this->db->select($fields)->from('users')->orderBy('last_name, first_name')->rows();Before moving on to the controller, I want to show another example to illustrate how powerful this is. Maybe I have a reporting engine and need to create a report for AllOverdueAccounts. This could be tricky with my data mapper, and I may want to write some actual SQL in this situation. No problem, here is what this query object could look like;class AllOverdueAccountsQuery implements AllOverdueAccountsQueryInterface;protected $db;public function __construct(Database $db);$this->db = $db;public function fetch();return $this->db->query($this->sql())->rows();public function sql();return "SELECT...;This nicely keeps all my logic for this report in one class, and it's easy to test. I can mock it to my hearts content, or even use a different implementation entirely.;The Controller;Now the fun part—bringing all the pieces together. Note that I am using dependency injection. Typically dependencies are injected into the constructor, but I actually prefer to inject them right into my controller methods (routes). This minimizes the controller's object graph, and I actually find it more legible. Note, if you don't like this approach, just use the traditional constructor method.;class UsersController;public function index(AllUsersQueryInterface $query);// Fetch user data;$users = $query->fetch(['first_name', 'last_name', 'email']);// Return view;return Response::view('all_users.php', ['users' => $users]);public function add();return Response::view('add_user.php');public function insert(UserRepositoryInterface $repository);// Create new user model;$user = new User;$user->first_name = $_POST['first_name'];$user->last_name = $_POST['last_name'];$user->gender = $_POST['gender'];$user->email = $_POST['email'];// Save the new user;$repository->save($user);// Return the id;return Response::json(['id' => $user->id]);public function view(SpecificUserQueryInterface $query, $id);// Load user data;if (!$user = $query->fetch($id, ['first_name', 'last_name', 'gender', 'email']));return Response::notFound();// Return view;return Response::view('view_user.php', ['user' => $user]);public function edit(SpecificUserQueryInterface $query, $id);// Load user data;if (!$user = $query->fetch($id, ['first_name', 'last_name', 'gender', 'email']));return Response::notFound();// Return view;return Response::view('edit_user.php', ['user' => $user]);public function update(UserRepositoryInterface $repository);// Load user model;if (!$user = $repository->find($id));return Response::notFound();// Update the user;$user->first_name = $_POST['first_name'];$user->last_name = $_POST['last_name'];$user->gender = $_POST['gender'];$user->email = $_POST['email'];// Save the user;$repository->save($user);// Return success;return true;public function delete(UserRepositoryInterface $repository);// Load user model;if (!$user = $repository->find($id));return Response::notFound();// Delete the user;$repository->delete($user);// Return success;return true;Final Thoughts;The important things to note here are that when I'm modifying (creating, updating or deleting) entities, I'm working with real model objects, and performing the persistance through my repositories.;However, when I'm displaying (selecting data and sending it to the views) I'm not working with model objects, but rather plain old value objects. I only select the fields I need, and it's designed so I can maximum my data lookup performance.;My repositories stay very clean, and instead this "mess" is organized into my model queries.;I use a data mapper to help with development, as it's just ridiculous to write repetitive SQL for common tasks. However, you absolutely can write SQL where needed (complicated queries, reporting, etc.). And when you do, it's nicely tucked away into a properly named class.;I'd love to hear your take on my approach!;July 2015 Update;I've been asked in the comments where I ended up with all this. Well, not that far off actually. Truthfully, I still don't really like repositories. I find them overkill for basic lookups (especially if you're already using an ORM), and messy when working with more complicated queries.;I generally work with an ActiveRecord style ORM, so most often I'll just reference those models directly throughout my application. However, in situations where I have more complex queries, I'll use query objects to make these more reusable. I should also note that I always inject my models into my methods, making them easier to mock in my tests.   
CONTENT;
        $answer->question_id = 216;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The ugly, lazy and awful way: At the end of bootstrap/start.php, add an include('tools.php') and place your function in that new file.;The clean way: Create a library. That way it'll be autoloaded ONLY when you actually use it.;Create a libraries folder inside your app folder;Create your library file, create a class in it, and add static functions to it;Option 1: Edit start/global.php to add app_path().'/libraries' to the ClassLoader::addDirectories(array.;Option 2: Edit composer.json to add "app/libraries" to the autoload array. Run composer dump-autoload;Call your class and static functions from your views.;About your options, quoted from the global.php file;In addition to using Composer, you may use the Laravel class loader to;load your controllers and models. This is useful for keeping all of;your classes in the "global" namespace without Composer updating.;You can combine both options, where the Laravel class loader will automatically search for classes in the registered directories (Option 1, easier) and Composer will keep record of all the classes but only after you update it (Option 2, might improve performance).  
CONTENT;
        $answer->question_id = 217;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        To output to the screen the last queries ran you can use this;dd(DB::getQueryLog());I believe the most recent queries will be at the bottom of the array.;You will have something like that;array(1);[0]=>;array(3);["query"]=>;string(21) "select * from "users";["bindings"]=>;array(0);["time"]=>;string(4) "0.92";As per Joshua's comment below, this is turned off by default now. To use, you'll need to enable it manually using;DB::enableQueryLog()    
CONTENT;
        $answer->question_id = 218;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Create a helpers.php file in your app folder and load it up with composer;autoload;classmap": [...;psr-4";App\\": "app/;files;app/helpers.php" // <---- ADD THIS;After adding that to your composer.json file, run the following command;composer dump-autoload 
CONTENT;
        $answer->question_id = 219;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can use: Request::url() to obtain the current URL, here is an example;@if(Request::url() === 'your url here');// code;@endif;Laravel offers a method to find out, whether the URL matches a pattern or not;if (Request::is('admin/*'));// code;Check the related documentation to obtain different request information: http://laravel.com/docs/requests#request-information    
CONTENT;
        $answer->question_id = 220;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Make use of Advanced Where Clauses (Laravel 5.2). For your example, it'd be something like this;Model::where(function ($query);$query->where('a', '=', 1);->orWhere('b', '=', 1);->where(function ($query);$query->where('c', '=', 1);->orWhere('d', '=', 1)    
CONTENT;
        $answer->question_id = 221;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The safer option would be to change the group of the storage directories to your web servers group (usually apache or www-data, but this can vary between the different operating systems) and keep the permissions as of the directory as 775.;chgrp -R www-data app/storage;Or with chown.;chown -R:www-data app/storage;Then make sure directory permissions are 775.;chmod -R 775 app/storage;From the Laravel web site;Laravel may require one set of permissions to be configured: folders;within app/storage require write access by the web server. 
CONTENT;
        $answer->question_id = 222;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Laravel's Autoload is a bit different;1) It will in fact use Composer for some stuff;2) It will call Composer with the optimize flag;3) It will 'recompile' loads of files creating the huge bootstrap/compiled.php;4) And also will find all of your Workbench packages and composer dump-autoload them, one by one.   
CONTENT;
        $answer->question_id = 223;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Keep in mind you're asking for opinions:D;Here's mine;TL,DR: Yes, that's fine.;You're doing fine!;I do exactly what you are doing often and find it works great.;I often, however, organize repositories around business logic instead of having a repo-per-table. This is useful as it's a point of view centered around how your application should solve your "business problem".;A Course is a "entity", with attributes (title, id, etc) and even other entities (Assignments, which have their own attributes and possibly entities).;Your "Course" repository should be able to return a Course and the Courses' attributes/Assignments (including Assignment).;You can accomplish that with Eloquent, luckily.;(I often end up with a repository per table, but some repositories are used much more than others, and so have many more methods. Your "courses" repository may be much more full-featured than your Assignments repository, for instance, if your application centers more around Courses and less about a Courses' collection of Assignments).;The tricky part;I often use repositories inside of my repositories in order to do some database actions.;Any repository which implements Eloquent in order to handle data will likely return Eloquent models. In that light, it's fine if your Course model uses built-in relationships in order to retrieve or save Assignments (or any other use case). Our "implementation" is built around Eloquent.;From a practical point of view, this makes sense. We're unlikely to change data sources to something Eloquent can't handle (to a non-sql data source).;ORMS;The trickiest part of this setup, for me at least, is determing if Eloquent is actually helping or harming us. ORMs are a tricky subject, because while they help us greatly from a practical point of view, they also couple your "business logic entities" code with the code doing the data retrieval.;This sort of muddles up whether your repository's responsibility is actually for handling data or handling the retrieval / update of entities (business domain entities).;Furthermore, they act as the very objects you pass to your views. If you later have to get away from using Eloquent models in a repository, you'll need to make sure the variables passed to your views behave in the same way or have the same methods available, otherwise changing your data sources will roll into changing your views, and you've (partially) lost the purpose of abstracting your logic out to repositories in the first place - the maintainability of your project goes down as.;Anyway, these are somewhat incomplete thoughts. They are, as stated, merely my opinion, which happens to be the result of reading Domain Driven Design and watching videos like "uncle bob's" keynote at Ruby Midwest within the last year.   
CONTENT;
        $answer->question_id = 224;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you are using post as a model (without dependency injection), you can also do;$posts = Post::orderBy('id', 'DESC')->get()    
CONTENT;
        $answer->question_id = 225;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It is discouraged to do in a view so there is no blade tag for it.;If you do want to do this in your blade view, you can either just open a php tag as you wrote it or register a new blade tag. Just an example;<?php;/**;*;* {? $old_section = "whatever"?};*;*/;Blade::extend(function($value);return preg_replace('/\{\?(.+)\?\}/', ' ', $value)    
CONTENT;
        $answer->question_id = 226;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Simply invoke orderBy() as many times as you need it. For instance;User::orderBy('name', 'DESC');->orderBy('email', 'ASC');->get();Produces the following query;SELECT * FROM `users` ORDER BY `name` DESC, `email` ASC 
CONTENT;
        $answer->question_id = 227;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        To put this folder on the PATH environment variable type;export PATH="$PATH:$HOME/.composer/vendor/bin;This appends the folder to your existing PATH, however, it is only active for your current terminal session.;If you want it to be automatically set, it depends on the shell you are using. For bash you can append this line to $HOME/.bashrc using your favourite editor or type the following on the shell;echo 'export PATH="$PATH:$HOME/.composer/vendor/bin"' >> ~/.bashrc;In order to check if it worked, logout and login again or execute;source ~/.bashrc;on the shell.;PS: For other systems where there is no ~/.bashrc, you can also put this into ~/.bash_profile  
CONTENT;
        $answer->question_id = 228;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        They are very similar so it is not surprising that it's a bit confusing. The summary is that PSR-0 had some backwards compatibility features for PEAR-style classnames that PSR-4 dropped, as such it only supports namespaced code. On top of that PSR-4 does not force you to have the whole namespace as a directory structure, but only the part following the anchor point.;For example if you define that the Acme\Foo\ namespace is anchored in src/, with PSR-0 it means it will look for Acme\Foo\Bar in src/Acme/Foo/Bar.php while in PSR-4 it will look for it in src/Bar.php, allowing for shorter directory structures. On the other hand some prefer to have the full directory structure to clearly see what is in which namespace, so you can also say that Acme\Foo\ is in src/Acme/Foo with PSR-4 which will gives you the equivalent of the PSR-0 behavior described above.;Long story short for new projects and for most intents and purposes, you can use PSR-4 and forget all about PSR-0.   
CONTENT;
        $answer->question_id = 229;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Ah found it.;Its apparently documented Laravel Update.;You can check Laravel docs to fix your issues;First, add a new, nullable remember_token of VARCHAR(100), TEXT, or equivalent to your users table.;Next, if you are using the Eloquent authentication driver, update your User class with the following three methods;public function getRememberToken();return $this->remember_token;public function setRememberToken($value);$this->remember_token = $value;public function getRememberTokenName();return 'remember_token;See http://laravel.com/docs/upgrade for further details.  
CONTENT;
        $answer->question_id = 230;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you instantiated the $team variable outside of the function, then it's not in the functions scope. I think you need to use the use keyword.;$team = Team::find($id);Mail::send('emails.report', $data, function($m) use ($team);$m->to($team->senior->email, $team->senior->first_name. ' '. $team->senior->last_name);$m->cc($team->junior->email, $team->junior->first_name. ' '. $team->junior->last_name);$m->subject('Monthly Report');$m->from('info@website.com', 'Sender')   
CONTENT;
        $answer->question_id = 231;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Maybe you've already solved this issue. But I'm noticing that for some reason a rollback often requires you to run composer dumpautoload first. Even if your migration works.   
CONTENT;
        $answer->question_id = 232;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        For Laravel 5 (updated answer);Simply put;On auth middleware;// redirect the user to "/login;// and stores the url being accessed on session;if (Auth::guest());return redirect()->guest('login');return $next($request);On login action;// redirect the user back to the intended page;// or defaultpage if there isn't one;if (Auth::attempt(['email' => $email, 'password' => $password]));return redirect()->intended('defaultpage');For Laravel 4 (old answer);At the time of this answer there was no official support from the framework itself. Nowadays you can use the method pointed out by bgdrl below this method: (I've tried updating his answer, but it seems he won't accept);On auth filter;// redirect the user to "/login;// and stores the url being accessed on session;Route::filter('auth', function();if (Auth::guest());return Redirect::guest('login');On login action;// redirect the user back to the intended page;// or defaultpage if there isn't one;if (Auth::attempt(['email' => $email, 'password' => $password]));return Redirect::intended('defaultpage');For Laravel 3 (even older answer);You could implement it like this;Route::filter('auth', function();// If there's no user authenticated session;if (Auth::guest());// Stores current url on session and redirect to login page;Session::put('redirect', URL::full());return Redirect::to('/login');if ($redirect = Session::get('redirect'));Session::forget('redirect');return Redirect::to($redirect);// on controller;public function get_login();$this->layout->nest('content', 'auth.login');public function post_login();$credentials =;username' => Input::get('email');password' => Input::get('password');if (Auth::attempt($credentials));return Redirect::to('logged_in_homepage_here');return Redirect::to('login')->with_input();Storing the redirection on Session has the benefit of persisting it even if the user miss typed his credentials or he doesn't have an account and has to signup.;This also allows for anything else besides Auth to set a redirect on session and it will work magically. 
CONTENT;
        $answer->question_id = 233;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Since June 2014 you can pass an array to where;As long as you want all the wheres use and operator, you can group them this way;$matchThese = ['field' => 'value', 'another_field' => 'another_value',...];// if you need another group of wheres as an alternative;$orThose = ['yet_another_field' => 'yet_another_value',...];Then;$results = User::where($matchThese)->get();// with another group;$results = User::where($matchThese);->orWhere($orThose);->get();The above will result in such query;SELECT * FROM users;WHERE (field = value AND another_field = another_value AND...);OR (yet_another_field = yet_another_value AND...)  
CONTENT;
        $answer->question_id = 234;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can actually do this within the query.;$results = Project::orderBy('name')->get();This will return all results with the proper order.   
CONTENT;
        $answer->question_id = 235;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The problem is caused by the fact that the Model 's toArray() method ignores any accessors which do not directly relate to a column in the underlying table.;As Taylor Otwell mentioned here, "This is intentional and for performance reasons." However there is an easy way to achieve this;class EventSession extends Eloquent;protected $table = 'sessions;protected $appends = array('availability');public function getAvailabilityAttribute();return $this->calculateAvailability();Any attributes listed in the $appends property will automatically be included in the array or JSON form of the model, provided that you've added the appropriate accessor.;Old answer (for Laravel versions upper;return $array;public function getUpperAttribute();return strtoupper($this->title);or, if you have lots of custom accessors, loop through them all and apply them;class Book extends Eloquent;protected $table = 'books;public function toArray();$array = parent::toArray();foreach ($this->getMutatedAttributes() as $key);if (! array_key_exists($key, $array));$array[$key] = $this->{$key};return $array;public function getUpperAttribute();return strtoupper($this->title)   
CONTENT;
        $answer->question_id = 236;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        When using ->get() you cannot simply use any of the below;if (empty($result)) { };if (!$result) { };if ($result) { };Because if you dd($result), you'll notice an instance of Illuminate\Support\Collection is always returned, even when there are no results. Essentially what your checking is $a = new stdClass, if ($a) {... } which will always return true.;To determine if there are any results you can do any of the following;if ($result->first()) { };if (!$result->isEmpty()) { };if ($result->count()) { };if (count($result)) { };You could also use ->first() instead of ->get() on the query builder which will return an instance of the first found model, or null otherwise. This is useful if you need or are expecting only one result from the database.;$result = Model::where(...)->first();if ($result) {... };Notes / References;->first() http://laravel.com/api/4.2/Illuminate/Database/Eloquent/Collection.html#method_first;isEmpty() http://laravel.com/api/4.2/Illuminate/Database/Eloquent/Collection.html#method_isEmpty;->count() http://laravel.com/api/4.2/Illuminate/Database/Eloquent/Collection.html#method_count;count($result) works because the Collection implements Countable and an internal count() method: http://laravel.com/api/4.2/Illuminate/Database/Eloquent/Collection.html#method_count;Bonus Information;The Collection and the Query Builder differences can be a bit confusing to newcomers of Laravel because the method names are often the same between the two. For that reason it can be confusing to know what one you’re working on. The Query Builder essentially builds a query until you call a method where it will execute the query and hit the database (e.g. when you call certain methods like ->all() ->first() ->lists() and others). Those methods also exist on the Collection object, which can get returned from the Query Builder if there are multiple results. If your not sure what class your actually working with, try doing var_dump(User::all()) and experimenting to see what classes it's actually returning (with help of get_class(...)). I highly recommend you check out the source code for the Collection class, it's a pretty simple. Then check out the Query Builder and see the similarities in function names and find out when it actually hits the database.;Laravel 5.2 Collection Class;Laravel 5.2 Query Builder  
CONTENT;
        $answer->question_id = 237;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you really wanted to, you could do all the work that Composer does manually, but you definitely should not. Installing Composer is easy, it's just a matter of getting the composer.phar file and running commands on it.;You do not need to run Composer on your server as well as locally, once you run composer install or composer update your project will have all it's dependencies available and you can just upload it straight to your server. 
CONTENT;
        $answer->question_id = 238;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        After save, $data->id should be the last id inserted.;return Response::json(array('success' => true, 'last_insert_id' => $data->id), 200)   
CONTENT;
        $answer->question_id = 239;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If the migration has been run (read: migrated) then you should roll back your migration to clear the history from your database table. Once you're rolled back you should be able to safely delete your migration file and then proceed with migrating again.   
CONTENT;
        $answer->question_id = 240;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Create a Game model which extends Eloquent and use this;Game::take(30)->skip(30)->get();take() here will get 30 records and skip() here will offset to 30 records.;In recent Laravel versions you can also use;Game::limit(30)->offset(30)->get()   
CONTENT;
        $answer->question_id = 241;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Update (5.2);With the latest version of Lumen (5.2) the Microframework focuses on Stateless APIs.;The documentation states;Lumen 5.2 represents a shift on slimming Lumen to focus solely on serving stateless, JSON APIs. As such, sessions and views are no longer included with the framework. If you need access to these features, you should use the full Laravel framework.;Original answer (withFacades();The same goes for Dotenv environment files and Eloquent.;For routing Lumen uses nikic/FastRoute instead of symfonys router because it performs a lot better and gives the micro-framework another big boost.;Other than that pretty much everything is the same as in Laravel.;Good reads on Lumen;Documentation (especially the introduction);Article from Matt Stauffer;Interview with Taylor Otwell (especially the last question);Reddit discussion;Laracast: Introducing Lumen   
CONTENT;
        $answer->question_id = 242;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        As Laravel 5 is already final release, to install it, you should run;composer create-project laravel/laravel test-laravel-5-project --prefer-dist;in your console. test-laravel-5-project is the name of your project you can call it anyway you want - for example myblog, myapp etc. Laravel files will be put inside this directory;You can also use alternative method using;composer global require "laravel/installer=~1.1";and then running;laravel new test-laravel-5-project;For detailed info you should look at official Laravel installation notes;The below answer is being kept only for historical reasons and it was valid when Laravel 5 still was in its development stages. You should now only use the method mentioned above;I've just tested this and there are two ways of installing Laravel 5;One-step method;You just run;composer create-project laravel/laravel test-laravel-5-project dev-develop --prefer-dist;and composer will create the whole directory structure. In above command test-laravel-5-project is your project name - you can of course name it as you want (composer will create directory with this name and put all Laravel5 files inside this directory);Multi-step method;Download https://github.com/laravel/laravel/tree/develop with option Download ZIP;Unpack it in web directory;Run composer update (not composer install) in directory where you unpacked your ZIP file;Using both methods when you run URL for your project in the browser (for example http://localhost/projects/test-laravel-5-project/public depending on your webserver settings) you will get standard Laravel website You have arrived.;Both methods should work well. Give either one a try, whichever works best for you.   
CONTENT;
        $answer->question_id = 243;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You need to put SongsTableSeeder into file SongsTableSeeder.php in the same directory where you have your DatabaseSeeder.php file.;And you need to run in your console;composer dump-autoload;to generate new class map and then run;php artisan db:seed;I've just tested it. It is working without a problem in Laravel 5  
CONTENT;
        $answer->question_id = 244;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Just add a route to that method separately, before you register the resource;Route::get('foo/bar', 'FooController@bar');Route::resource('foo', 'FooController') 
CONTENT;
        $answer->question_id = 245;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Put your assets in the public folder;public/css;public/images;public/fonts;public/js;And them called it using Laravel;{{ HTML::script('js/scrollTo.js'), }};{{ HTML::style('css/css.css'), }}   
CONTENT;
        $answer->question_id = 246;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Apache;Does this answer describe or help your situation? Upgrading to Apache 2.4 come with some changes in Apache configuration.;Laravel;Are you checking Laravel's logs or Apache's logs?;Since upgrading to Laravel 4.1, I've had white screen "errors" (WSOD) when the application could not write to the log location. I've always solved this by making the app/storage directory writable by Apache (either group writable to "www-data" or world-writable - that depends on your server setup.;Laravel 4;# Group Writable (Group, User Writable);$ sudo chmod -R gu+w app/storage;# World-writable (Group, User, Other Writable);$ sudo chmod -R guo+w app/storage;Laravel 5;# Group Writable (Group, User Writable);$ sudo chmod -R gu+w storage;# World-writable (Group, User, Other Writable);$ sudo chmod -R guo+w storage   
CONTENT;
        $answer->question_id = 247;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You're able to do database finds using LIKE with this syntax;Model::where('column', 'LIKE', '%value%')->get()   
CONTENT;
        $answer->question_id = 248;
        $answer->user_id = $user_id;
        $answer->save();

        

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        DS.Model.reopen;reloadLink: function (linkKey);if ($.isArray(linkKey));var promises = [];for (var i = 0, i < linkKey.length, i++);promises.push(this.reloadLink(linkKey[i]));return Em.RSVP.all(promises);else;var rel = this._relationships[linkKey];if (rel);if (rel.reload);return rel.reload();else if (rel.fetchLink);return rel.fetchLink();Example;model: function ();var model = this.modelFor('_some_model_');return model.reloadLink(['link1', 'link2']).then(function ();return model    
CONTENT;
        $answer->question_id = 2;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        The problem is with the timing of addItem -- you need to wait for the animation to end before beginning the process of adding the new item.;Working fiddle: http://jsfiddle.net/bPP5Q/26/;jQuery(function ($);// this runs after the window loads;var ViewModel = function (data);var self = this;self.data = ko.observableArray(data);self.removeLine = function (elem);if (elem.nodeType === 1) $(elem).fadeOut(3000, function ();$(elem).remove();self.addItem();self.addLine = function (elem);if (elem.nodeType === 1);$(elem).hide().fadeIn(3000);self.removeItem = function();self.data.remove(function(item) { return item.test &&& item.test == 2;self.addItem = function();self.data.splice(1, 0, { test: 9 });self.addremove = function ();self.removeItem();var vm = new ViewModel;test: 9;test: 2;test: 1;test: 1;test: 1;test: 1;test: 1;ko.applyBindings(vm) 
CONTENT;
        $answer->question_id = 3;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        When using ApplicationSerializer which extends LSSerializer, it seems to work.;Maybe it got fixed since asked?  
CONTENT;
        $answer->question_id = 4;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        As far as I can see, there are three ways to put content on the screen when using cordova/phonegap;Make an ajax call to a template file and then $(div).append;Have it all included in index.html and show/hide;Have the content inline in js files and $(content).appendTo(div);I've been playing around seeing if any has advantages and here's what I've (in my limited tests) found out;At first load, templates have the smallest memory footprint, followed by inline js and included in the index.html the highest.;But, after navigating around the app for a while, this changes and they all balance out to roughly the same (between 1.8 and 2.1 MB in my tests).;For speed, index.html is fastest, followed by inline js and templates is slowest. However, the difference is negligible, tens of milliseconds worth.;I honestly don't see any real difference between the methods, except for the fact that templates don't seem to work on Windows Phone (maybe that will change with 10, don't know). I guess it's more of a coding style thing rather than a hard and fast rule. Although input from cordova/phonegap devs would be nice.   
CONTENT;
        $answer->question_id = 8;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Maybe you could try using the html5 tag, attaching your phone's camera video stream as source of the video using getUserMedia like this, and then capturing images from video stream with some delay for a limited number of times (or even prompt the user that they're recording too long after you reach a certain number of frames). Try skimming this and see if it solves your problem.   
CONTENT;
        $answer->question_id = 9;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I think you are redirected before your javascript gets executed, so try this way?;JavaScript Code;function closeSession();IN.User.logout();location.href="logout.php;HTML Code;Logout In LinkedIn   
CONTENT;
        $answer->question_id = 10;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Canvas is (as far as i know) software accelerated. So it's rendered by the processor (CPU). The processor (cause of them pixels) ain't that good at graphical stuff but for simple things it would be enough. And it runs everywhere, where there is a processor.;If you want to have better performance on hardware accelerated devices which most modern smartphones are, you need webgl. But you can export your stuff in webgl from adobe CC. Older smartphones are not very optimized on hardware acceleration so please check with your target group what devices they have and try to run your app on one of the slowest devices.;I would not use SVG. SVG is even worse than DOM. You can be faster manipulating HTML in javascript than SVG. I don't know why but it is damn slow. SVG is just an alternative if you want to have scalable graphics or charts and that's what it is made for. To animate in SVG is a pain. Don't do it. It is not optimized for animation.;CSS-Transform is a prototype-like and will not help you with keyframe animation. But it has potential to have an eye on it.;Does this help you? 
CONTENT;
        $answer->question_id = 12;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you only want to share your calendar, you can make it public and then sharing your calendar to everybody. This is how.;To make your calendar public you can follow the steps of this website https://support.google.com/calendar/answer/37083?hl=en.;Make your calendar public;On a computer, open Google Calendar.;In the top right, click Settings settings gear button > Settings.;Open the Calendars tab.;Click the name of the calendar you want to share.;Open the Share this Calendar tab.;Check the option Make this calendar public.;If don't want other people to view the details of your events, select See only free/busy (hide details).;Click Save.;and then you can share you calendar with an iframe within you calendar options.;https://support.google.com/calendar/answer/41207?hl=en;Embed a calendar on your website;On a computer, open Google Calendar. You can only get the code to embed in your website from a computer, not the mobile app.;In the top right, click Settings settings gear button > Settings.;Open the Calendars tab.;Click the name of the calendar you want to embed.;In the Embed This Calendar section, copy the iframe code displayed.;Open your website editor, then paste this code where you want the calendar to display.   
CONTENT;
        $answer->question_id = 13;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        drawCallback": function (settings);var api = this.api(),data;var rows = api.rows({page:'current'}).nodes();var last=null;// Remove the formatting to get integer data for summation;var intVal = function (i);return typeof i === 'string'?;i.replace(/[\$,]/g, '')*1;typeof i === 'number'?;i: 0;total=new Array();api.column(2, {page:'current'}).data().each(function (group, i);group_assoc=group.replace(' ',"_");if(typeof total[group_assoc] != 'undefined');total[group_assoc]=total[group_assoc]+intVal(api.column(5).data()[i]);else;total[group_assoc]=intVal(api.column(5).data()[i]);if (last !== group);$(rows).eq(i).before;+group+' ;last = group;for(var key in total);$("."+key).html("$"+total[key]) 
CONTENT;
        $answer->question_id = 14;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Comments are stripped out but there are exceptions. IE conditional comments are preserved so you could make a request there or write a pull request and see if it gets accepted. Here is the repo;https://github.com/digisfera/useref   
CONTENT;
        $answer->question_id = 15;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Have a look at the dragstart and dragend events. myDragElm is the element being dragged.;EventUtil.addHandler(myDragElm, 'dragstart', function(e);e.dataTransfer.setData(format, 'Dragme');e.dataTransfer.effectAllowed = effect;var target = EventUtil.getCurrentTarget(e);target.style.backgroundColor = 'green;// You can do this.Also you can use a css class to do this.;target.style.cursor = 'move;return true;Please do not forget to reset the cursor when dragging ends;EventUtil.addHandler(myDragElm, 'dragend', function(e);var target = EventUtil.getCurrentTarget(e);target.style.backgroundColor = ';target.style.cursor = 'default', // Reset cursor;return true   
CONTENT;
        $answer->question_id = 18;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you are using grunt with grunt-karma I wrote this task that does what you want.  
CONTENT;
        $answer->question_id = 19;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I also think that popup behavior is probably high on the list of suspects (specifically the window.close(), line seems pretty suspicious especially if the popup is blocked by the user).;However, since the ultimate goal is to download the file, you could try changing the response headers to;Content-Disposition: attachment, filename="pp66.26.pdf;Content-Length: 31706;Content-Type: applicaton/octet-stream;or you could try forcing all pdfs in a particular folder to force a download via.htaccess file, then just linking to them via the location.href you are using;ForceType applicaton/octet-stream;Header set Content-Disposition attachment 
CONTENT;
        $answer->question_id = 20;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        There some odd bugs with touch events in older WebKit versions. Take a look at this bug reports: 5491, 19827, 4549, 150779.;The trick is to add e.preventDefault() in touchstart event handler. This is required because of the way native scrolling is handled by the browser.;android-swipe-shim project provides another solution and some more info;On some Android devices when the user touches the screen a touchstart event is fired, Android passes the event to WebView (javascript) to be handled. If WebView does not preventdefault (within 200ms), Android resumes native scrolling and stops passing touch events to WebView.;The solution to this has mostly been to preventDefault on touchstart and manually scroll using javascript.;This behavior is embedded in millions of Android devices and cannot be corrected at its source.;This shim provides a solution by overlaying a contained element that can be natively scrolled and fires swipe events based on its scroll offsets, allowing your software to handle move events with native scrolling enabled.   
CONTENT;
        $answer->question_id = 22;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Maybe I'm thinking too simple, but I think of it like this;project1 is a project;project2 is a project;intern_tests is a project;To achieve what you want to achieve;cd /path/to/project1/;npm link;cd /path/to/project2/;npm link;cd /path/to/intern_tests/;npm install project1 project2;You now have a project structure like so;intern_tests/;node_modules/;project1;project2;tests/;unit/;functional/  
CONTENT;
        $answer->question_id = 26;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you always want to get the ga event then the hitCallback is likely the only way to go until whatever is wrong with Safari is fixed. I use a similar pattern to send a GA event from a page in an app which is just a redirect after a whole load of database stuff has been executed in rails. There is no noticeable lag from adding the javascript redirect into the callback. However I am not sure how to initiate the download from javascript off the top of my head.;ga('send','event','Download','MexmlSample','MexmlSample-1.0';hitCallback: function();initiateDownload();I am not aware of any need to use the setTimeout() for pattern in this instance. 
CONTENT;
        $answer->question_id = 27;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I've reproduced this with Chrome 49 and JQuery 1.11, not in FF and not in Internet Explorer.;However, I believe this to be an artifact of the code as well. The only divs that show this problem are div1 and overflow1, which both use the same system of setting the width to the computed width, repeatedly. What happens is that for some zooms the computed value is 201. You set the width to 201, so for some zooms the computed value becomes 202 and so on. I got 204, for example.;In the Chrome debugger, at zoom 67%, the reported width appears as 199.981, but the values available to Javascript are integers. scrollWidth is 199 while clientWidth and offsetWidth are 200. All of the jQuery width methods return 200 (width, innerWidth, outerWidth). At zoom 33%, scrollWidth and jQuery widths all return 201, althought the debugger reported width is still 199.981.;My assertion is that the problem is a bug in Chrome and probably related to rounding.;As described here: Getting the actual, floating-point width of an element you can get the actual floating point value reported by the debugger with.getBoundingClientRect(). If you want to be completely safe, try using that one.    
CONTENT;
        $answer->question_id = 28;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I came here with the same need and ultimately found a solution for what I'm working on. Maybe it helps;For SVG paths, within the clipTo function you can modify the ctx directly prior to calling render(ctx) and these changes apply outside the clipped path o. Like so;var clipPath = new fabric.Path("M 10 10 L 100 10 L 100 100 L 10 100";fill: 'rgba(0,0,0,0);var backgroundColor = "rgba(0,0,0, 0.2);var opts =;controlsAboveOverlay: true;backgroundColor: 'rgb(255,255,255);clipTo: function (ctx);if (typeof backgroundColor !== 'undefined');ctx.fillStyle = backgroundColor;ctx.fillRect(0, 0, 300, 150);clipPath.render(ctx);var canvas = new fabric.Canvas('c', opts);canvas.add(new fabric.Rect;width: 50;height: 50;left: 30;top: 30;fill: 'rgb(255,0,0);You can of course add an image instead of a color, or whatever else you want done. The trick I've found is to put it in the clipTo function on the ctx directly.;here's a fiddle   
CONTENT;
        $answer->question_id = 31;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Maybe if you create the proper elements and building a DOM segment before appending it to the document.;Not sure it would work, can't test it here, but here goes my try adapting your code.;$(function();// Bind an event to window.onhashchange that, when the hash changes, gets the;// hash and adds the class "selected" to any matching nav link.;$(window).hashchange(function();alert("Hash changed to:"+location.hash);var hash = location.hash;// Set the page title based on the hash.;document.title = 'The hash is ' + (hash.replace(/^#/, '') || 'blank') + '.;//simulate body being rendered by ajax callback;if(hash == "");$("body").html;$(;).id("nav").append($(" ").attr("href","#test1").text("teste 1")).append($(" ").attr("href","#test2").text("test 2")).append($(" ").attr("href","#test3").text("test 3"));else;$("body").text("Right click within this pane and select \"Back\".");// Since the event is only triggered when the hash changes, we need to trigger;// the event now, to handle the hash the page may have loaded with.;$(window).hashchange()   
CONTENT;
        $answer->question_id = 33;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Your problem is not with XMLHttpRequest, but with delay (sync delay, maybe bug in WebKit/Blink);See example (http://jsfiddle.net/23JNw/32/ sandbox in Snippet don't allow pop-ups);function performSlowSyncronousRequest();var endsIn, initial;delay = 5000;endsIn = new Date().getTime() + delay;for (, endsIn >= new Date().getTime(),) {}//Delay;window.open('http://www.thirtykingdoms.com');Test case;Note: that sjax (XMLHttpRequest sync) is considered obsolete by some browsers is very bad for the user experience.;I tried simulate click, but not work;function clickFire(evt);var el, evtFake, pos;el = document.createElement("a");el.href = "javascript:void(0),;el.innerHTML = "test;el.onclick = evt;document.body.appendChild(el);pos = el.getBoundingClientRect();evtFake = new MouseEvent("click;bubbles: false;cancelable: false;view: window;detail: 0;screenX: window.screenX;screenY: window.screenY;clientX: pos.left + 1;clientY: pos.top + 1;ctrlKey: false;shiftKey: false;altKey: false;metaKey: false;button: 1;buttons: 0;relatedTarget: el;el.dispatchEvent(evtFake);window.setTimeout(function();document.body.removeChild(el);1);window.setTimeout(function();clickFire(function();window.open("http://stackoverflow.com");1000);Note: The web browsers are very smart today and we will hardly get cheat them.;Solution;Don't use pop-ups (I hate pop-ups:)), try simulate "pop-up" using: http://demos.jquerymobile.com/1.4.0/popup-iframe/;Or add um button using modal (like bootstrap) and and place a message asking the user clicks;times;New message;Open pop-up:);Cancel;Ok;window.setTimeout(function();$('#exampleModal').modal();2000);$("#popupIsNotPopular").click(function();window.open("http://www.stackoverflow.com")   
CONTENT;
        $answer->question_id = 35;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        In the file http://torontographic.com/wordpress/mouseSwipe/jquery.mouseSwipe.js onmousedown function has the code below. This will stop the event from the default behaviour and in cases stop captured/bubbled. You may want to look at these or the way event are being handled by the libraries.;e.preventDefault();Here is more on how to stop JQuery propagation and regular behaviour.;event.preventDefault() vs. return false;What is event bubbling and capturing   
CONTENT;
        $answer->question_id = 36;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can use a library such as Moment.js to do this.;See the String + Format parsing.;http://momentjs.com/docs/#/parsing/string-format/;The following should parse your date you provided, but you may need to modify it for your needs.;var dateString = "2013-07-18T17:00:00-05:00";var dateObject = moment(dateString, "YYYY-MM-DDTHH:mm:ssZ").toDate();Alternatively, see Moment's String parser, which looks like it is in the format you provided, with the exception of a space between the seconds of the time and the time zone.;http://momentjs.com/docs/#/parsing/string/ 
CONTENT;
        $answer->question_id = 38;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        What have worked very well for me is simulating mouse clicks on the desired element.;page.evaluate(function ();var btn = document.getElementById('LB_cmdCSV');var ev = document.createEvent('MouseEvent');ev.initEvent('click', true, true);btn.dispatchEvent(ev)   
CONTENT;
        $answer->question_id = 39;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If by overlapping you mean multiple links between two nodes then they can be resolved by drawing them as arcs with increasing curvature to separate them visually.;If by overlapping you mean edges crossing then it's only possible if your graph is planar - https://en.wikipedia.org/wiki/Planarity_testing - and looking at your graph it isn't - there's at least 2 sub-graphs with almost complete connectivity. You'd need a graph layout algorithm that specifically tries to reduce edge crossings, and the bad news on that is that it's an NP-complete problem;Crossing Number is NP-Complete: DOI:10.1137/0604033;https://en.wikipedia.org/wiki/Crossing_number_(graph_theory);Some techniques can be employed on complete sub-graphs by replacing their edge sets with confluent edges or motifs but this is stepping into graph drawing research: there's no easy answer;Confluent Drawings: Visualizing Non-planar Diagrams in a Planar Way;DOI: 10.1007/978-3-540-24595-7_1;Motif Simplification: Improving Network Visualization;Readability with Fan, Connector, and Clique Glyphs;DOI: 10.1145/2470654.2466444;In short, the only guaranteed way to not get edge crossings is not to draw edges. Maybe try looking at matrix-type visualisations for graphs? - https://bost.ocks.org/mike/miserables/    
CONTENT;
        $answer->question_id = 44;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If I were you, I'd set the callback to console.log(response) for success and failure... then I'd see what the difference was.;Also I'd look in the network tab to see what the response headers are.    
CONTENT;
        $answer->question_id = 45;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I'm sorry to disagree, but according to the rules for parsing a legacy color value posted by @Yuhong Bao, chucknorris DOES NOT equate to #CC0000, but rather to #C00000, a very similar but slightly different hue of red. I used the Firefox ColorZilla add-on to verify this.;The rules state;make the string a length that is a multiple of 3 by adding 0s: chucknorris0;separate the string into 3 equal length strings: chuc knor ris0;truncate each string to 2 characters: ch kn ri;keep the hex values, and add 0's where necessary: C0 00 00;I was able to use these rules to correctly interpret the following strings;LuckyCharms;Luck;LuckBeALady;LuckBeALadyTonight;GangnamStyle;Unfortunately I have not yet been able to determine why this doesn't seem to work for adamlevine which should be ADE0E0 but it's actually AD0E0E.;Edit;adamlevine does work as per http://jsfiddle.net/LdyZ8/2959/ but the letters are blocked into ada00e000e which is padded to ada00e000e00 but then reduced down to the typical HEX 6 digit value of [ad]a0[0e]00[0e]00 thus making ad0e0e which appears in the jsfiddle above.;UPDATE: The original answerers who said the color was #CC0000 have since edited their answers to include the correction.  
CONTENT;
        $answer->question_id = 46;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Neither.;If you can have an actual URL that makes sense use that as the HREF. The onclick won't fire if someone middle-clicks on your link to open a new tab or if they have JavaScript disabled.;If that is not possible, then you should at least inject the anchor tag into the document with JavaScript and the appropriate click event handlers.;I realize this isn't always possible, but in my opinion it should be striven for in developing any public website.;Check out Unobtrusive JavaScript and Progressive enhancement (both Wikipedia). 
CONTENT;
        $answer->question_id = 47;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        /* do not group these rules */;*::-webkit-input-placeholder;color: red;*:-moz-placeholder;/* FF 4-18 */;color: red;*::-moz-placeholder;/* FF 19+ */;color: red;*:-ms-input-placeholder;/* IE 10+ */;color: red;This will style all input and textarea placeholders.;Important Note: Do not group these rules. Instead, make a separate rule for every selector (one invalid selector in a group makes the whole group invalid). 
CONTENT;
        $answer->question_id = 48;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you don't want to set a fixed width on the inner div you could do something like this;#outer;width: 100%;text-align: center;#inner;display: inline-block;That makes the inner div into an inline element that can be centered with text-align.   
CONTENT;
        $answer->question_id = 49;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Default;The default behavior of the browser is equivalent to;table {border-collapse: collapse,};td {padding: 0px,};Cellpadding;Sets the amount of space between the contents of the cell and the cell wall;table {border-collapse: collapse,};td {padding: 6px,};Cellspacing;Controls the space between table cells;table {border-spacing: 2px,};td {padding: 0px,};Both;table {border-spacing: 2px,};td {padding: 6px,};Both (special);table {border-spacing: 8px 2px,};td {padding: 6px,};Note: If there is border-spacing set, it indicates border-collapse property of the table is separate.;Try it yourself!;Here you can find the old html way of achieving this.    
CONTENT;
        $answer->question_id = 50;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
    I've just finished developing the plugin and it is available for everyone to use! Hope you will enjoy it.;View Project on GitHub - View Project Website. (so you can see all the split styles);Usage;First of all, make sure you have the jQuery library is included. The best way to get the latest jQuery version is to update your head tag with;After downloading the files, make sure you include them in your project;Markup;All you have to do is to asign the class splitchar, followed by the desired style to the element wrapping your text. e.g;Splitchar;After all this is done, just make sure you call the jQuery function in your document ready file like this;$(".splitchar").splitchar();Customizing;In order to make the text look exactly as you want it to, all you have to do is apply your design like this:.horizontal { /* Base CSS - e.g font-size */ }.horizontal:before { /* CSS for the left half */ }.horizontal:after { /* CSS for the right half */ };That's it! Now you have the Splitchar plugin all set. More info about it at emisfera.github.io/Splitchar.    
CONTENT;
        $answer->question_id = 51;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You could also just do;document.getElementById('id').classList.add('class');document.getElementById('id').classList.remove('class');And to toggle a class (remove if exists else add it);document.getElementById('id').classList.toggle('class')    
CONTENT;
        $answer->question_id = 52;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        In Firefox 3 and Safari 3, you can use RGBA like Georg Schölly mentioned.;A little known trick is that you can use it in Internet Explorer as well using the gradient filter.;background-color: rgba(0, 255, 0, 0.5);filter: progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr='#7F00FF00', EndColorStr='#7F00FF00');The first hex number defines the alpha value of the color.;Full solution all browsers:.alpha60;/* Fallback for web browsers that doesn't support RGBa */;background: rgb(0, 0, 0) transparent;/* RGBa with 0.6 opacity */;background: rgba(0, 0, 0, 0.6);/* For IE 5.5 - 7*/;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);/* For IE 8*/;-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);This is from CSS background transparency without affecting child elements, through RGBa and filters.;Screenshots proof of results;This is when using the following code;An XHTML 1.0 Strict standard template;Here some content (text AND images) "on top of the transparent background    
CONTENT;
        $answer->question_id = 53;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        In addition to autocomplete=off, you could also have your form fields names be randomized by the code that generates the page, perhaps by adding some session-specific string to the end of the names. When the form is submitted, you can strip that part off before processing them on the server side. This would prevent the web browser from finding context for your field and also might help prevent XSRF attacks because an attacker wouldn't be able to guess the field names for a form submission.  
CONTENT;
        $answer->question_id = 54;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        While it is true that asking regexes to parse arbitrary HTML is like asking Mr. Bean to write an operating system, it's sometimes appropriate to parse a limited, known set of HTML.;If you have a small set of HTML pages that you want to scrape data from and then stuff into a database, regexes might work fine. For example, I recently wanted to get the names, parties, and districts of Australian federal Representatives, which I got off of the Parliament's web site. This was a limited, one-time job.;Regexes worked just fine for me, and were very fast to set up.;share   55
        288 In CSS...;textarea;resize: none 
CONTENT;
        $answer->question_id = 56;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        From the HTML 4 specification;ID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), and periods (".").;A common mistake is to use an ID that starts with a digit.    
CONTENT;
        $answer->question_id = 57;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you're using Bootstrap, it has an "unstyled" class;Remove the default list-style and left padding on list items (immediate children only).;Bootstrap 2:...;Bootstrap 3:...;http://twitter.github.io/bootstrap/base-css.html#typography   
CONTENT;
        $answer->question_id = 58;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Sometimes vertical-align needs two inline (span, label, input, etc...) elements next to each other to work properly. The following checkboxes are properly vertically centered in IE, Safari, FF, and Chrome, even if the text size is very small or large.;They all float next to each other on the same line, but the nowrap means that the whole label text always stays next to the checkbox.;The downside is the extra meaningless SPAN tags.;Now, if you had a very long label text that needed to wrap without wrapping under the checkbox, you'd use padding and negative text indent on the label elements:.checkboxes label;display: block;float: left;padding-right: 10px;padding-left: 22px;text-indent: -22px  
CONTENT;
        $answer->question_id = 59;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively.;window.history.pushState('page2', 'Title', '/page2.php');Read more about this from here   
CONTENT;
        $answer->question_id = 60;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I think this quote from the HTML 5 Reference Draft provides the answer;Some elements, however, are forbidden;from containing any content at all.;These are known as void elements. In;HTML, the above syntax cannot be used;for void elements. For such elements;the end tag must be omitted because;the element is automatically closed by;the parser. Such elements include;among others, br, hr, link and meta;HTML Example;In XHTML, the XML syntactic;requirements dictate that this must be;made explicit using either an explicit;end tag, as above, or the empty;element syntax. This is achieved by;inserting a slash at the end of the;start tag immediately before the right;angle bracket.;Example;Authors may optionally choose to use;this same syntax for void elements in;the HTML syntax as well. Some authors;also choose to include whitespace;before the slash, however this is not;necessary. (Using whitespace in that;fashion is a convention inherited from;the compatibility guidelines in XHTML;1.0, Appendix C.) 
CONTENT;
        $answer->question_id = 61;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You want a block element that has what CSS calls shrink-to-fit width and the spec does not provide a blessed way to get such a thing. In CSS2, shrink-to-fit is not a goal, but means to deal with a situation where browser "has to" get a width out of thin air. Those situations are;float;absolutely positioned element;inline-block element;table element;when there are no width specified. I heard they think of adding what you want in CSS3. For now, make do with one of the above.;The decision not to expose the feature directly may seem strange, but there is a good reason. It is expensive. Shrink-to-fit means formatting at least twice: you cannot start formatting an element until you know its width, and you cannot calculate the width w/o going through entire content. Plus, one does not need shrink-to-fit element as often as one may think. Why do you need extra div around your table? Maybe table caption is all you need.    
CONTENT;
        $answer->question_id = 62;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Just as a side note, will implicitly submit, which can cause problems if you want to use a button in a form without it submitting. Thus, another reason to use (or);Edit - more details;Without a type, button implicitly receives type of submit. It does not matter how many submit buttons or inputs there are in the form, any one of them which is explicitly or implicitly typed as submit, when clicked, will submit the form.;There are 3 supported types for a button;submit || "submits the form when clicked (default);reset || "resets the fields in the form when clicked;button || "clickable, but without any event handler until one is assigned    
CONTENT;
        $answer->question_id = 63;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        As of jQuery 1.4 you can pass attributes to a self-closed element like so;jQuery(';id: 'foo;href: 'http://google.com;title: 'Become a Googler;rel: 'external;text: 'Go to Google!;appendTo('#mySelector');Here it is in the Docs;Examples can be found at jQuery 1.4 Released: The 15 New Features you Must Know.   
CONTENT;
        $answer->question_id = 64;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        my solution;MOVE;jQuery("#NodesToMove").detach().appendTo('#DestinationContainerNode');COPY;jQuery("#NodesToMove").appendTo('#DestinationContainerNode');Note the usage of.detach(). When copying, be careful that you are not duplicating IDs. 
CONTENT;
        $answer->question_id = 65;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If you want to set the height of a or any element, you should set the height of and to 100% too. Then you can set the height of element with 100%:);Here is an example;body, html;height: 100%;#right;height: 100%  
CONTENT;
        $answer->question_id = 66;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Have a look at wkhtmltopdf. It is open source, based on webkit and free.;We wrote a small tutorial here.    
CONTENT;
        $answer->question_id = 67;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        There are half a dozen or so ways to format HTML in Sublime. I've tested each of the most popular plugins (see the writeup I did on my blog for full details), but here's a quick overview of some of the most popular options;Reindent command;Pros;Ships with Sublime, so no plugin install needed;Cons;Doesn't delete extra blank lines;Can't handle minified HTML, lines with multiple open tags;Doesn't properly format blocks;Tag;Pros;Supports ST2/ST3;Removes extra blank lines;No binary dependencies;Cons;Chokes on PHP tags;Doesn't handle blocks correctly;HTMLTidy;Pros;Handles PHP tags;Some settings to tweak formatting;Cons;Requires PHP (falls back to web service);ST2 only;Abandoned?;HTMLBeautify;Pros;Supports ST2/ST3;Simple and no binaray dependencies;Support for OS X, Win and Linux;Cons;Chokes a bit with inline comments;Does expand minimized/compressed code;HTML-CSS-JS Prettify;Pros;Supports ST2/ST3;Handles HTML, CSS, JS;Great integration with Sublime's menus;Highly customizable;Per-project settings;Format on save option;Cons;Requires Node.js;Not great for embedded PHP;Which is best?;HTML-CSS-JS Prettify is the winner in my book. Lots of great features, not much to complain about.  
CONTENT;
        $answer->question_id = 68;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Simply supplying the HTML of elements you want to add to a jQuery constructor $() will return a jQuery object from newly built HTML, suitable for being appended into the DOM using jQuery's append() method.;For example;var t = $(" ");$.append(t);You could then populate this table programmatically, if you wished.;This gives you the ability to specify any arbitrary HTML you like, including class names or other attributes, which you might find more concise than using createElement and then setting attributes like cellSpacing and className via JS.    
CONTENT;
        $answer->question_id = 69;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Another way (not mentioned here yet) is with Flexbox.;Just add the following code to the container element;display: flex;justify-content: center, /* align horizontal */;align-items: center, /* align vertical */;Flexbox demo 1.box;height: 150px;width: 400px;background: #000;font-size: 24px;font-style: oblique;color: #FFF;text-align: center;padding: 0 20px;margin: 20px;display: flex;justify-content: center;/* align horizontal */;align-items: center;/* align vertical */;Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh;Alternatively, instead of aligning the content via the container, flexbox can also center the a flex item with an auto margin when there is only one flex-item in the flex container (like the example given in the question above).;So to center the flex item both horizontally and vertically just set it with margin:auto;Flexbox Demo 2.box;height: 150px;width: 400px;background: #000;font-size: 24px;font-style: oblique;color: #FFF;text-align: center;padding: 0 20px;margin: 20px;display: flex;box span;margin: auto;margin:auto on a flex item centers it both horizontally and vertically;NB: All the above applies to centering items while laying them out in horizontal rows. This is also the default behavior, because by default the value for flex-direction is row. If, however flex-items need to be laid out in vertical columns, then flex-direction: column should be set on the container to set the main-axis as column and additionally the justify-content and align-items properties now work the other way around with justify-content: center centering vertically and align-items: center centering horizontally);flex-direction: column demo.box;height: 150px;width: 400px;background: #000;font-size: 18px;font-style: oblique;color: #FFF;display: flex;flex-direction: column;justify-content: center;/* vertically aligns items */;align-items: center;/* horizontally aligns items */;p;margin: 5px;When flex-direction is column...;justify-content: center" - vertically aligns;align-items: center" - horizontally aligns;A good place to start with Flexbox to see some of it's features and get syntax for maximum browser support is flexyboxes;Also, browser support nowadays is very good: caniuse;For cross-browser compatibility for display: flex and align-items, you can use the following;display: -webkit-box;display: -webkit-flex;display: -moz-box;display: -ms-flexbox;display: flex;-webkit-flex-align: center;-ms-flex-align: center;-webkit-align-items: center;align-items: center  
CONTENT;
        $answer->question_id = 70;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        To add to what Brad and squadette have said, the self-closing XML syntax actually is correct XML, but for it to work in practice, your web server also needs to send your documents as properly formed XML with an XML mimetype like application/xhtml+xml in the HTTP Content-Type header (and not as text/html).;However, sending an XML mimetype will cause your pages not to be parsed by IE7, which only likes text/html.;From w3;In summary, 'application/xhtml+xml;SHOULD be used for XHTML Family;documents, and the use of 'text/html;SHOULD be limited to HTML-compatible;XHTML 1.0 documents. 'application/xml;and 'text/xml' MAY also be used, but;whenever appropriate;application/xhtml+xml' SHOULD be used;rather than those generic XML media;types.;I puzzled over this a few months ago, and the only workable (compatible with FF3+ and IE7) solution was to use the old syntax with text/html (HTML syntax + HTML mimetype).;If your server sends the text/html type in its HTTP headers, even with otherwise properly formed XHTML documents, FF3+ will use its HTML rendering mode which means that will not work (this is a change, Firefox was previously less strict).;This will happen regardless of any fiddling with http-equiv meta tags, the XML prolog or doctype inside your document -- Firefox branches once it gets the text/html header, that determines whether the HTML or XML parser looks inside the document, and the HTML parser does not understand. 
CONTENT;
        $answer->question_id = 71;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I would use both meta, and JavaScript code and would have a link just in case. Also, I think it is a good idea to set the meta rate to 1 for occasional circumstances where the browser ignores 0 value meta refresh.;<!DOCTYPE HTML>;Page Redirection;If you are not redirected automatically, follow the link to example;For completeness, I think the best way, if possible, is to use server redirects, so send a 301 in the header. This is easy to do via.htaccess files using Apache, or via numerous plugins using WordPress. I am sure there are also plugins for all the major content management systems. Also, cPanel has very easy configuration for 301 redirects if you have that installed on your server.  
CONTENT;
        $answer->question_id = 72;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        For HTML Entities;◄ =;9668#;► =;9658#;▼ =;9660#;▲ =;9650#   
CONTENT;
        $answer->question_id = 73;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It's a black and white decision to me. If the image is part of the content such as a logo or diagram or person (real person, not stock photo people) then use the tag plus alt attribute. For everything else there's CSS background images.;The other time to use CSS background images is when doing image-replacement of text eg. paragraphs/headers.;share  74
        307 There really isn't a sound, cross-browser way to do this in CSS. Assuming your layout has complexities, you need to use JavaScript to set the element's height. The essence of what you need to do is;Element Height = Viewport height - element.offset.top - desired bottom margin;Once you can get this value and set the element's height, you need to attach event handlers to both the window onload and onresize so that you can fire your resize function.;Also, assuming your content could be larger than the viewport, you will need to set overflow-y to scroll. 
CONTENT;
        $answer->question_id = 75;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You can also use Google PDF viewer for this purpose. As far as I know it's not an official Google feature (am I wrong on this?), but it works for me very nicely and smoothly. You need to upload your PDF somewhere before and just use its URL;What is important is that it doesn't need a Flash player, it uses JavaScript.  
CONTENT;
        $answer->question_id = 76;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        It is possible, but unfortunately mostly in Webkit-based browsers to the extent we, as developers, require. Here is the example of CSS styling gathered from Chrome options panel via built-in developer tools inspector, improved to match currently supported CSS properties in most modern browsers;select;-webkit-appearance: button;-moz-appearance: button;-webkit-user-select: none;-moz-user-select: none;-webkit-padding-end: 20px;-moz-padding-end: 20px;-webkit-padding-start: 2px;-moz-padding-start: 2px;background-color: #F07575, /* fallback color if gradients are not supported */;background-image: url(../images/select-arrow.png), -webkit-linear-gradient(top, #E5E5E5, #F4F4F4), /* For Chrome and Safari */;background-image: url(../images/select-arrow.png), -moz-linear-gradient(top, #E5E5E5, #F4F4F4), /* For old Fx (3.6 to 15) */;background-image: url(../images/select-arrow.png), -ms-linear-gradient(top, #E5E5E5, #F4F4F4), /* For pre-releases of IE 10*/;background-image: url(../images/select-arrow.png), -o-linear-gradient(top, #E5E5E5, #F4F4F4), /* For old Opera (11.1 to 12.0) */;background-image: url(../images/select-arrow.png), linear-gradient(to bottom, #E5E5E5, #F4F4F4), /* Standard syntax, must be last */;background-position: center right;background-repeat: no-repeat;border: 1px solid #AAA;border-radius: 2px;box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);color: #555;font-size: inherit;margin: 0;overflow: hidden;padding-top: 2px;padding-bottom: 2px;text-overflow: ellipsis;white-space: nowrap;When you run this code on any page within a Webkit-based browser it should change the appearance of the select box, remove standard OS-arrow and add a PNG-arrow, put some spacing before and after the label, almost anything you want.;The most important part is appearance property, which changes how the element behaves.;It works perfectly in almost all Webkit-based browser, including mobile ones, though Gecko doesn't support appearance as well as Webkit, it seems.  
CONTENT;
        $answer->question_id = 77;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        If it's the visual appearance of a button you're looking for in a basic HTML anchor tag then you can use the Twitter Bootstrap framework to format any of the following common HTML type links/buttons to appear as a button. Please note the visual differences between version 2 and 3 of the framework;Link;Button;Bootstrap (v2) sample appearance;Bootstrap (v3) sample appearance;Visit the Bootstrap (v2) or Bootstrap (v3) Buttons section for some samples.    
CONTENT;
        $answer->question_id = 78;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        CSS is not HTML. &&nbsp;is a character entity reference in HTML, a stand-in for the character reference;160#. 160 is the decimal code point of the NO-BREAK SPACE character in Unicode (actually, UCS-2, see the HTML 4.01 Specification). The hexadecimal representation of that code point is U+00A0 (160 = 10 × 16 1 + 0 × 16 0). You will find that in the Unicode Code Charts and Character Database.;In CSS you need to use a Unicode escape sequence for such characters, which is based on the hexadecimal value of the code point of a character. So you need to write.breadcrumbs a:before;content: '>\a0';This works as long as the escape sequence comes last in a string value. If characters follow, there are two ways to avoid misinterpretation;a) (mentioned by others) Use exactly six hexadecimal digits for the escape sequence:.breadcrumbs a:before;content: '>\0000a0foo;b) Add one white-space (e. g., space) character after the escape sequence:.breadcrumbs a:before;content: '>\a0 foo;(Since f is a hexadecimal digit, \a0f would otherwise mean GURMUKHI LETTER EE here, or ਏ if you have a suitable font.);The delimiting white-space will be ignored, and this will be displayed > foo, where the displayed space here would be a NO-BREAK SPACE character.;The white-space approach ('\a0 foo') has the following advantages over the six-digit approach ('\0000a0foo');it is easier to type, because leading zeroes are not necessary, and digits do not need to be counted;it is easier to read, because there is white-space between escape sequence and following text, and digits do not need to be counted;it requires less space, because leading zeroes are not necessary;it is upwards-compatible, because Unicode supporting code points beyond U+10FFFF in the future would require a modification of the CSS Specification.;Thus, to display a space after an escaped character, use two spaces in the stylesheet –.breadcrumbs a:before;content: '>\a0 foo;– or make it explicit:.breadcrumbs a:before;content: '>\a0\20 foo;See CSS 2.1, section "4.1.3 Characters and case" for details.   
CONTENT;
        $answer->question_id = 79;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        When browsers treat the markup as XML;When browsers treat the markup as HTML;When browsers treat the markup as HTML and you want your XHTML 1.0 markup (for example) to validate.   
CONTENT;
        $answer->question_id = 80;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Here's my programmer's answer from a simliar thread;Semantics 101;First take a look at this code and think about what's wrong here...;class car;int wheels = 4;string engine;car mybike = new car();mybike.wheels = 2;mybike.engine = null;The problem, of course, is that a bike is not a car. The car class is an inappropriate class for the bike instance. The code is error-free, but is semantically incorrect. It reflects poorly on the programmer.;Semantics 102;Now apply this to document markup. If your document needs to present tabular data, then the appropriate tag would be. If you place navigation into a table however, then you're misusing the intended purpose of the element. In the second case, you're not presenting tabular data -- you're (mis)using the element to achieve a presentational goal.;Conclusion;Will visitors notice? No. Does your boss care? Maybe. Do we sometimes cut corners as programmers? Sure. But should we? No. Who benefits if you use semantic markup? You -- and your professional reputation. Now go and do the right thing.;share  81
        314 Just before the closing body tag, as stated on;http://developer.yahoo.com/performance/rules.html#js_bottom;Put Scripts at the Bottom;The problem caused by scripts is that they block parallel downloads. The HTTP/1.1 specification suggests that browsers download no more than two components in parallel per hostname. If you serve your images from multiple hostnames, you can get more than two downloads to occur in parallel. While a script is downloading, however, the browser won't start any other downloads, even on different hostnames.    
CONTENT;
        $answer->question_id = 82;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I met this issue with Google Calendar. I wanted to style it on a darker background and change font.;Luckily, the URL from the embed code had no restriction on direct access, so by using PHP function **file_get_contents** it is possible to get the;entire content from the page. Instead of calling the google url, it is possible to call a php file located on your server, ex. google.php, which will contain the original content with modifications;$content = file_get_contents('https://www.google.com/calendar/embed?src=%23contacts%40group.v.calendar.google.com&ctz=America/Montreal');Adding the path to your stylesheet;$content = str_replace(' ',' ', $content);(This will place your stylesheet last just before the head end tag.);Specify the base url form the original url in case css and js are called relatively;$content = str_replace(' ',' ', $content);The final google.php file should look like this;<?php;$content = file_get_contents('https://www.google.com/calendar/embed?src=%23contacts%40group.v.calendar.google.com&ctz=America/Montreal');$content = str_replace(' ',' ', $content);$content = str_replace(' ',' ', $content);echo $content;Then you change the iframe embed code to;Good luck!
CONTENT;
        $answer->question_id = 83;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Here is the function I use;// Numeric only control handler;jQuery.fn.ForceNumericOnly =;function();return this.each(function();$(this).keydown(function(e);var key = e.charCode || e.keyCode || 0;// allow backspace, tab, delete, enter, arrows, numbers and keypad numbers ONLY;// home, end, period, and numpad decimal;return;key == 8;key == 9;key == 13;key == 46;key == 110;key == 190;(key >= 35 && key = 48 && key = 96 &&& key <= 105));You can then attach it to your control by doing;$("#yourTextBoxName").ForceNumericOnly()  
CONTENT;
        $answer->question_id = 84;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I usually use the overflow: auto trick, although that's not, strictly speaking, the intended use for overflow, it is kinda related - enough to make it easy to remember, certainly. The meaning of float: left itself has been extended for various uses more significantly than overflow is in this example, IMO.  
CONTENT;
        $answer->question_id = 85;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        Here is another option just using CSS that does not over ride every dialog on the page.;The CSS.no-close.ui-dialog-titlebar-close {display: none };The HTML;This is a test without a close button;The Javascript.;$(".selector").dialog({ dialogClass: 'no-close' });Working Example    
CONTENT;
        $answer->question_id = 86;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        You'd better go with something like this;var mouse_is_inside = false;$(document).ready(function();$('.form_content').hover(function();mouse_is_inside=true;function();mouse_is_inside=false;$("body").mouseup(function();if(! mouse_is_inside) $('.form_wrapper').hide()    
CONTENT;
        $answer->question_id = 87;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        I put a jquery plugin here;VERY SHORT VERSION;$('#myDiv').css({top:'50%',left:'50%',margin:'-'+($('#myDiv').height() / 2)+'px 0 0 -'+($('#myDiv').width() / 2)+'px'});SHORT VERSION;(function($);$.fn.extend;center: function ();return this.each(function();var top = ($(window).height() - $(this).outerHeight()) / 2;var left = ($(window).width() - $(this).outerWidth()) / 2;$(this).css({position:'absolute', margin:0, top: (top > 0? top: 0)+'px', left: (left > 0? left: 0)+'px'});(jQuery);Activated by this code;$('#mainDiv').center();PLUGIN VERSION;(function($);$.fn.extend;center: function (options);var options = $.extend({ // Default values;inside:window, // element, center into window;transition: 0, // millisecond, transition time;minX:0, // pixel, minimum left element value;minY:0, // pixel, minimum top element value;withScrolling:true, // booleen, take care of the scrollbar (scrollTop);vertical:true, // booleen, center vertical;horizontal:true // booleen, center horizontal;options);return this.each(function();var props = {position:'absolute'};if (options.vertical);var top = ($(options.inside).height() - $(this).outerHeight()) / 2;if (options.withScrolling) top += $(options.inside).scrollTop() || 0;top = (top > options.minY? top: options.minY);$.extend(props, {top: top+'px'});if (options.horizontal);var left = ($(options.inside).width() - $(this).outerWidth()) / 2;if (options.withScrolling) left += $(options.inside).scrollLeft() || 0;left = (left > options.minX? left: options.minX);$.extend(props, {left: left+'px'});if (options.transition > 0) $(this).animate(props, options.transition);else $(this).css(props);return $(this);(jQuery);Activated by this code;$(document).ready(function();$('#mainDiv').center();$(window).bind('resize', function();$('#mainDiv').center({transition:300});is that right?;UPDATE;From CSS-Tricks.center;position: absolute;left: 50%;top: 50%;transform: translate(-50%, -50%), /* Yep! */;width: 48%;height: 59% 
CONTENT;
        $answer->question_id = 88;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        T'  Any attribute can be selected using [attribute_name=value] way.;See the sample here;var value = $("[name='nameofobject']")  
CONTENT;
        $answer->question_id = 89;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        T'  when should we use it;Quentin's answer is right: use multipart/form-data if the form contains a file upload, and application/x-www-form-urlencoded otherwise, which is the default if you omit enctype.;I'm going to;add some more HTML5 references;explain why he is right with a form submit example;HTML5 references;There are three possibilities for enctype;x-www-urlencoded;multipart/form-data (spec points to RFC2388);text-plain. This is "not reliably interpretable by computer", so it should never be used in production, and we will not look further into it.;How to generate the examples;Once you see an example of each method, it becomes obvious how they work, and when you should use each one.;You can produce examples using;nc -l or an ECHO server;an user agent like a browser or cURL;Save the form to a minimal.html file;<!DOCTYPE html>;upload;We set the default text value to a;x03C9#b, which means aωb because ω is U+03C9, which are the bytes 61 CF 89 62 in UTF-8.;Create files to upload;echo 'Content of a.txt.' > a.txt;echo '<!DOCTYPE html> Content of a.html. ' > a.html;# Binary file containing 4 bytes: 'a', 1, 2 and 'b'.;printf 'a\xCF\x89b' > binary;Run our little echo server;while true, do printf '' | nc -lp 8000 localhost, done;Open the HTML on your browser, select the files and click on submit and check the terminal.;nc prints the request received.;Tested on: Ubuntu 14.04.3, nc BSD 1.105, Firefox 40.;multipart/form-data;Firefox sent;POST / HTTP/1.1;[[ Less interesting headers... ]];Content-Type: multipart/form-data, boundary=---------------------------735323031399963166993862150;Content-Length: 834;-----------------------------735323031399963166993862150;Content-Disposition: form-data, name="text1";text default;-----------------------------735323031399963166993862150;Content-Disposition: form-data, name="text2";aωb;-----------------------------735323031399963166993862150;Content-Disposition: form-data, name="file1", filename="a.txt;Content-Type: text/plain;Content of a.txt.;-----------------------------735323031399963166993862150;Content-Disposition: form-data, name="file2", filename="a.html;Content-Type: text/html;<!DOCTYPE html> Content of a.html.;-----------------------------735323031399963166993862150;Content-Disposition: form-data, name="file3", filename="binary;Content-Type: application/octet-stream;aωb;-----------------------------735323031399963166993862150--;For the binary file and text field, the bytes 61 CF 89 62 (aωb in UTF-8) are sent literally. You could verify that with nc -l localhost 8000 | hd, which says that the bytes;61 CF 89 62;were sent (61 == 'a' and 62 == 'b').;Therefore it is clear that;Content-Type: multipart/form-data, boundary=---------------------------9051914041544843365972754266 sets the content type to multipart/form-data and says that the fields are separated by the given boundary string.;every field gets some sub headers before its data: Content-Disposition: form-data,, the field name, the filename, followed by the data.;The server reads the data until the next boundary string. The browser must choose a boundary that will not appear in any of the fields, so this is why the boundary may vary between requests.;Because we have the unique boundary, no encoding of the data is necessary: binary data is sent as is.;TODO: what is the optimal boundary size (log(N) I bet), and name / running time of the algorithm that finds it? Asked at: http://cs.stackexchange.com/questions/39687/find-the-shortest-sequence-that-is-not-a-sub-sequence-of-a-set-of-sequences;Content-Type is automatically determined by the browser.;How it is determined exactly was asked at: How is mime type of an uploaded file determined by browser?;application/x-www-form-urlencoded;Now change the enctype to application/x-www-form-urlencoded, reload the browser, and resubmit.;Firefox sent;POST / HTTP/1.1;[[ Less interesting headers... ]];Content-Type: application/x-www-form-urlencoded;Content-Length: 51;text1=text+default&text2=a%CF%89b&file1=a.txt&file2=a.html&file3=binary;Clearly the file data was not sent, only the basenames. So this cannot be used for files.;As for the text field, we see that usual printable characters like a and b were sent in one byte, while non-printable ones like 0xCF and 0x89 took up 3 bytes each: %CF%89 !;Comparison;File uploads often contain lots of non-printable characters (e.g. images), while text forms almost never do.;From the examples we have seen that;multipart/form-data: adds a few bytes of boundary overhead to the message, and must spend some time calculating it, but sends each byte in one byte.;application/x-www-form-urlencoded: has a single byte boundary per field (&), but adds a linear overhead factor of 3x for every non-printable character.;Therefore, even if we could send files with application/x-www-form-urlencoded, we wouldn't want to, because it is so inefficient.;But for printable characters found in text fields, it does not matter and generates less overhead, so we just use it.   
CONTENT;
        $answer->question_id = 90;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          WARNING: This answer has merely been provided as a possible solution, it is obviously not the best solution, as it requires jQuery. Instead, prefer the pure JavaScript solution.;$(location).attr('href', 'http://stackoverflow.com')  
CONTENT;
        $answer->question_id = 91;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use the hidden selector;// Matches all elements that are hidden;$('element:hidden');And the visible selector;// Matches all elements that are visible;$('element:visible')  
CONTENT;
        $answer->question_id = 92;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Imperative → declarative;In jQuery, selectors are used to find DOM elements and then bind/register event handlers to them. When an event triggers, that (imperative) code executes to update/change the DOM.;In AngularJS, you want to think about views rather than DOM elements. Views are (declarative) HTML that contain AngularJS directives. Directives set up the event handlers behind the scenes for us and give us dynamic databinding. Selectors are rarely used, so the need for IDs (and some types of classes) is greatly diminished. Views are tied to models (via scopes). Views are a projection of the model. Events change models (that is, data, scope properties), and the views that project those models update "automatically.;In AngularJS, think about models, rather than jQuery-selected DOM elements that hold your data. Think about views as projections of those models, rather than registering callbacks to manipulate what the user sees.;Separation of concerns;jQuery employs unobtrusive JavaScript - behavior (JavaScript) is separated from the structure (HTML).;AngularJS uses controllers and directives (each of which can have their own controller, and/or compile and linking functions) to remove behavior from the view/structure (HTML). Angular also has services and filters to help separate/organize your application.;See also http://stackoverflow.com/a/14346528/215945;Application design;One approach to designing an AngularJS application;Think about your models. Create services or your own JavaScript objects for those models.;Think about how you want to present your models -- your views. Create HTML templates for each view, using the necessary directives to get dynamic databinding.;Attach a controller to each view (using ng-view and routing, or ng-controller). Have the controller find/get only whatever model data the view needs to do its job. Make controllers as thin as possible.;Prototypal inheritance;You can do a lot with jQuery without knowing about how JavaScript prototypal inheritance works. When developing AngularJS applications, you will avoid some common pitfalls if you have a good understanding of JavaScript inheritance. Recommended reading: What are the nuances of scope prototypal / prototypical inheritance in AngularJS?;share   93
        326 Use jQuery's is() function;if($("#isAgeSelected").is(':checked'));$("#txtAge").show(), // checked;else;$("#txtAge").hide(), // unchecked    
CONTENT;
        $answer->question_id = 94;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use;$(".myCheckbox").attr('checked', true), // Deprecated;$(".myCheckbox").prop('checked', true);And if you want to check if a checkbox is checked or not;$('.myCheckbox').is(':checked')   
CONTENT;
        $answer->question_id = 95;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you're not using jQuery in your code, this answer is for you;Your code should be something along the lines of this;function foo();var httpRequest = new XMLHttpRequest();httpRequest.open('GET', "/echo/json");httpRequest.send();return httpRequest.responseText;var result = foo(), // always ends up being 'undefined;Felix Kling did a fine job writing an answer for people using jQuery for AJAX, I've decided to provide an alternative for people who aren't.;(Note, for those using the new fetch API, Angular or promises I've added another answer below);What you're facing;This is a short summary of "Explanation of the problem" from the other answer, if you're not sure after reading this, read that.;The A in AJAX stands for asynchronous. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example,.send returns immediately and the next statement, return result,, is executed before the function you passed as success callback was even called.;This means when you're returning, the listener you've defined did not execute yet, which means the value you're returning has not been defined.;Here is a simple analogy;function getFive();var a;setTimeout(function();a=5;10);return a;(Fiddle);The value of a returned is undefined since the a=5 part has not executed yet. AJAX acts like this, you're returning the value before the server got the chance to tell your browser what that value is.;One possible solution to this problem is to code re-actively, telling your program what to do when the calculation completed.;function onComplete(a){ // When the code completes, do this;alert(a);function getFive(whenDone);var a;setTimeout(function();a=5;whenDone(a);10);This is called CPS. Basically, we're passing getFive an action to perform when it completes, we're telling our code how to react when an event completes (like our AJAX call, or in this case the timeout).;Usage would be;getFive(onComplete);Which should alert "5" to the screen. (Fiddle).;Possible solutions;There are basically two ways how to solve this;Make the AJAX call synchronous (lets call it SJAX).;Restructure your code to work properly with callbacks.;1. Synchronous AJAX - Don't do it!!;As for synchronous AJAX, don't do it! Felix's answer raises some compelling arguments about why it's a bad idea. To sum it up, it'll freeze the user's browser until the server returns the response and create a very bad user experience. Here is another short summary taken from MDN on why;XMLHttpRequest supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.;In short, synchronous requests block the execution of code......this can cause serious issues...;If you have to do it, you can pass a flag: Here is how;var request = new XMLHttpRequest();request.open('GET', 'yourURL', false), // `false` makes the request synchronous;request.send(null);if (request.status === 200) {// That's HTTP for 'ok;console.log(request.responseText);2. Restructure code;Let your function accept a callback. In the example code foo can be made to accept a callback. We'll be telling our code how to react when foo completes.;So;var result = foo();// code that depends on `result` goes here;Becomes;foo(function(result);// code that depends on `result`;Here we passed an anonymous function, but we could just as easily pass a reference to an existing function, making it look like;function myHandler(result);// code that depends on `result`;foo(myHandler);For more details on how this sort of callback design is done, check Felix's answer.;Now, let's define foo itself to act accordingly;function foo(callback);var httpRequest = new XMLHttpRequest();httpRequest.onload = function(){ // when the request is loaded;callback(httpRequest.responseText),// we're calling our method;httpRequest.open('GET', "/echo/json");httpRequest.send();(fiddle);We have now made our foo function accept an action to run when the AJAX completes successfully, we can extend this further by checking if the response status is not 200 and acting accordingly (create a fail handler and such). Effectively solving our issue.;If you're still having a hard time understanding this read the AJAX getting started guide at MDN.    
CONTENT;
        $answer->question_id = 96;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag's default behavior.;$('a').click(function (e);// custom handling here;// oops...runtime error...where oh where will the href take me?;return false;The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor's default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).;$('a').click(function (e);e.preventDefault();// custom handling here;// oops...runtime error, but at least the user isn't navigated away.  
CONTENT;
        $answer->question_id = 97;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There are various ready-made plugins on doing file upload for jQuery.;Doing this kind of uploading hacks is not an enjoyable experience, so people enjoy using ready-made solutions.;Here's few;JQuery File Uploader;Multiple File Upload Plugin;Mini Multiple File Upload;jQuery File Upload;You can search for more projects on NPM (using "jquery-plugin" as the keyword) or on Github.  
CONTENT;
        $answer->question_id = 98;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You could also use;$(this).find('img');which would return all img s that are descendants of the div 
CONTENT;
        $answer->question_id = 99;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use this..;$("#myform input[type='radio']:checked").val()   
CONTENT;
        $answer->question_id = 100;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Yes!;jQuery.fn.exists = function(){return this.length>0,};if ($(selector).exists());// Do something;There you go!;This is in response to: Herding Code podcast with Jeff Atwood 
CONTENT;
        $answer->question_id = 101;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          jQuery has a built-in facility to manipulate DOM elements on the fly.;You can add anything to your table like this;$("#tableID").find('tbody').append($(;).append($(' ').append($(' ').attr('src', 'img.png').text('Image cell');The $(' ') thing in jQuery is a tag object that can have several attr attributes that can be set and get, as well as text, which represents the text between the tag here: text.;This is some pretty weird indenting, but it's easier for you to see what's going on in this example.  
CONTENT;
        $answer->question_id = 102;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I think Tim said it quite well, but let's step back;A DOM element is an object, a thing in memory. Like most objects in OOP, it has properties. It also, separately, has a map of the attributes defined on the element (usually coming from the markup that the browser read to create the element). Some of the element's properties get their initial values from attributes with the same or similar names (value gets its initial value from the "value" attribute, href gets its initial value from the "href" attribute, but it's not exactly the same value, className from the "class" attribute). Other properties get their initial values in other ways: For instance, the parentNode property gets its value based on what its parent element is, an element always has a style property, whether it has a "style" attribute or not.;Let's consider this anchor in a page at http://example.com/testing.html;Hi;Some gratuitous ASCII art (and leaving out a lot of stuff);+-------------------------------------------+;a;+-------------------------------------------+;href: "http://example.com/foo.html;name: "fooAnchor;id: "fooAnchor;className: "test one;attributes;href: "foo.html;name: "fooAnchor;id: "fooAnchor;class: "test one;+-------------------------------------------+;Note that the properties and attributes are distinct.;Now, although they are distinct, because all of this evolved rather than being designed from the ground up, a number of properties write back to the attribute they derived from if you set them. But not all do, and as you can see from href above, the mapping is not always a straight "pass the value on", sometimes there's interpretation involved.;When I talk about properties being properties of an object, I'm not speaking in the abstract. Here's some non-jQuery code;var link = document.getElementById('fooAnchor');alert(link.href), // alerts "http://example.com/foo.html;alert(link.getAttribute("href")), // alerts "foo.html;(Those values are as per most browsers, there's some variation.);The link object is a real thing, and you can see there's a real distinction between accessing a property on it, and accessing an attribute.;As Tim said, the vast majority of the time, we want to be working with properties. Partially that's because their values (even their names) tend to be more consistent across browsers. We mostly only want to work with attributes when there is no property related to it (custom attributes), or when we know that for that particular attribute, the attribute and the property are not 1:1 (as with href and "href" above).;The standard properties are laid out in the various DOM specs;DOM2 HTML;DOM2 Core;DOM3 Core;These specs have excellent indexes and I recommend keeping links to them handy, I use them all the time.;Custom attributes would include, for instance, any data-xyz attributes you might put on elements to provide meta-data to your code (now that that's valid as of HTML5, as long as you stick to the data- prefix). (Recent versions of jQuery give you access to data-xyz elements via the data function, but that function does more than that and if you're just dealing with a data-xyz attribute, I'd actually use the attr function to interact with it.);The attr function used to have some convoluted logic around getting what they thought you wanted, rather than literally getting the attribute. It conflated the concepts. Moving to prop and attr is meant to de-conflate them. There will be some brief confusion, but hopefully a better understanding of what's really going on going forward.;Some time kicking around the specs above, and experimenting, should help clear some of this up.;Update: jQuery 1.6.1 changes the attr function again, in ways that the jQuery team say mean most code that currently uses attr will continue to work, even if prop would technically be preferred. Details in the jQuery 1.6.1 blog post.  
CONTENT;
        $answer->question_id = 103;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use this to get a date from JSON;var date = eval(jsonDate.replace(/\/Date\((\d+)\)\//gi, "new Date($1)"));And then you can use a JavaScript Date Format script (1.2 KB when minified and gzipped) to display it as you want.    
CONTENT;
        $answer->question_id = 104;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          location.reload();Should work on all browsers even without jQuery   
CONTENT;
        $answer->question_id = 105;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Try this;$("#myselect:selected").text();For an ASP.NET dropdown you can use the following selector;$("[id*='MyDropDownId']:selected")   
CONTENT;
        $answer->question_id = 106;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Just for the sake of new conventions && making it adaptable going forward (unless things change drastically with ECMA6(????);$(document).on('event_name', '#your_id', function();$(this).removeAttr('disabled');and;$(document).off('event_name', '#your_id', function();$(this).attr('disabled','disabled')    
CONTENT;
        $answer->question_id = 107;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can do this using the filter function;$(".a").filter(".b")  
CONTENT;
        $answer->question_id = 108;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can hook up to the click event of document and then make sure #menucontainer is not an ancestor or the target of the clicked element (.closest(),.is()).;If it is not, then the clicked element is outside of the #menucontainer and you can safely hide it.;$(document).click(function(event);if(!$(event.target).closest('#menucontainer').length;$(event.target).is('#menucontainer'));if($('#menucontainer').is(":visible"));$('#menucontainer').hide() 
CONTENT;
        $answer->question_id = 109;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can't recall the request but you can set a timeout value after which the response will be ignored. See this page for jquery AJAX options. I believe that your error callback will be called if the timeout period is exceeded. There is already a default timeout on every AJAX request.;You can also use the abort() method on the request object but, while it will cause the client to stop listening for the event, it may probably will not stop the server from processing it.    
CONTENT;
        $answer->question_id = 110;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          jQuery.scrollTo(): View - Demo, API, Source;I wrote this lightweight plugin to make page/element scrolling much easier. It's flexible where you could pass in a target element or specified value. Perhaps this could be part of jQuery's next official release, what do you think?;Examples Usage;$('body').scrollTo('#target'), // Scroll screen to target element;$('body').scrollTo(500), // Scroll screen 500 pixels down;$('#scrollable').scrollTo(100), // Scroll individual element 100 pixels down;Options;scrollTarget: A element, string, or number which indicates desired scroll position.;offsetTop: A number that defines additional spacing above scroll target.;duration: A string or number determining how long the animation will run.;easing: A string indicating which easing function to use for the transition.;complete: A function to call once the animation is complete.    
CONTENT;
        $answer->question_id = 111;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In pure jQuery style;$(location).attr('href');The location object also has other properties, like host, hash, protocol, and pathname.   
CONTENT;
        $answer->question_id = 112;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Convert forms to JSON LIKE A BOSS;UPDATE: The following code is now deprecated. You can find the current version on GitHub.;The following code can take work with all sorts of input names, and handle them just as you'd expect.;For example;// output;honey;badger":"a;wombat":["b"];hello;panda":["c"];animals;name":"d;breed":"e;crazy;null;{"wonky":"f"};dream;as;vividly;as;you;can":"g;Usage;$('#my-form').serializeObject();The Sorcery (JavaScript);(function($);$.fn.serializeObject = function();var self = this;json = {};push_counters = {};patterns =;validate": /^[a-zA-Z][a-zA-Z0-9_]*(?:\[(?:\d*|[a-zA-Z0-9_]+)\])*$/;key": /[a-zA-Z0-9_]+|(?=\[\])/g;push": /^$/;fixed": /^\d+$/;named": /^[a-zA-Z0-9_]+$/;this.build = function(base, key, value);base[key] = value;return base;this.push_counter = function(key);if(push_counters[key] === undefined);push_counters[key] = 0;return push_counters[key]++;$.each($(this).serializeArray(), function();// skip invalid keys;if(!patterns.validate.test(this.name));return;var k;keys = this.name.match(patterns.key);merge = this.value;reverse_key = this.name;while((k = keys.pop()) !== undefined);// adjust reverse_key;reverse_key = reverse_key.replace(new RegExp("\\[" + k + "\\]$"), '');// push;if(k.match(patterns.push));merge = self.build([], self.push_counter(reverse_key), merge);// fixed;else if(k.match(patterns.fixed));merge = self.build([], k, merge);// named;else if(k.match(patterns.named));merge = self.build({}, k, merge);json = $.extend(true, json, merge);return json;(jQuery)  
CONTENT;
        $answer->question_id = 113;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          As the accepted answer was very far from complete, I stitched together a "ready" function like jQuery.ready() based on jQuery 1.6.2 source;var ready = (function();var readyList;DOMContentLoaded;class2type = {};class2type["[object Boolean]"] = "boolean;class2type["[object Number]"] = "number;class2type["[object String]"] = "string;class2type["[object Function]"] = "function;class2type["[object Array]"] = "array;class2type["[object Date]"] = "date;class2type["[object RegExp]"] = "regexp;class2type["[object Object]"] = "object;var ReadyObj =;// Is the DOM ready to be used? Set to true once it occurs.;isReady: false;// A counter to track how many items to wait for before;// the ready event fires. See #6781;readyWait: 1;// Hold (or release) the ready event;holdReady: function(hold);if (hold);ReadyObj.readyWait++;else;ReadyObj.ready(true);// Handle when the DOM is ready;ready: function(wait);// Either a released hold or an DOMready/load event and not yet ready;if ((wait === true && !--ReadyObj.readyWait) || (wait !== true && !ReadyObj.isReady));// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).;if (!document.body);return setTimeout(ReadyObj.ready, 1);// Remember that the DOM is ready;ReadyObj.isReady = true;// If a normal DOM Ready event fired, decrement, and wait if need be;if (wait !== true && --ReadyObj.readyWait > 0);return;// If there are functions bound, to execute;readyList.resolveWith(document, [ ReadyObj ]);// Trigger any bound ready events;//if (ReadyObj.fn.trigger);// ReadyObj(document).trigger("ready").unbind("ready");//};bindReady: function();if (readyList);return;readyList = ReadyObj._Deferred();// Catch cases where $(document).ready() is called after the;// browser event has already occurred.;if (document.readyState === "complete");// Handle it asynchronously to allow scripts the opportunity to delay ready;return setTimeout(ReadyObj.ready, 1);// Mozilla, Opera and webkit nightlies currently support this event;if (document.addEventListener);// Use the handy event callback;document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);// A fallback to window.onload, that will always work;window.addEventListener("load", ReadyObj.ready, false);// If IE event model is used;else if (document.attachEvent);// ensure firing before onload;// maybe late but safe also for iframes;document.attachEvent("onreadystatechange", DOMContentLoaded);// A fallback to window.onload, that will always work;window.attachEvent("onload", ReadyObj.ready);// If IE and not a frame;// continually check to see if the document is ready;var toplevel = false;try;toplevel = window.frameElement == null;catch(e) {};if (document.documentElement.doScroll && toplevel);doScrollCheck();Deferred: function();var // callbacks list;callbacks = [];// stored [ context, args ];fired;// to avoid firing when already doing so;firing;// flag to know if the deferred has been cancelled;cancelled;// the deferred itself;deferred =;// done(f1, f2,...);done: function();if (!cancelled);var args = arguments;i;length;elem;type;fired;if (fired);fired = fired;fired = 0;for (i = 0, length = args.length, i < length, i++);elem = args[ i ];type = ReadyObj.type(elem);if (type === "array");deferred.done.apply(deferred, elem);else if (type === "function");callbacks.push(elem);if (_fired);deferred.resolveWith(_fired[ 0 ], _fired[ 1 ]);return this;// resolve with given context and args;resolveWith: function(context, args);if (!cancelled && !fired && !firing);// make sure args are available (#8421);args = args || [];firing = 1;try;while(callbacks[ 0 ]);callbacks.shift().apply(context, args),//shifts a callback, and applies it to document;finally;fired = [ context, args ];firing = 0;return this;// resolve with this as context and given arguments;resolve: function();deferred.resolveWith(this, arguments);return this;// Has this deferred been resolved?;isResolved: function();return !!(firing || fired);// Cancel;cancel: function();cancelled = 1;callbacks = [];return this;return deferred;type: function(obj);return obj == null?;String(obj);class2type[ Object.prototype.toString.call(obj) ] || "object;// The DOM ready check for Internet Explorer;function doScrollCheck();if (ReadyObj.isReady);return;try;// If IE is used, use the trick by Diego Perini;// http://javascript.nwbox.com/IEContentLoaded/;document.documentElement.doScroll("left");catch(e);setTimeout(doScrollCheck, 1);return;// and execute any waiting functions;ReadyObj.ready();// Cleanup functions for the document ready method;if (document.addEventListener);DOMContentLoaded = function();document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);ReadyObj.ready();else if (document.attachEvent);DOMContentLoaded = function();// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).;if (document.readyState === "complete");document.detachEvent("onreadystatechange", DOMContentLoaded);ReadyObj.ready();function ready(fn);// Attach the listeners;ReadyObj.bindReady();var type = ReadyObj.type(fn);// Add the callback;readyList.done(fn),//readyList is result of _Deferred();return ready;();How to use;I am not sure how functional this code is, but it worked fine with my superficial tests. This took quite a while, so I hope you and others can benefit from it.;PS.: I suggest compiling it.;Or you can use http://dustindiaz.com/smallest-domready-ever;function r(f){/in/.test(document.readyState)?setTimeout(r,9,f):f()};r(function(){/*code to run*/});or the native function if you only need to support the new browsers;document.addEventListener('DOMContentLoaded',function(){/*fun code to run*/})    
CONTENT;
        $answer->question_id = 114;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I hope this can be of use to other developers banging their head against the wall on this one. I found that any of the following prevents Safari on iOS 6 from caching the POST response;adding [cache-control: no-cache] in the request headers;adding a variable URL parameter such as the current time;adding [pragma: no-cache] in the response headers;adding [cache-control: no-cache] in the response headers;My solution was the following in my Javascript (all my AJAX requests are POST).;$.ajaxSetup;type: 'POST;headers: { "cache-control": "no-cache" };I also add the [pragma: no-cache] header to many of my server responses.;If you use the above solution be aware that any $.ajax() calls you make that are set to global: false will NOT use the settings specified in $.ajaxSetup(), so you will need to add the headers in again.    
CONTENT;
        $answer->question_id = 115;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I've been using jquery-json for 6 months and it works great. It's very simple to use;var myObj = {foo: "bar", "baz": "wockaflockafliz"};$.toJSON(myObj);// Result: {"foo":"bar","baz":"wockaflockafliz"}    
CONTENT;
        $answer->question_id = 116;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can remove the 404 by removing the line;//@ sourceMappingURL=jquery-1.10.2.min.map;from the top part of your jQuery file.;The top part of the jQuery file will look like this.;/*! jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license;//@ sourceMappingURL=jquery-1.10.2.min.map;*/;Just change that to;/*! jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license */;Purpose of a source map;Basically it's a way to map a combined/minified file back to an unbuilt state. When you build for production, along with minifying and combining your JavaScript files, you generate a source map which holds information about your original files. When you query a certain line and column number in your generated JavaScript you can do a lookup in the source map which returns the original location. Developer tools (currently WebKit nightly builds, Google Chrome, or Firefox 23+) can parse the source map automatically and make it appear as though you're running unminified and uncombined files.;(Read more on this here)    
CONTENT;
        $answer->question_id = 117;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          var output = [];$.each(selectValues, function(key, value);output.push(' ');$('#mySelect').html(output.join(''));In this way you "touch the DOM" only one time.;I'm not sure if the latest line can be converted into $('#mySelect').html(output.join('')) because I don't know jquery internals (maybe it does some parsing in the html() method)   
CONTENT;
        $answer->question_id = 118;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you'd like to get the option with a value of 2, use;$("#list option[value='2']").text();If you'd like to get whichever option is currently selected, use;$("#list option:selected").text()   
CONTENT;
        $answer->question_id = 119;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The easiest and cleanest way to do this by far  
CONTENT;
        $answer->question_id = 120;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Edit: Being a more experienced JS developer now than at the time I originally wrote this answer, I have long since learned that the standard way to catch null and undefined simultaneously is in fact this;if (variable == null);// do something;--which is 100% equivalent to the more explicit but less concise;if (variable === undefined || variable === null);// do something;When writing professional JS, it's taken for granted that type equality and the behavior of == vs === is understood. Therefore we use == and only compare to null.;Edit again;The comments suggesting the use of typeof are simply wrong. Yes, my solution above will cause a reference error if the variable doesn't exist. This is a good thing.;You should not have any references in your code to variables that were never declared.;Suggesting the use of typeof to avoid this error is like advising someone not to use zero because you can get a divide-by-zero error if it's used as a divisor. YOU SHOULDN'T BE DIVIDING BY ZERO ANYWHERE, PERIOD!! And if you are, you need to find that mistake and alter it before deploying your code. Yes, typeof circumvents the reference error by making an error condition fail silently. This is a bad thing, not a good thing.;Undeclared variables should not make it to production.;The method I described above is for identifying whether a declared variable has a value of null or undefined, not for checking whether a variable has been declared. But typeof wouldn't tell you whether a variable had been declared, either. Such a determination can only be safely accomplished at runtime using try / catch, like so;try;nameOfMyPossiblyDeclaredVariable;catch(err);// caught the reference error;// code here will execute **only** if variable was never declared;I have no idea why you would ever need to do this, but I've included it for curiosity's sake. If you find yourself doing this in practice, you have almost certainly done something wrong.   
CONTENT;
        $answer->question_id = 121;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There is a good explanation in this documentation.;In short;Event handlers are bound only to the currently selected elements, they must exist on the page at the time your code makes the call to.on().;Thus in the following example, #dataTable tbody tr must exist before the code is generated.;$("#dataTable tbody tr").on("click", function(event);alert($(this).text());If new HTML is being injected into the page, it is preferable to use delegated events to attach an event handler, as described next.;Delegated events have the advantage that they can process events from descendant elements that are added to the document at a later time. For example, if the table exists, but the rows are added dynamically using code, the following will handle it;$("#dataTable tbody").on("click", "tr", function(event);alert($(this).text());In addition to their ability to handle events on descendant elements which are not yet created, another advantage of delegated events is their potential for much lower overhead when many elements must be monitored. On a data table with 1,000 rows in its tbody, the first code example attaches a handler to 1,000 elements.;A delegated-events approach (the second code example) attaches an event handler to only one element, the tbody, and the event only needs to bubble up one level (from the clicked tr to tbody).;Note: Delegated events do not work for SVG. 
CONTENT;
        $answer->question_id = 122;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          No need to use jQuery particularly to manipulate cookies.;From QuirksMode (including escaping characters);function createCookie(name, value, days);var expires;if (days);var date = new Date();date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));expires = ", expires=" + date.toGMTString();else;expires = ";document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + ", path=/;function readCookie(name);var nameEQ = encodeURIComponent(name) + "=;var ca = document.cookie.split(',');for (var i = 0, i < ca.length, i++);var c = ca[i];while (c.charAt(0) === ' ') c = c.substring(1, c.length);if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));return null;function eraseCookie(name);createCookie(name, "", -1);Take a look at;How to remove existing class name and add a new one with jquery and cookies    
CONTENT;
        $answer->question_id = 123;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I solved this issue by;Adding a custom header to the response;public ActionResult Index();if (!HttpContext.User.Identity.IsAuthenticated);HttpContext.Response.AddHeader("REQUIRES_AUTH","1");return View();Binding a JavaScript function to the ajaxSuccess event and checking to see if the header exists;$(document).ajaxSuccess(function(event, request, settings);if (request.getResponseHeader('REQUIRES_AUTH') === '1');window.location = '/ 
CONTENT;
        $answer->question_id = 124;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          With jQuery 1.6 and above you should use;$("a").prop("href", "http://www.jakcms.com");The difference between prop and attr is that attr grabs the HTML attribute where as prop grabs the DOM property.;You can find more details in this post:.prop() vs.attr() 
CONTENT;
        $answer->question_id = 125;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This wasn't available when this question was answered, but you can also use the live() method to enable/disable events.;$('#myimage:not(.disabled)').live('click', myclickevent);$('#mydisablebutton').click(function () { $('#myimage').addClass('disabled'), });What will happen with this code is that when you click #mydisablebutton, it will add the class disabled to the #myimage element. This will make it so that the selector no longer matches the element and the event will not be fired until the 'disabled' class is removed making the.live() selector valid again.;This has other benefits by adding styling based on that class as well.    
CONTENT;
        $answer->question_id = 126;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you do want smooth scrolling, try something like this;$("a[href='#top']").click(function();$("html, body").animate({ scrollTop: 0 }, "slow");return false;That will take any tag whose href="#top" and make it smooth scroll to the top. 
CONTENT;
        $answer->question_id = 127;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          window.onload is the built-in JavaScript event, but as its implementation had subtle quirks across browsers (Firefox, Internet Explorer 6, Internet Explorer 8, and Opera), jQuery provides document.ready, which abstracts those away, and fires as soon as the page's DOM is ready (doesn't wait for images, etc.).;$(document).ready (note that it's not document.ready, which is undefined) is a jQuery function, wrapping and providing consistency to the following events;document.ondomcontentready / document.ondomcontentloaded - a newish event which fires when the document's DOM is loaded (which may be some time before the images, etc. are loaded), again, slightly different in Internet Explorer and in rest of the world;and window.onload (which is implemented even in old browsers), which fires when the entire page loads (images, styles, etc.)  
CONTENT;
        $answer->question_id = 128;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can put the jQuery's Ajax setup in synchronous mode by calling;jQuery.ajaxSetup({async:false});and then perform your Ajax calls using jQuery.get(...);then just turning it on again once;jQuery.ajaxSetup({async:true});I guess it works out the same thing as suggested by @Adam, but it might be helpful to someone that does want to reconfigure their jQuery.get() or jQuery.post() to the more elaborate jQuery.ajax() syntax. 
CONTENT;
        $answer->question_id = 129;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This answer in Vanilla;function isScrolledIntoView(el);var elemTop = el.getBoundingClientRect().top;var elemBottom = el.getBoundingClientRect().bottom;var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);return isVisible    
CONTENT;
        $answer->question_id = 130;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Another solution is to create a lookup object;var lookup = {};for (var i = 0, len = array.length, i < len, i++);lookup[array[i].id] = array[i];now you can use lookup[id]...;This is especially interesting if you need to do many lookups.;This won't need much more memory since the IDs and objects will be shared.  
CONTENT;
        $answer->question_id = 131;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          DO NOT USE THIS ANSWER. The url is pointing at jQuery 1.11 (and always will);Credits to Basic for above snippet;http://code.jquery.com/jquery-latest.min.js is the minified version, always up-to-date. 
CONTENT;
        $answer->question_id = 132;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Warning;The question's sample code uses PHP's 'mysql' extension, which was deprecated in PHP 5.5.0 and removed entirely in PHP 7.0.0.;If you're using a recent version of PHP, the mysql_real_escape_string option outlined below will no longer be available (though mysqli::escape_string is a modern equivalent). These days the mysql_real_escape_string option would only make sense for legacy code on an old version of PHP.;You've got two options - escaping the special characters in your unsafe_variable, or using a parameterized query. Both would protect you from SQL injection. The parameterized query is considered the better practice, but will require changing to a newer mysql extension in PHP before you can use it.;We'll cover the lower impact string escaping one first.;//Connect;$unsafe_variable = $_POST["user-input"];$safe_variable = mysql_real_escape_string($unsafe_variable);mysql_query("INSERT INTO table (column) VALUES ('". $safe_variable. "')");//Disconnect;See also, the details of the mysql_real_escape_string function.;To use the parameterized query, you need to use MySQLi rather than the MySQL functions. To rewrite your example, we would need something like the following.;prepare("INSERT INTO table (column) VALUES (?)");// TODO check that $stmt creation succeeded;// "s" means the database expects a string;$stmt->bind_param("s", $unsafe_variable);$stmt->execute();$stmt->close();$mysqli->close();?>;The key function you'll want to read up on there would be mysqli::prepare.;Also, as others have suggested, you may find it useful/easier to step up a layer of abstraction with something like PDO.;Please note that the case you asked about is a fairly simple one, and that more complex cases may require more complex approaches. In particular;If you want to alter the structure of the SQL based on user input, parameterised queries are not going to help, and the escaping required is not covered by mysql_real_escape_string. In this kind of case you would be better off passing the user's input through a whitelist to ensure only 'safe' values are allowed through.;If you use integers from user input in a condition and take the mysql_real_escape_string approach, you will suffer from the problem described by Polynomial in the comments below. This case is trickier because integers would not be surrounded by quotes, so you could deal with by validating that the user input contains only digits.;There are likely other cases I'm not aware of. You might find http://webappsec.org/projects/articles/091007.txt a useful resource on some of the more subtle problems you can encounter.;share 133
        366 Bitwise Operator;What is a bit? A bit is a representation of 1 or 0. Basically OFF(0) and ON(1);What is a byte? A byte is made up of 8 bits and the highest value of a byte is 255, which would mean every bit is set. We will look at why a byte's maximum value is 255.;-------------------------------------------;1 Byte (8 bits);-------------------------------------------;Place Value | 128| 64| 32| 16| 8| 4| 2| 1;-------------------------------------------;This representation of 1 Byte;1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255 (1 Byte);A few examples for better understanding;The "AND" operator;$a = 9;$b = 10;echo $a && $b;This would output the number 8. Why? Well let's see using our table example.;-------------------------------------------;1 Byte (8 bits);-------------------------------------------;Place Value | 128| 64| 32| 16| 8| 4| 2| 1;-------------------------------------------;$a | 0| 0| 0| 0| 1| 0| 0| 1;-------------------------------------------;$b | 0| 0| 0| 0| 1| 0| 1| 0;-------------------------------------------;So you can see from the table the only bit they share together is the 8 bit.;Second example;$a = 36;$b = 103;echo $a && $b;// This would output the number 36.;$a = 00100100;$b = 01100111;The two shared bits are 32 and 4, which when added together return 36.;The "Or" operator;$a = 9;$b = 10;echo $a | $b;This would output the number 11. Why?;$a = 00001001;$b = 00001010;You will notice that we have 3 bits set, in the 8, 2, and 1 columns. Add those up: 8+2+1=11.   
CONTENT;
        $answer->question_id = 134;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You should not use regular expressions to validate email addresses.;Instead, use the MailAddress class, like this;try;address = new MailAddress(address).Address;catch(FormatException);//address is invalid;The MailAddress class uses a BNF parser to validate the address in full accordance with RFC822.;If you really want to use a regex, here it is;(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t];+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?;\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?;?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?;\t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\0;31]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\;(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+;(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?;(?:\r\n)?[ \t])*))*|(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z;(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n);?[ \t])*)*\<(?:(?:\r\n)?[ \t])*(?:@(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\;r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?;\t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n);?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t];*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?;\t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*;(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t];+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*);*:(?:(?:\r\n)?[ \t])*)?(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+;\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r;\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?;\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t;*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031;+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\];?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?;(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?;\r\n)?[ \t])*))*\>(?:(?:\r\n)?[ \t])*)|(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?;(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?;[ \t]))*"(?:(?:\r\n)?[ \t])*)*:(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()<>@,,:\\".\[\];\000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\];\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>;@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|;(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t];*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?;[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\;\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?:[^()<>@,,:\\".\[\] \000-;\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.;?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)*\<(?:(?:\r\n)?[ \t])*(?:@(?:[^()<>;\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\;^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\;\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\;[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\;r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\];\000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\];\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?(?:[^()<>@,,:\\".\[\] \0;00-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>;\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?;[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*;(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".;\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?;^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\];\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\>(?:(?:\r\n)?[ \t])*)(?:,\s*;?:(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\;.\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?;?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=;\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t;*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t;+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?;\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+;\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?;[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\;(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)*\<(?:(?:\r\n);?[ \t])*(?:@(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[;()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n);?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>;@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?;\t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>;\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t];*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?;(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".;\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?;\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\;()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t]);*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]);+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z;(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\>(?;?:\r\n)?[ \t])*))*)?,\s*) 
CONTENT;
        $answer->question_id = 135;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You could use regular expressions. It would look something like this;$a = 'How are you?;if (preg_match('/are/',$a));echo 'true;Don't tell me it's bad just because you've heard it's bad before. You might if you have any facts to back it up though,);On the performance side, strpos is about three times faster and have in mind, when I did one million compares at once, it took preg match 1.5 seconds to finish and for strpos it took 0.5 seconds. What I'm trying to say is that it runs really fast either way. If you don't have 100,000 visitors every second, you shouldn't concern yourself with this kind of stuff and take what's most comfortable, IMO.   
CONTENT;
        $answer->question_id = 136;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Try Simple HTML DOM Parser;A HTML DOM parser written in PHP 5+ that lets you manipulate HTML in a very easy way!;Require PHP 5+.;Supports invalid HTML.;Find tags on an HTML page with selectors just like jQuery.;Extract contents from HTML in a single line.;Download;Examples;How to get HTML elements;// Create DOM from URL or file;$html = file_get_html('http://www.example.com/');// Find all images;foreach($html->find('img') as $element);echo $element->src.;// Find all links;foreach($html->find('a') as $element);echo $element->href.;How to modify HTML elements;// Create DOM from string;$html = str_get_html(' Hello World ');$html->find('div', 1)->class = 'bar;$html->find('div[id=hello]', 0)->innertext = 'foo;echo $html;Extract content from HTML;// Dump contents (without tags) from HTML;echo file_get_html('http://www.google.com/')->plaintext;Scraping Slashdot;// Create DOM from URL;$html = file_get_html('http://slashdot.org/');// Find all article blocks;foreach($html->find('div.article') as $article);$item['title'] = $article->find('div.title', 0)->plaintext;$item['intro'] = $article->find('div.intro', 0)->plaintext;$item['details'] = $article->find('div.details', 0)->plaintext;$articles[] = $item;print_r($articles)   
CONTENT;
        $answer->question_id = 137;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          PHP offers three different APIs to connect to MySQL. These are the mysql (removed as of PHP 7), mysqli, and PDO extensions.;The mysql_* functions used to be very popular, but their use is not encouraged anymore. The documentation team is discussing the database security situation, and educating users to move away from the commonly used ext/mysql extension is part of this (check php.internals: deprecating ext/mysql).;And the later PHP developer team has taken the decision to generate E_DEPRECATED errors when users connect to MySQL, whether through mysql_connect(), mysql_pconnect() or the implicit connection functionality built into ext/mysql.;ext/mysql was officially deprecated as of PHP 5.5 and has been removed as of PHP 7.;See the Red Box?;When you go on any mysql_* function manual page, you see a red box, explaining it should not be used anymore.;Why;Moving away from ext/mysql is not only about security, but also about having access to all the features of the MySQL database.;ext/mysql was built for MySQL 3.23 and only got very few additions since then while mostly keeping compatibility with this old version which makes the code a bit harder to maintain. Missing features that is not supported by ext/mysql include: (from PHP manual).;Stored procedures (can't handle multiple result sets);Prepared statements;Encryption (SSL);Compression;Full Charset support;Reason to not use mysql_* function;Not under active development;In deprecation process (so the intention is to remove it from a future version of PHP);Lacks an OO interface;Doesn't support non-blocking, asynchronous queries;Doesn't support prepared statements or parameterized queries;Doesn't support stored procedures;Doesn't support multiple statements;Doesn't support transactions;Doesn't support all of the functionality in MySQL 5.1;Above point quoted from Quentin's answer;Lack of support for prepared statements is particularly important as they provide a clearer, less error prone method of escaping and quoting external data than manually escaping it with a separate function call.;See the comparison of SQL extensions.;Suppressing deprecation warnings;While code is being converted to MySQLi / PDO, E_DEPRECATED errors can be suppressed by setting error_reporting in php.ini to exclude E_DEPRECATED;error_reporting = E_ALL ^ E_DEPRECATED;Note that this will also hide other deprecation warnings, which, however, may be for things other than MySQL. (from PHP manual);The article PDO vs. MySQLi: Which Should You Use? by Dejan Marjanovic will help you to choose.;And a better way is PDO, and I am now writing a simple PDO tutorial.;A simple and short PDO tutorial;Q. First question in my mind was: what is `PDO`?;A. “ PDO – PHP Data Objects – is a database access layer providing a uniform method of access to multiple databases.”;Connecting to MySQL;With mysql_* function or we can say it the old way (deprecated in PHP 5.5 and above);$link = mysql_connect('localhost', 'user', 'pass');mysql_select_db('testdb', $link);mysql_set_charset('UTF-8', $link);With PDO: All you need to do is create a new PDO object. The constructor accepts parameters for specifying the database source PDO 's constructor mostly takes four parameters which are DSN (data source name) and optionally username, password.;Here I think you are familiar with all except DSN, this is new in PDO. A DSN is basically a string of options that tell PDO which driver to use, and connection details. For further reference, check PDO MySQL DSN.;$db = new PDO('mysql:host=localhost,dbname=testdb,charset=utf8', 'username', 'password');Note: you can also use charset=UTF-8, but sometimes it causes an error, so it's better to use utf8.;If there is any connection error, it will throw a PDOException object that can be cached to handle Exception further.;Good read: Connections and Connection management ¶;You can also pass in several driver options as an array to the fourth parameter. I recommend passing the parameter which puts PDO into exception mode. Because some PDO drivers don't support native prepared statements, so PDO performs emulation of the prepare. It also lets you manually enable this emulation. To use the native server-side prepared statements, you should explicitly set it false.;The other is to turn off prepare emulation which is enabled in the MySQL driver by default, but prepare emulation should be turned off to use PDO safely.;I will later explain why prepare emulation should be turned off. To find reason please check this post.;It is only usable if you are using an old version of MySQL which I do not recommended.;Below is an example of how you can do it;$db = new PDO('mysql:host=localhost,dbname=testdb,charset=UTF-8';username;password;array(PDO::ATTR_EMULATE_PREPARES => false;PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION));Can we set attributes after PDO construction?;Yes, we can also set some attributes after PDO construction with the setAttribute method;$db = new PDO('mysql:host=localhost,dbname=testdb,charset=UTF-8';username;password');$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);Error Handling;Error handling is much easier in PDO than mysql_*.;A common practice when using mysql_* is;//Connected to MySQL;$result = mysql_query("SELECT * FROM table", $link) or die(mysql_error($link));OR die() is not a good way to handle the error since we can not handle the thing in die. It will just end the script abruptly and then echo the error to the screen which you usually do NOT want to show to your end users, and let bloody hackers discover your schema. Alternately, the return values of mysql_* functions can often be used in conjunction with mysql_error() to handle errors.;PDO offers a better solution: exceptions. Anything we do with PDO should be wrapped in a try - catch block. We can force PDO into one of three error modes by setting the error mode attribute. Three error handling modes are below.;PDO::ERRMODE_SILENT. It's just setting error codes and acts pretty much the same as mysql_* where you must check each result and then look at $db->errorInfo(), to get the error details.;PDO::ERRMODE_WARNING Raise E_WARNING. (Run-time warnings (non-fatal errors). Execution of the script is not halted.);PDO::ERRMODE_EXCEPTION: Throw exceptions. It represents an error raised by PDO. You should not throw a PDOException from your own code. See Exceptions for more information about exceptions in PHP. It acts very much like or die(mysql_error()),, when it isn't caught. But unlike or die(), the PDOException can be caught and handled gracefully if you choose to do so.;Good read;Errors and error handling ¶;The PDOException class ¶;Exceptions ¶;Like;$stmt->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);$stmt->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);$stmt->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);And you can wrap it in try - catch, like below;try;//Connect as appropriate as above;$db->query('hi'), //Invalid query!;catch (PDOException $ex);echo "An Error occured!", //User friendly message/message you want to show to user;some_logging_function($ex->getMessage());You do not have to handle with try - catch right now. You can catch it at any time appropriate, but I strongly recommend you to use try - catch. Also it may make more sense to catch it at outside the function that calls the PDO stuff;function data_fun($db);$stmt = $db->query("SELECT * FROM table");return $stmt->fetchAll(PDO::FETCH_ASSOC);//Then later;try;data_fun($db);catch(PDOException $ex);//Here you can handle error and show message/perform action you want.;Also, you can handle by or die() or we can say like mysql_*, but it will be really varied. You can hide the dangerous error messages in production by turning display_errors off and just reading your error log.;Now, after reading all the things above, you are probably thinking: what the heck is that when I just want to start leaning simple SELECT, INSERT, UPDATE, or DELETE statements? Don't worry, here we go;Selecting Data;So what you are doing in mysql_* is;fetch(PDO::FETCH_ASSOC));echo $row['field1'];Or;query('SELECT * FROM table');$results = $stmt->fetchAll(PDO::FETCH_ASSOC);//Use $results;Note: If you are using the method like below (query()), this method returns a PDOStatement object. So if you want to fetch the result, use it like above.;query('SELECT * FROM table') as $row);echo $row['field1'];In PDO Data, it is obtained via the ->fetch(), a method of your statement handle. Before calling fetch, the best approach would be telling PDO how you’d like the data to be fetched. In the below section I am explaining this.;Fetch Modes;Note the use of PDO::FETCH_ASSOC in the fetch() and fetchAll() code above. This tells PDO to return the rows as an associative array with the field names as keys. There are many other fetch modes too which I will explain one by one.;First of all, I explain how to select fetch mode;$stmt->fetch(PDO::FETCH_ASSOC);In the above, I have been using fetch(). You can also use;PDOStatement::fetchAll() - Returns an array containing all of the result set rows;PDOStatement::fetchColumn() - Returns a single column from the next row of a result set;PDOStatement::fetchObject() - Fetches the next row and returns it as an object.;PDOStatement::setFetchMode() - Set the default fetch mode for this statement;Now I come to fetch mode;PDO::FETCH_ASSOC: returns an array indexed by column name as returned in your result set;PDO::FETCH_BOTH (default): returns an array indexed by both column name and 0-indexed column number as returned in your result set;There are even more choices! Read about them all in PDOStatement Fetch documentation..;Getting the row count;Instead of using mysql_num_rows to get the number of returned rows, you can get a PDOStatement and do rowCount(), like;query('SELECT * FROM table');$row_count = $stmt->rowCount();echo $row_count.' rows selected;Getting the Last Inserted ID;exec("INSERT INTO table(firstname, lastname) VAULES('John', 'Doe')");$insertId = $db->lastInsertId();Insert and Update or Delete statements;What we are doing in mysql_* function is;bindParam(':bla', $bla);bindParam(parameter,variable,data_type,length,driver_options);You can also bind using an execute array as well;prepare("SELECT * FROM table WHERE id=:id AND name=:name");$stmt->execute(array(':name' => $name, ':id' => $id));$rows = $stmt->fetchAll(PDO::FETCH_ASSOC);Another nice feature for OOP friends is that named placeholders have the ability to insert objects directly into your database, assuming the properties match the named fields. For example;class person;public $name;public $add;function __construct($a,$b);$this->name = $a;$this->add = $b;$demo = new person('john','29 bla district');$stmt = $db->prepare("INSERT INTO table (name, add) value (:name,:add)");$stmt->execute((array)$demo);Q. So now, what are unnamed placeholders and how do I use them?;A. Let's have an example;prepare("INSERT INTO folks (name, add) values (?,?)");$stmt->bindValue(1, $name, PDO::PARAM_STR);$stmt->bindValue(2, $add, PDO::PARAM_STR);$stmt->execute();and;$stmt = $db->prepare("INSERT INTO folks (name, add) values (?,?)");$stmt->execute(array('john', '29 bla district'));In the above, you can see those? instead of a name like in a name place holder. Now in the first example, we assign variables to the various placeholders ($stmt->bindValue(1, $name, PDO::PARAM_STR),). Then, we assign values to those placeholders and execute the statement. In the second example, the first array element goes to the first? and the second to the second?.;NOTE: In unnamed placeholders we must take care of the proper order of the elements in the array that we are passing to the PDOStatement::execute() method.;SELECT, INSERT, UPDATE, DELETE prepared queries;SELECT;$stmt = $db->prepare("SELECT * FROM table WHERE id=:id AND name=:name");$stmt->execute(array(':name' => $name, ':id' => $id));$rows = $stmt->fetchAll(PDO::FETCH_ASSOC);INSERT;$stmt = $db->prepare("INSERT INTO table(field1,field2) VALUES(:field1,:field2)");$stmt->execute(array(':field1' => $field1, ':field2' => $field2));$affected_rows = $stmt->rowCount();DELETE;$stmt = $db->prepare("DELETE FROM table WHERE id=:id");$stmt->bindValue(':id', $id, PDO::PARAM_STR);$stmt->execute();$affected_rows = $stmt->rowCount();UPDATE;$stmt = $db->prepare("UPDATE table SET name=? WHERE id=?");$stmt->execute(array($name, $id));$affected_rows = $stmt->rowCount();NOTE;However PDO and/or MySQLi are not completely safe. Check the answer Are PDO prepared statements sufficient to prevent SQL injection? by ircmaxell. Also, I am quoting some part from his answer;$pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);$pdo->query('SET NAMES GBK');$stmt = $pdo->prepare("SELECT * FROM test WHERE name =? LIMIT 1");$stmt->execute(array(chr(0xbf). chr(0x27). " OR 1=1 /*"))   
CONTENT;
        $answer->question_id = 138;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The keyword self does NOT refer merely to the 'current class', at least not in a way that restricts you to static members. Within the context of a non-static member, self also provides a way of bypassing the vtable (see wiki on vtable) for the current object. Just as you can use parent::methodName() to call the parents version of a function, so you can call self::methodName() to call the current classes implementation of a method.;class Person;private $name;public function __construct($name);$this->name = $name;public function getName();return $this->name;public function getTitle();return $this->getName()." the person;public function sayHello();echo "Hello, I'm ".$this->getTitle().;public function sayGoodbye();echo "Goodbye from ".self::getTitle().;class Geek extends Person;public function __construct($name);parent::__construct($name);public function getTitle();return $this->getName()." the geek;$geekObj = new Geek("Ludwig");$geekObj->sayHello();$geekObj->sayGoodbye();This will output;Hello, I'm Ludwig the geek;Goodbye from Ludwig the person;sayHello() uses the $this pointer, so the vtable is invoked to call Geek::getTitle().;sayGoodbye() uses self::getTitle(), so the vtable is not used, and Person::getTitle() is called. In both cases, we are dealing with the method of an instantiated object, and have access to the $this pointer within the called functions. 
CONTENT;
        $answer->question_id = 139;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use YouTube Data API to retrieve video thumbnails, caption, description, rating, statistics and more. API version 3 requires a key*. Obtain the key and create a videos: list request;https://www.googleapis.com/youtube/v3/videos?key=YOUR_API_KEY&part=snippet&id=VIDEO_ID;Example PHP Code;$data = file_get_contents("https://www.googleapis.com/youtube/v3/videos?key=YOUR_API_KEY&part=snippet&id=T0Jqdjbed40");$json = json_decode($data);var_dump($json->items[0]->snippet->thumbnails);Output;object(stdClass)#5 (5);["default"]=>;object(stdClass)#6 (3);["url"]=>;string(46) "https://i.ytimg.com/vi/T0Jqdjbed40/default.jpg;["width"]=>;int(120);["height"]=>;int(90);["medium"]=>;object(stdClass)#7 (3);["url"]=>;string(48) "https://i.ytimg.com/vi/T0Jqdjbed40/mqdefault.jpg;["width"]=>;int(320);["height"]=>;int(180);["high"]=>;object(stdClass)#8 (3);["url"]=>;string(48) "https://i.ytimg.com/vi/T0Jqdjbed40/hqdefault.jpg;["width"]=>;int(480);["height"]=>;int(360);["standard"]=>;object(stdClass)#9 (3);["url"]=>;string(48) "https://i.ytimg.com/vi/T0Jqdjbed40/sddefault.jpg;["width"]=>;int(640);["height"]=>;int(480);["maxres"]=>;object(stdClass)#10 (3);["url"]=>;string(52) "https://i.ytimg.com/vi/T0Jqdjbed40/maxresdefault.jpg;["width"]=>;int(1280);["height"]=>;int(720);* Not only that you need a key, you might be asked for billing information depending on the number of API requests you plan to make. However, few million requests per day are free.;Source article. 
CONTENT;
        $answer->question_id = 140;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Imagine someone has commissioned a large building to be built - a bar, let's say - and the following conversation takes place;Architect: For a building of this size and capacity, you will need fire exits here, here, and here.;Client: No, that's too complicated and expensive to maintain, I don't want any side doors or back doors.;Architect: Sir, fire exits are not optional, they are required as per the city's fire code.;Client: I'm not paying you to argue. Just do what I asked.;Does the architect then ask how to ethically build this building without fire exits?;In the building and engineering industry, the conversation is most likely to end like this;Architect: This building cannot be built without fire exits. You can go to any other licensed professional and he will tell you the same thing. I'm leaving now, call me back when you are ready to cooperate.;Computer programming may not be a licensed profession, but people often seem to wonder why our profession doesn't get the same respect as a civil or mechanical engineer - well, look no further. Those professions, when handed garbage (or outright dangerous) requirements, will simply refuse. They know it is not an excuse to say, "well, I did my best, but he insisted, and I've gotta do what he says." They could lose their license for that excuse.;I don't know whether or not you or your clients are part of any publicly-traded company, but storing passwords in any recoverable form would cause you to to fail several different types of security audits. The issue is not how difficult it would be for some "hacker" who got access to your database to recover the passwords. The vast majority of security threats are internal. What you need to protect against is some disgruntled employee walking off with all the passwords and selling them to the highest bidder. Using asymmetrical encryption and storing the private key in a separate database does absolutely nothing to prevent this scenario, there's always going to be someone with access to the private database, and that's a serious security risk.;There is no ethical or responsible way to store passwords in a recoverable form. Period.  
CONTENT;
        $answer->question_id = 141;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It should be noted that unset() will keep indexes untouched, which is what you'd expect when using string indexes (array as hashtable), but can be quite surprising when dealing with integer indexed arrays;$array = array(0, 1, 2, 3);unset($array[2]);var_dump($array);/* array(3);[0]=>;int(0);[1]=>;int(1);[3]=>;int(3);*/;$array = array(0, 1, 2, 3);array_splice($array, 2, 1);var_dump($array);/* array(3);[0]=>;int(0);[1]=>;int(1);[2]=>;int(3);*/;So array_splice() can be used if you'd like to normalize your integer keys. Another option is using array_values() after unset();$array = array(0, 1, 2, 3);unset($array[2]);$array = array_values($array);var_dump($array);/* array(3);[0]=>;int(0);[1]=>;int(1);[2]=>;int(3);*/  
CONTENT;
        $answer->question_id = 142;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In example 3 you don't modify the array. In all other examples you modify either the contents or the internal array pointer. This is important when it comes to PHP arrays because of the semantics of the assignment operator.;The assignment operator for the arrays in PHP works more like a lazy clone. Assigning one variable to another that contains an array will clone the array, unlike most languages. However, the actual cloning will not be done unless it is needed. This means that the clone will take place only when either of the variables is modified (copy-on-write).;Here is an example;$a = array(1,2,3);$b = $a, // This is lazy cloning of $a. For the time;// being $a and $b point to the same internal;// data structure.;$a[] = 3, // Here $a changes, which triggers the actual;// cloning. From now on, $a and $b are two;// different data structures. The same would;// happen if there were a change in $b.;Coming back to your test cases, you can easily imagine that foreach creates some kind of iterator with a reference to the array. This reference works exactly like the variable $b in my example. However, the iterator along with the reference live only during the loop and then, they are both discarded. Now you can see that, in all cases but 3, the array is modified during the loop, while this extra reference is alive. This triggers a clone, and that explains what's going on here!;Here is an excellent article for another side effect of this copy-on-write behaviour: The PHP Ternary Operator: Fast or not? 
CONTENT;
        $answer->question_id = 143;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          So, you want to use bcrypt? Awesome! However, like other areas of cryptography, you shouldn't be doing it yourself. If you need to worry about anything like managing keys, or storing salts or generating random numbers, you're doing it wrong.;The reason is simple: it's so trivially easy to screw up bcrypt. In fact, if you look at almost every piece of code on this page, you'll notice that it's violating at least one of these common problems.;Face It, Cryptography is hard.;Leave it for the experts. Leave it for people who's job it is to maintain these libraries. If you need to make a decision, you're doing it wrong.;Instead, just use a library. Several exist depending on your requirements.;Libraries;Here is a breakdown of some of the more common APIs.;PHP 5.5 API - (Available for 5.3.7+);Starting in PHP 5.5, a new API for hashing passwords is being introduced. There is also a shim compatibility library maintained (by me) for 5.3.7+. This has the benefit of being a peer-reviewed and simple to use implementation.;function register($username, $password);$hash = password_hash($password, PASSWORD_BCRYPT);save($user, $hash);function login($username, $password);$hash = loadHashByUsername($username);if (password_verify($password, $hash));//login;else;// failure;Really, it's aimed to be extremely simple.;Resources;Documentation: on PHP.net;Compatibility Library: on GitHub;PHP's RFC: on wiki.php.net;Zend\Crypt\Password\Bcrypt (5.3.2+);This is another API that's similar to the PHP 5.5 one, and does a similar purpose.;function register($username, $password);$bcrypt = new Zend\Crypt\Password\Bcrypt();$hash = $bcrypt->create($password);save($user, $hash);function login($username, $password);$hash = loadHashByUsername($username);$bcrypt = new Zend\Crypt\Password\Bcrypt();if ($bcrypt->verify($password, $hash));//login;else;// failure;Resources;Documentation: on Zend;Blog Post: Password Hashing With Zend Crypt;PasswordLib;This is a slightly different approach to password hashing. Rather than simply supporting bcrypt, PasswordLib supports a large number of hashing algorithms. It's mainly useful in contexts where you need to support compatibility with legacy and disparate systems that may be outside of your control. It supports a large number of hashing algorithms. And is supported 5.3.2+;function register($username, $password);$lib = new PasswordLib\PasswordLib();$hash = $lib->createPasswordHash($password, '$2y$', array('cost' => 12));save($user, $hash);function login($username, $password);$hash = loadHashByUsername($username);$lib = new PasswordLib\PasswordLib();if ($lib->verifyPasswordHash($password, $hash));//login;else;// failure;References;Source Code / Documentation: GitHub;PHPASS;This is a layer that does support bcrypt, but also supports a fairly strong algorithm that's useful if you do not have access to PHP >= 5.3.2... It actually supports PHP 3.0+ (although not with bcrypt).;function register($username, $password);$phpass = new PasswordHash(12, false);$hash = $phpass->HashPassword($password);save($user, $hash);function login($username, $password);$hash = loadHashByUsername($username);$phpass = new PasswordHash(12, false);if ($phpass->CheckPassword($password, $hash));//login;else;// failure;Resources;Code: cvsweb;Project Site: on OpenWall;A review of the < 5.3.0 algorithm: on StackOverflow;Note: Don't use the PHPASS alternatives that are not hosted on openwall, they are different projects!!!;About BCrypt;If you notice, every one of these libraries returns a single string. That's because of how BCrypt works internally. And there are a TON of answers about that. Here are a selection that I've written, that I won't copy/paste here, but link to;Fundamental Difference Between Hashing And Encryption Algorithms - Explaining the terminology and some basic information about them.;About reversing hashes without rainbow tables - Basically why we should use bcrypt in the first place...;Storing bcrypt Hashes - basically why is the salt and algorithm included in the hash result.;How to update the cost of bcrypt hashes - basically how to choose and then maintain the cost of the bcrypt hash.;How to hash long passwords with bcrypt - explaining the 72 character password limit of bcrypt.;How bcrypt uses salts;Best practices of salting and peppering passwords - Basically, don't use a "pepper;Migrating old md5 passwords to bcrypt;Wrap Up;There are many different choices. Which you choose is up to you. However, I would HIGHLY recommend that you use one of the above libraries for handling this for you.;Again, if you're using crypt() directly, you're probably doing something wrong. If your code is using hash() (or md5() or sha1()) directly, you're almost definitely doing something wrong.;Just use a library...    
CONTENT;
        $answer->question_id = 144;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          function startsWith($haystack, $needle);$length = strlen($needle);return (substr($haystack, 0, $length) === $needle);function endsWith($haystack, $needle);$length = strlen($needle);if ($length == 0);return true;return (substr($haystack, -$length) === $needle);Use this if you don't want to use a regex.  
CONTENT;
        $answer->question_id = 145;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This error message gets triggered when anything is sent before you send HTTP headers (with setcookie or header). Common reasons for outputting something before the HTTP headers are;Accidental whitespace, often at the beginning or end of files, like this;- it's not required anyways.;Byte order marks at the beginning of a php file. Examine your php files with a hex editor to find out whether that's the case. They should start with the bytes 3F 3C. You can safely remove the BOM EF BB BF from the start of files.;Explicit output, such as calls to echo, printf, readfile, passthru, code before <? etc.;A warning outputted by php, if the display_errors php.ini property is set. Instead of crashing on a programmer mistake, php silently fixes the error and emits a warning. While you can modify the display_errors or error_reporting configurations, you should rather fix the problem.;Common reasons are accesses to undefined elements of an array (such as $_POST['input'] without using empty or isset to test whether the input is set), or using an undefined constant instead of a string literal (as in $_POST[input], note the missing quotes).;Turning on output buffering should make the problem go away, all output after the call to ob_start is buffered in memory until you release the buffer, e.g. with ob_end_flush.;However, while output buffering avoids the issues, you should really determine why your application outputs an HTTP body before the HTTP header. That'd be like taking a phone call and discussing your day and the weather before telling the caller that he's got the wrong number.;share  146
        379 A much shorter and safer answer - don't write your own password mechanism at all, use a tried and tested mechanism.;PHP 5.5 or higher: password_hash() is good quality and part of PHP core.;Older PHP versions: OpenWall's phpass library is much better than most custom code and used in WordPress, Drupal, etc.;Most programmers just don't have the expertise to write crypto related code safely without introducing vulnerabilities.;Quick self-test: what is password stretching and how many iterations should you use? If you don't know the answer, you should use password_hash() or phpass, as password stretching is now a critical feature of password mechanisms due to much faster CPUs and the use of GPUs and FPGAs to crack passwords at rates of billions of guesses per second (with GPUs).;For example, you can crack all 8-character Windows passwords in 6 hours using 25 GPUs installed in 5 desktop PCs. This is brute-forcing i.e. enumerating and checking every 8-character Windows password, including special characters, and is not a dictionary attack. That was in 2012, as of 2016 you could use fewer GPUs.;There are also many rainbow table attacks on Windows passwords that run on ordinary CPUs and are very fast. All this is because Windows still doesn't salt or stretch its passwords - don't make the same mistake as Microsoft did!;See also;excellent answer with more about why password_hash() or phpass are the best way to go.;good blog article giving recommmended 'work factors' (number of iterations) for main algorithms including bcrypt, scrypt and PBKDF2.   
CONTENT;
        $answer->question_id = 147;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There is a native extension, too. The SplEnum;SplEnum gives the ability to emulate and create enumeration objects;natively in PHP.;http://www.php.net/manual/en/class.splenum.php   
CONTENT;
        $answer->question_id = 148;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Do not try to prevent SQL injection by sanitizing input data.;Instead, do not allow data to be used in creating your SQL code. Use Prepared Statements (i.e. using parameters in a template query) that uses bound variables. It is the only way to be guaranteed against SQL injection.;Please see my website http://bobby-tables.com/ for more about preventing SQL injection.    
CONTENT;
        $answer->question_id = 149;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          stdClass is just a generic 'empty' class that's used when casting other types to objects. Despite what the other two answers say, stdClass is not the base class for objects in PHP. This can be demonstrated fairly easily;class Foo{};$foo = new Foo();echo ($foo instanceof stdClass)?'Y':'N;// outputs 'N;I don't believe there's a concept of a base object in PHP 
CONTENT;
        $answer->question_id = 150;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Simple way of PHP session expiry in 30 minutes.;Note: if you want to change the time, just change the 30 with your desired time and do not change * 60: this will gives the minutes.;In minutes: (30 * 60);In days: (n * 24 * 60 * 60) n = no of days;Login.php;HomePage.php;$_SESSION['expire']);session_destroy();echo "Your session has expired! Login here;else { //Starting this else one [else1];?>;Welcome;LogOut.php    
CONTENT;
        $answer->question_id = 151;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I've got a really simple chat example as part of slosh.;Edit: (since everyone's pasting their code in here);This is the complete JSON-based multi-user chat using long-polling and slosh. This is a demo of how to do the calls, so please ignore the XSS problems. Nobody should deploy this without sanitizing it first.;Notice that the client always has a connection to the server, and as soon as anyone sends a message, everyone should see it roughly instantly.;<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">;slosh chat;Welcome to Slosh Chat;First!;Welcome to chat. Please don't hurt each other.    
CONTENT;
        $answer->question_id = 152;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          $_SERVER['REMOTE_ADDR'] may not actually contain real client IP addresses, as it will give you a proxy address for clients connected through a proxy, for example. That may;well be what you really want, though, depending what your doing with the IPs. Someone's private RFC1918 address may not do you any good if you're say, trying to see where your traffic is originating from, or remembering what IP the user last connected from, where the public IP of the proxy or NAT gateway might be the more appropriate to store.;There are several HTTP headers like X-Forwarded-For which may or may not be set by various proxies. The problem is that those are merely HTTP headers which can be set by anyone. There's no guarantee about their content. $_SERVER['REMOTE_ADDR'] is the actual physical IP address that the web server received the connection from and that the response will be sent to. Anything else is just arbitrary and voluntary information. There's only one scenario in which you can trust this information: you are controlling the proxy that sets this header. Meaning only if you know 100% where and how the header was set should you heed it for anything of importance.;Having said that, here's some sample code;if (!empty($_SERVER['HTTP_CLIENT_IP']));$ip = $_SERVER['HTTP_CLIENT_IP'];elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']));$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];else;$ip = $_SERVER['REMOTE_ADDR'];Editor's note: Using the above code has security implications. The client can set all HTTP header information (ie. $_SERVER['HTTP_...) to any arbitrary value it wants. As such it's far more reliable to use $_SERVER['REMOTE_ADDR'], as this cannot be set by the user.;From: http://roshanbh.com.np/2007/12/getting-real-ip-address-in-php.html  
CONTENT;
        $answer->question_id = 153;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Fatal error: Call to a member function... on a non-object;Happens with code similar to xyz->method() where xyz is not an object and therefore that method can not be called.;This is a fatal error which will stop the script (forward compatibility notice: It will become a catchable error starting with PHP 7).;Most often this is a sign that the code has missing checks for error conditions. Validate that an object is actually an object before calling its methods.;A typical example would be;//... some code using PDO;$statement = $pdo->prepare('invalid query',...);$statement->execute(...);In the example above, the query cannot be prepared and prepare() will assign false to $statement. Trying to call the execute() method will then result in the Fatal Error because false is a "non-object" because the value is a boolean.;Figure out why your function returned a boolean instead of an object. For example, check the $pdo object for the last error that occurred. Details on how to debug this will depend on how errors are handled for the particular function/object/class in question.;If even the ->prepare is failing then your $pdo database handle object didn't get passed into the current scope. Find where it got defined. Then pass it as a parameter, store it as property, or share it via the global scope.;Related Questions;Call to a member function on a non-object;List all PHP "Fatal error: Call to a member function... on a non-object" Questions on Stackoverflow 
CONTENT;
        $answer->question_id = 154;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Tieme put a lot of effort into his excellent answer, but I think the core of the OPs question is how these technologies relate to PHP rather than how each technology works.;PHP is the most used language in web development besides the obvious client side html, css, and javascript. Yet PHP has 2 major issues when it comes to real time applications;1) PHP started as a very basic CGI. PHP has progressed very far since it's early stage, but it happened in small steps. PHP already had many millions of users by the time it became the embed-able and flexible C library that it is today, most of whom were dependent on it's earlier model of execution, so it hasn't yet made a solid attempt to escape the cgi model internally. Even the commandline interface invokes the PHP library (libphp5.so on linux, php5ts.dll on windows, etc) as if it still a cgi processing a GET/POST request. It still executes code as if it just has to build a "page" and then end it's life cycle. As a result, it has very little support for multi-thread or event driven programming (within PHP userspace), making it currently unpractical for real time, multi-user applications.;Note that PHP does have extensions to provide event loops (such as libevent) and threads (such as pthreads) in PHP userspace, but very, very, few of the applications use these.;2) PHP still has significant issues with garbage collection. Although these issues have been consistently improving (likely it's greatest step to end the life cycle as described above), even the best attempts at creating long running PHP applications require being restarted on a regular basis. This also make it unpractical for real time applications.;PHP 7 will be a great step to fix these issues as well, and seems very promising as a platform for real-time applications.  
CONTENT;
        $answer->question_id = 155;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'd like to add one thing to chazomaticus' excellent answer;Don't forget the META tag either (like this, or the HTML4 or XHTML version of it);That seems trivial, but IE7 has given me problems with that before.;I was doing everything right, the database, database connection and Content-Type HTTP header were all set to UTF-8, and it worked fine in all other browsers, but Internet Explorer still insisted on using the "Western European" encoding.;It turned out the page was missing the META tag. Adding that solved the problem.;Edit;The W3C actually has a rather large section dedicated to I18N. They have a number of articles related to this issue – describing the HTTP, (X)HTML and CSS side of things;FAQ: Changing (X)HTML page encoding to UTF-8;Declaring character encodings in HTML;Tutorial: Character sets & encodings in XHTML, HTML and CSS;Setting the HTTP charset parameter;They recommend using both the HTTP header and HTML meta tag (or XML declaration in case of XHTML served as XML).   
CONTENT;
        $answer->question_id = 156;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use;require;when the file is required by your application, e.g. an important message template or a file containing configuration variables without which the app would break.;require_once;when the file contains content that would produce an error on subsequent inclusion, e.g.;function important() { /* important code */} is definitely needed in your application but since functions cannot be redeclared should not be included again.;include;when the file is not required and application flow should continue when not found, e.g.;great for templates referencing variables from the current scope or something;include_once;optional dependencies that would produce errors on subsequent loading or maybe remote file inclusion that you do not want to happen twice due to the HTTP overhead;But basically, it's up to you when to use which. 
CONTENT;
        $answer->question_id = 157;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          function aasort (&$array, $key);$sorter=array();$ret=array();reset($array);foreach ($array as $ii => $va);$sorter[$ii]=$va[$key];asort($sorter);foreach ($sorter as $ii => $va);$ret[$ii]=$array[$ii];$array=$ret;aasort($your_array,"order")   
CONTENT;
        $answer->question_id = 158;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This error message is displayed when you have an error in your query which caused it to fail. It will manifest itself when using;mysql_fetch_array / mysqli_fetch_array();mysql_fetch_assoc() / mysqli_fetch_assoc();mysql_num_rows() / mysqli_num_rows();Note: This error does not appear if no rows are affected by your query. Only a query with an invalid syntax will generate this error.;Troubleshooting Steps;Make sure you have your development server configured to display all errors. You can do this by placing this at the top of your files or in your config file: error_reporting(-1),. If you have any syntax errors this will point them out to you.;Use mysql_error(). mysql_error() will report any errors MySQL encountered while performing your query.;Sample usage;mysql_connect($host, $username, $password) or die("cannot connect");mysql_select_db($db_name) or die("cannot select DB");$sql = "SELECT * FROM table_name;$result = mysql_query($sql);if (false === $result);echo mysql_error();Run your query from the MySQL command line or a tool like phpMyAdmin. If you have a syntax error in your query this will tell you what it is.;Make sure your quotes are correct. A missing quote around the query or a value can cause a query to fail.;Make sure you are escaping your values. Quotes in your query can cause a query to fail (and also leave you open to SQL injections). Use mysql_real_escape_string() to escape your input.;Make sure you are not mixing mysqli_* and mysql_* functions. They are not the same thing and cannot be used together. (If you're going to choose one or the other stick with mysqli_*. See below for why.);Other tips;mysql_* functions should not be used for new code. They are no longer maintained and the community has begun the deprecation process. Instead you should learn about prepared statements and use either PDO or MySQLi. If you can't decide, this article will help to choose. If you care to learn, here is good PDO tutorial.  
CONTENT;
        $answer->question_id = 159;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          REST in PHP can be done pretty simple. Create http://example.com/test.php (outlined below). Use this for REST calls, e.g. http://example.com/test.php/testing/123/hello. This works with Apache and Lighttpd out of the box, and no rewrite rules are needed.;<?php;$method = $_SERVER['REQUEST_METHOD'];$request = explode("/", substr(@$_SERVER['PATH_INFO'], 1));switch ($method);case 'PUT;do_something_with_put($request);break;case 'POST;do_something_with_post($request);break;case 'GET;do_something_with_get($request);break;case 'HEAD;do_something_with_head($request);break;case 'DELETE;do_something_with_delete($request);break;case 'OPTIONS;do_something_with_options($request);break;default;handle_error($request);break 
CONTENT;
        $answer->question_id = 160;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Short version to output link on a webpage;$url = "//{$_SERVER['HTTP_HOST']}{$_SERVER['REQUEST_URI']};$escaped_url = htmlspecialchars($url, ENT_QUOTES, 'UTF-8');echo ' '. $escaped_url. ';Here are some more details about the issues and edge cases of the //example.com/path/ format;Full version;function url_origin($s, $use_forwarded_host = false);$ssl = (! empty($s['HTTPS']) && $s['HTTPS'] == 'on');$sp = strtolower($s['SERVER_PROTOCOL']);$protocol = substr($sp, 0, strpos($sp, '/')). (($ssl)? 's': '');$port = $s['SERVER_PORT'];$port = ((! $ssl && $port=='80') || ($ssl && $port=='443'))? '': ':'.$port;$host = ($use_forwarded_host && isset($s['HTTP_X_FORWARDED_HOST']))? $s['HTTP_X_FORWARDED_HOST']: (isset($s['HTTP_HOST'])? $s['HTTP_HOST']: null);$host = isset($host)? $host: $s['SERVER_NAME']. $port;return $protocol. '://'. $host;function full_url($s, $use_forwarded_host = false);return url_origin($s, $use_forwarded_host). $s['REQUEST_URI'];$absolute_url = full_url($_SERVER);echo $absolute_url;This is a heavily modified version of http://snipplr.com/view.php?codeview&id=2734.;URL structure;scheme:// username:password @domain:port/path?query_string# fragment_id;The parts in bold will not be included by the function;Notes;This function does not include username:password from a full URL or the fragment (hash).;It will not show the default port 80 for HTTP and port 443 for HTTPS.;Only tested with http and https schemes.;The #fragment_id is not sent to the server by the client (browser) and will not be added to the full URL.;$_GET will only contain foo=bar2 for an URL like /example?foo=bar1&foo=bar2.;Some CMS's and environments will rewrite $_SERVER['REQUEST_URI'] and return /example?foo=bar2 for an URL like /example?foo=bar1&foo=bar2, use $_SERVER['QUERY_STRING'] in this case.;Keep in mind that an URI = URL + URN, but due to popular use, URL now means both URI and URL.;You should remove HTTP_X_FORWARDED_HOST if you do not plan to use proxies or balancers.;The spec says that the Host header must contain the port number unless it is the default number.;Client (Browser) controlled variables;$_SERVER['REQUEST_URI']. Any unsupported characters are encoded by the browser before they are sent.;$_SERVER['HTTP_HOST'] and is not always available according to comments in the PHP manual: http://php.net/manual/en/reserved.variables.php;$_SERVER['HTTP_X_FORWARDED_HOST'] gets set by balancers and is not mentioned in the list of $_SERVER variables in the PHP manual.;Server controlled variables;$_SERVER['HTTPS']. The client chooses to use this, but the server returns the actual value of either empty or "on".;$_SERVER['SERVER_PORT']. The server only accepts allowed numbers as ports.;$_SERVER['SERVER_PROTOCOL']. The server only accepts certain protocols.;$_SERVER['SERVER_NAME']. It is set manually in the server configuration and is not available for IPv6 according to kralyk.;Related;HTTP_HOST vs. SERVER_NAME;Is Port Number Required in HTTP "Host" Header Parameter?;http://stackoverflow.com/a/28049503/175071  
CONTENT;
        $answer->question_id = 161;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can't catch parse errors when enabling error output at runtime, because it parses the file before actually executing anything (and since it encounters an error during this, it won't execute anything). You'll need to change the actual server configuration so that display_errors is on and the approriate error_reporting level is used. If you don't have access to php.ini, you may be able to use.htaccess or similar, depending on the server.;This question may provide additional info.  
CONTENT;
        $answer->question_id = 162;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          As Mike pointed out (the easiest possible way);$arr = array(4 => 'apple', 7 => 'orange', 13 => 'plum');echo reset($arr), //echoes "apple;From PHP's documentation;mixed reset (array &&$array);Description;reset() rewinds array's internal pointer to the first element and returns the value of the first array element, or FALSE if the array is;empty.  
CONTENT;
        $answer->question_id = 163;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Public;When you declare a method (function) or a property (variable) as public, those methods and properties can be accessed by;The same class that declared it.;The classes that inherit the above declared class.;Any foreign elements outside this class can also access those things.;Example;name, // The public variable will be available to the inherited class;// Inherited class Daddy wants to know Grandpas Name;$daddy = new Daddy;echo $daddy->displayGrandPaName(), // Prints 'Mark Henry;// Public variables can also be accessed outside of the class!;$outsiderWantstoKnowGrandpasName = new GrandPa;echo $outsiderWantstoKnowGrandpasName->name, // Prints 'Mark Henry;Protected;When you declare a method (function) or a property (variable) as protected, those methods and properties can be accessed by;The same class that declared it.;The classes that inherit the above declared class.;Outsider members cannot access those variables. "Outsiders" in the sense that they are not object instances of the declared class itself.;Example;name;$daddy = new Daddy;echo $daddy->displayGrandPaName(), // Prints 'Mark Henry;$outsiderWantstoKnowGrandpasName = new GrandPa;echo $outsiderWantstoKnowGrandpasName->name, // Results in a Fatal Error;The exact error will be this;PHP Fatal error: Cannot access protected property GrandPa::$name;Private;When you declare a method (function) or a property (variable) as private, those methods and properties can be accessed by;The same class that declared it.;Outsider members cannot access those variables. Outsiders in the sense that they are not object instances of the declared class itself and even the classes that inherit the declared class.;Example;name;$daddy = new Daddy;echo $daddy->displayGrandPaName(), // Results in a Notice;$outsiderWantstoKnowGrandpasName = new GrandPa;echo $outsiderWantstoKnowGrandpasName->name, // Results in a Fatal Error;The exact error messages will be;Notice: Undefined property: Daddy::$name;Fatal error: Cannot access private property GrandPa::$name;Dissecting the Grandpa Class using Reflection;This subject is not really out of scope, and I'm adding it here just to prove that reflection is really powerful. As I had stated in the above three examples, protected and private members (properties and methods) cannot be accessed outside of the class.;However, with reflection you can do the extra-ordinary by even accessing protected and private members outside of the class!;Well, what is reflection?;Reflection adds the ability to reverse-engineer classes, interfaces;functions, methods and extensions. Additionally, they offers ways to;retrieve doc comments for functions, classes and methods.;Preamble;We have a class named Grandpas and say we have three properties. For easy understanding, consider there are three grandpas with names;Mark Henry;John Clash;Will Jones;Let us make them (assign modifiers) public, protected and private respectively. You know very well that protected and private members cannot be accessed outside the class. Now let's contradict the statement using reflection.;The code;$v);echo "The name of grandpa is $v and he resides in the variable $k;echo;#Scenario 2: Using reflection;$granpa = new ReflectionClass('GrandPas'), // Pass the Grandpas class as the input for the Reflection class;$granpaNames=$granpa->getDefaultProperties(), // Gets all the properties of the Grandpas class (Even though it is a protected or private);echo "#Scenario 2: With reflection;echo "Printing members the 'reflect' way..;foreach($granpaNames as $k=>$v);echo "The name of grandpa is $v and he resides in the variable $k;Output;#Scenario 1: Without reflection;Printing members the usual way.. (Without reflection);The name of grandpa is Mark Henry and he resides in the variable name1;#Scenario 2: With reflection;Printing members the 'reflect' way..;The name of grandpa is Mark Henry and he resides in the variable name1;The name of grandpa is John Clash and he resides in the variable name2;The name of grandpa is Will Jones and he resides in the variable name3;Common Misconceptions;Please do not confuse with the below example. As you can still see, the private and protected members cannot be accessed outside of the class without using reflection;Mark Henry;[name2:protected] => John Clash;[name3:GrandPas:private] => Will Jones;Debugging functions;print_r, var_export and var_dump are debugger functions. They present information about a variable in a human-readable form. These three functions will reveal the protected and private properties of objects with PHP 5. Static class members will not be shown.;More resources;The PHP Manual - OOP Properties;The PHP Manual - OOP Visibility;Techflirt.com - Visibility in PHP Classes;Jordizle.com - Public, Private, Protected in PHP 5;Tuxradar.com - Public, Private and Protected   
CONTENT;
        $answer->question_id = 164;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          function Redirect($url, $permanent = false);if (headers_sent() === false);header('Location: '. $url, true, ($permanent === true)? 301: 302);exit();Redirect('http://www.google.com/', false);Don't forget to die()/exit()!  
CONTENT;
        $answer->question_id = 165;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          A Thread Safe version should be used if you install PHP as an Apache module, as a Worker MPM (multi-processing model).;The Non Thread Safe version should be used if you install PHP as a CGI binary.   
CONTENT;
        $answer->question_id = 166;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Be very, very aware of this problem that can occur when using utf8_general_ci.;MySQL will not distinguish between some characters in select statements, if the utf8_general_ci collation is used. This can lead to very nasty bugs - especially for example, where usernames are involved. Depending on the implementation that uses the database tables, this problem could allow malicious users to create a username matching an administrator account.;This problem exposes itself at the very least in early 5.x versions - I'm not sure if this behaviour as changed later.;I'm no DBA, but to avoid this problem, I always go with utf8-bin instead of a case-insensitive one.;The script below describes the problem by example.;-- first, create a sandbox to play in;CREATE DATABASE `sandbox`;use `sandbox`;-- next, make sure that your client connection is of the same;-- character/collate type as the one we're going to test next;charset utf8 collate utf8_general_ci;-- now, create the table and fill it with values;CREATE TABLE `test` (`key` VARCHAR(16), `value` VARCHAR(16));CHARACTER SET utf8 COLLATE utf8_general_ci;INSERT INTO `test` VALUES ('Key ONE', 'value'), ('Key TWO', 'valúe');-- (verify);SELECT * FROM `test`;-- now, expose the problem/bug;SELECT * FROM test WHERE `value` = 'value;--;-- Note that we get BOTH keys here! MySQLs UTF8 collates that are;-- case insensitive (ending with _ci) do not distinguish between;-- both values!;--;-- collate 'utf8_bin' doesn't have this problem, as I'll show next;--;-- first, reset the client connection charset/collate type;charset utf8 collate utf8_bin;-- next, convert the values that we've previously inserted in the table;ALTER TABLE `test` CONVERT TO CHARACTER SET utf8 COLLATE utf8_bin;-- now, re-check for the bug;SELECT * FROM test WHERE `value` = 'value;--;-- Note that we get just one key now, as you'd expect.;--;-- This problem appears to be specific to utf8. Next, I'll try to;-- do the same with the 'latin1' charset;--;-- first, reset the client connection charset/collate type;charset latin1 collate latin1_general_ci;-- next, convert the values that we've previously inserted;-- in the table;ALTER TABLE `test` CONVERT TO CHARACTER SET latin1 COLLATE latin1_general_ci;-- now, re-check for the bug;SELECT * FROM test WHERE `value` = 'value;--;-- Again, only one key is returned (expected). This shows;-- that the problem with utf8/utf8_generic_ci isn't present;-- in latin1/latin1_general_ci;--;-- To complete the example, I'll check with the binary collate;-- of latin1 as well;-- first, reset the client connection charset/collate type;charset latin1 collate latin1_bin;-- next, convert the values that we've previously inserted in the table;ALTER TABLE `test` CONVERT TO CHARACTER SET latin1 COLLATE latin1_bin;-- now, re-check for the bug;SELECT * FROM test WHERE `value` = 'value;--;-- Again, only one key is returned (expected).;--;-- Finally, I'll re-introduce the problem in the exact same;-- way (for any sceptics out there);-- first, reset the client connection charset/collate type;charset utf8 collate utf8_generic_ci;-- next, convert the values that we've previously inserted in the table;ALTER TABLE `test` CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;-- now, re-check for the problem/bug;SELECT * FROM test WHERE `value` = 'value;--;-- Two keys.;--;DROP DATABASE sandbox   
CONTENT;
        $answer->question_id = 167;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I suggest to use DateTime and DateInterval objects.;$date1 = new DateTime("2007-03-24");$date2 = new DateTime("2009-06-26");$interval = $date1->diff($date2);echo "difference ". $interval->y. " years, ". $interval->m." months, ".$interval->d." days;// shows the total amount of days (not divided into years, months and days like above);echo "difference ". $interval->days. " days;read more php DateTime::diff manual;From the manual;As of PHP 5.2.2, DateTime objects can be compared using comparison operators.;$date1 = new DateTime("now");$date2 = new DateTime("tomorrow");var_dump($date1 == $date2), // bool(false);var_dump($date1 $date2), // bool(false)  
CONTENT;
        $answer->question_id = 168;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          share | improve this answer 169
        402 Try these;Q1: this notice means $varname is not;defined at current scope of the;script.;Q2: Use of isset(), empty() conditions before using any suspicious variable works well.;// recommended solution;$user_name = $_SESSION['user_name'];if (empty($user_name)) $user_name = ';OR;// just define at the top of the script index.php;$user_name = ';$user_name = $_SESSION['user_name'];OR;$user_name = $_SESSION['user_name'];if (!isset($user_name)) $user_name = ';QUICK Solution;// not the best solution, but works;// in your php setting use, it helps hiding site wide notices;error_reporting(E_ALL ^ E_NOTICE);Note about sessions;When using sessions, session_start(), is required to be placed inside all files using sessions.;http://php.net/manual/en/features.sessions.php   
CONTENT;
        $answer->question_id = 170;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          To merely check whether the array has non-integer keys (not whether the array is sequentially-indexed or zero-indexed);function has_string_keys(array $array);return count(array_filter(array_keys($array), 'is_string')) > 0;If there is at least one string key, $array will be regarded as an associative array. 
CONTENT;
        $answer->question_id = 171;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          INSERT INTO `table` (value1, value2);SELECT 'stuff for value1', 'stuff for value2' FROM `table`;WHERE NOT EXISTS (SELECT * FROM `table`;WHERE value1='stuff for value1' AND value2='stuff for value2');LIMIT 1;Alternatively, the outer SELECT statement can refer to DUAL in order to handle the case where the table is initially empty;INSERT INTO `table` (value1, value2);SELECT 'stuff for value1', 'stuff for value2' FROM DUAL;WHERE NOT EXISTS (SELECT * FROM `table`;WHERE value1='stuff for value1' AND value2='stuff for value2');LIMIT 1   
CONTENT;
        $answer->question_id = 172;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          JSON is simpler and faster than PHP's serialization format and should be used unless;You're storing deeply nested arrays;json_decode(): "This function will return false if the JSON encoded data is deeper than 127 elements.;You're storing objects that need to be unserialized as the correct class;You're interacting with old PHP versions that don't support json_decode 
CONTENT;
        $answer->question_id = 173;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          array_keys returns an array of keys. Take the first entry. Alternatively, you could call reset on the array, and subsequently key. The latter approach is probably slightly faster (Thoug I didn't test it), but it has the side effect of resetting the internal pointer.  
CONTENT;
        $answer->question_id = 174;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'm too fond of to let it go. Never had a problem with it. I'll wait until it bites me in the ass. In all seriousness, 85% of (my) clients have access to php.ini in the rare occasion they are turned off. The other 15% use mainstream hosting providers, and virtually all of them have them enabled. I love 'em.    
CONTENT;
        $answer->question_id = 175;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          pathinfo();An example...;$path_info = pathinfo('/foo/bar/baz.bill');echo $path_info['extension'], // "bill  
CONTENT;
        $answer->question_id = 176;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In MySQL 5 and above, TIMESTAMP values are converted from the current time zone to UTC for storage, and converted back from UTC to the current time zone for retrieval. (This occurs only for the TIMESTAMP data type, and not for other types such as DATETIME.);By default, the current time zone for each connection is the server's time. The time zone can be set on a per-connection basis, as described in MySQL Server Time Zone Support.   
CONTENT;
        $answer->question_id = 177;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I find this format the most useful as it includes the host field which is important in MySQL to distinguish between user records.;select User,Host from mysql.user  
CONTENT;
        $answer->question_id = 178;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          BOOL and BOOLEAN are synonyms of TINYINT(1). Zero is false, anything else is true. More information here.   
CONTENT;
        $answer->question_id = 179;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'm not a database expert, and I do not speak from experience. However;MyISAM tables use table-level locking. Based on your traffic estimates, you have close to 200 writes per second. With MyISAM, only one of these could be in progress at any time. You have to make sure that your hardware can keep up with these transaction to avoid being overrun, i.e., a single query can take no more than 5ms.;That suggests to me you would need a storage engine which supports row-level locking, i.e., InnoDB.;On the other hand, it should be fairly trivial to write a few simple scripts to simulate the load with each storage engine, then compare the results.  
CONTENT;
        $answer->question_id = 180;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Here's one way to do it.;#!/usr/bin/python;import MySQLdb;# connect;db = MySQLdb.connect(host="localhost", user="appuser", passwd=";db="onco");cursor = db.cursor();# execute SQL select statement;cursor.execute("SELECT * FROM LOCATION");# commit your changes;db.commit();# get the number of rows in the resultset;numrows = int(cursor.rowcount);# get and display one row at a time.;for x in range(0,numrows);row = cursor.fetchone();print row[0], "-->", row[1];From here.    
CONTENT;
        $answer->question_id = 181;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          INNER JOIN gets all records from one table that have some related entry in a second table;LEFT JOIN gets all records from the LEFT linked table but if you have selected some columns from the RIGHT table, if there is no related records, these columns will contain NULL;RIGHT JOIN is like the above but gets all records in the RIGHT table;FULL JOIN gets all records from both tables and puts NULL in the columns where related records do not exist in the opposite table  
CONTENT;
        $answer->question_id = 182;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          $ mysql your_database --password=foo out.csv;Which is tab separated. Pipe it like that to get a true CSV (thanks @therefromhere):....sql | sed 's/\t/,/g' > out.csv 
CONTENT;
        $answer->question_id = 183;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Have a look at group_concat if your MySQL version (4.1) supports it. See the documentation for more details.;It would look something like;select group_concat(hobbies separator ', ');from peoples_hobbies where person_id = 5 group by 'all    
CONTENT;
        $answer->question_id = 184;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In version 5.6.5, it is possible to set a default value on a datetime column, and even make a column that will update when the row is updated. The type definition;CREATE TABLE foo;`creation_time` DATETIME DEFAULT CURRENT_TIMESTAMP;`modification_time` DATETIME ON UPDATE CURRENT_TIMESTAMP;Reference;http://optimize-this.blogspot.com/2012/04/datetime-default-now-finally-available.html 
CONTENT;
        $answer->question_id = 185;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Just to clarify the best practice;Text format messages should almost always be stored as TEXT (they end up being arbitrarily long);String attributes should be stored as VARCHAR (the destination user name, the subject, etc...).;I understand that you've got a front end limit, which is great until it isn't. *grin* The trick is to think of the DB as separate from the applications that connect to it. Just because one application puts a limit on the data, doesn't mean that the data is intrinsically limited.;What is it about the messages themselves that forces them to never be more then 3000 characters? If it's just an arbitrary application constraint (say, for a text box or something), use a TEXT field at the data layer.    
CONTENT;
        $answer->question_id = 186;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          ALTER TABLE tablename AUTO_INCREMENT = 1    
CONTENT;
        $answer->question_id = 187;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use these few simple commands;mysqldump -u username -p -v olddatabase > olddbdump.sql;mysqladmin -u username -p create newdatabase;mysql -u username -p newdatabase < olddbdump.sql;Or to reduce I/O use the following as suggested by @Pablo Marin-Garcia;mysqladmin -u username -p create newdatabase;mysqldump -u username -v olddatabase -p | mysql -u username -p -D newdatabase   
CONTENT;
        $answer->question_id = 188;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In case you want to see what this all means, here is a blow-by-blow of everything;CREATE TABLE `users_partners`;`uid` int(11) NOT NULL DEFAULT '0';`pid` int(11) NOT NULL DEFAULT '0';PRIMARY KEY (`uid`,`pid`);KEY `partner_user` (`pid`,`uid`);ENGINE=MyISAM DEFAULT CHARSET=utf8;Primary key is based on both columns of this quick reference table. A Primary key requires unique values.;Let's begin;INSERT INTO users_partners (uid,pid) VALUES (1,1),...1 row(s) affected;INSERT INTO users_partners (uid,pid) VALUES (1,1),...Error Code: 1062...Duplicate entry '1-1' for key 'PRIMARY;INSERT IGNORE INTO users_partners (uid,pid) VALUES (1,1),...0 row(s) affected;INSERT INTO users_partners (uid,pid) VALUES (1,1) ON DUPLICATE KEY UPDATE uid=uid...0 row(s) affected;note, the above saved too much extra work by setting the column equal to itself, no update actually needed;REPLACE INTO users_partners (uid,pid) VALUES (1,1)...2 row(s) affected;and now some multiple row tests;INSERT INTO users_partners (uid,pid) VALUES (1,1),(1,2),(1,3),(1,4)...Error Code: 1062...Duplicate entry '1-1' for key 'PRIMARY;INSERT IGNORE INTO users_partners (uid,pid) VALUES (1,1),(1,2),(1,3),(1,4)...3 row(s) affected;no other messages were generated in console, and it now has those 4 values in the table data. I deleted everything except (1,1) so I could test from the same playing field;INSERT INTO users_partners (uid,pid) VALUES (1,1),(1,2),(1,3),(1,4) ON DUPLICATE KEY UPDATE uid=uid...3 row(s) affected;REPLACE INTO users_partners (uid,pid) VALUES (1,1),(1,2),(1,3),(1,4)...5 row(s) affected;So there you have it. Since this was all performed on a fresh table with nearly no data and not in production, the times for execution were microscopic and irrelevant. Anyone with real-world data would be more than welcome to contribute it.  
CONTENT;
        $answer->question_id = 189;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I wanted to know what is the performance difference between using utf8_general_ci and utf8_unicode_ci, but I did not found any benchmarks in the Internet, so I decided to made benchmarks myself.;I created a very simple table with 500000 rows;CREATE TABLE test;ID INT(11) DEFAULT NULL;Description VARCHAR(20) DEFAULT NULL;ENGINE = INNODB;CHARACTER SET utf8;COLLATE utf8_general_ci;Then I filled it with random data by running this stored procedure;CREATE PROCEDURE randomizer();BEGIN;DECLARE i INT DEFAULT 0;DECLARE random CHAR(20);theloop: loop;SET random = CONV(FLOOR(RAND() * 99999999999999), 20, 36);INSERT INTO test VALUES (i+1, random);SET i=i+1;IF i = 500000 THEN;LEAVE theloop;END IF;END LOOP theloop;END;Then I created the following stored procedures to benchmark simple SELECT, SELECT with LIKE, and sorting (SELECT with ORDER BY);CREATE benchmark_simple_select();BEGIN;DECLARE i INT DEFAULT 0;theloop: loop;SELECT * FROM test WHERE Description = 'test' COLLATE utf8_general_ci;SET i = i + 1;IF i = 30 THEN;LEAVE theloop;END IF;END LOOP theloop;END;CREATE PROCEDURE benchmark_select_like();BEGIN;DECLARE i INT DEFAULT 0;theloop: loop;SELECT * FROM test WHERE Description LIKE '%test' COLLATE utf8_general_ci;SET i = i + 1;IF i = 30 THEN;LEAVE theloop;END IF;END LOOP theloop;END;CREATE PROCEDURE benchmark_order_by();BEGIN;DECLARE i INT DEFAULT 0;theloop: loop;SELECT * FROM test WHERE ID > FLOOR(1 + RAND() * (400000 - 1)) ORDER BY Description COLLATE utf8_general_ci LIMIT 1000;SET i = i + 1;IF i = 10 THEN;LEAVE theloop;END IF;END LOOP theloop;END;In the stored procedures above utf8_general_ci collation is used, but of course during the tests I used both utf8_general_ci and utf8_unicode_ci.;I called each stored procedure 5 times for each collation (5 times for utf8_general_ci and 5 times for utf8_unicode_ci) and then calculated the average values.;Here is the results;benchmark_simple_select() with utf8_general_ci: 9957 ms;benchmark_simple_select() with utf8_unicode_ci: 10271 ms;In this benchmark using utf8_unicode_ci is slower than utf8_general_ci by 3.2%.;benchmark_select_like() with utf8_general_ci: 11441 ms;benchmark_select_like() with utf8_unicode_ci: 12811 ms;In this benchmark using utf8_unicode_ci is slower than utf8_general_ci by 12%.;benchmark_order_by() with utf8_general_ci: 11944 ms;benchmark_order_by() with utf8_unicode_ci: 12887 ms;In this benchmark using utf8_unicode_ci is slower than utf8_general_ci by 7.9%. 
CONTENT;
        $answer->question_id = 190;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I have a MySQL table;CREATE TABLE `content_html`;`id` int(11) NOT NULL AUTO_INCREMENT;`id_box_elements` int(11) DEFAULT NULL;`id_router` int(11) DEFAULT NULL;`content` mediumtext COLLATE utf8_czech_ci NOT NULL;PRIMARY KEY (`id`);UNIQUE KEY `id_box_elements` (`id_box_elements`,`id_router`);and the UNIQUE KEY works just as accepted, it allows multiple NULL rows of id_box_elements and id_router.;I am running MySQL 5.1.42, so probably there was some update on the issue discussed above. Fortunately it works and hopefully it will stay that way.    
CONTENT;
        $answer->question_id = 191;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Others have pointed out that INNER JOIN helps human readability, and that's a top priority, I agree. Let me try to explain why the join syntax is more readable.;A basic SELECT query is this;SELECT stuff;FROM tables;WHERE conditions;The SELECT clause tells us what we're getting back, the FROM clause tells us where we're getting it from, and the WHERE clause tells us which ones we're getting.;JOIN is a statement about the tables, how they are bound together (conceptually, actually, into a single table). Any query elements that control the tables - where we're getting stuff from - semantically belong to the FROM clause (and of course, that's where JOIN elements go). Putting joining-elements into the WHERE clause conflates the which and the where-from, that's why the JOIN syntax is preferred. 
CONTENT;
        $answer->question_id = 192;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Why not just INNER JOIN the table with itself?;SELECT a.firstname, a.lastname, a.address;FROM list a;INNER JOIN list b ON a.address = b.address;WHERE a.id <> b.id;A DISTINCT is needed if the address could exist more than two times. 
CONTENT;
        $answer->question_id = 193;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          My preference is to use as little code as possible...;You can do it using IN;try this;SELECT *;FROM t1 WHERE (id,rev) IN;(SELECT id, MAX(rev);FROM t1;GROUP BY id;to my mind it is less complicated... easier to read and maintain. 
CONTENT;
        $answer->question_id = 194;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can even use a version range with pip install command. Something like this;pip install 'stevedore>=1.3.0,<1.4.0'    
CONTENT;
        $answer->question_id = 195;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          SELECT TABLE_NAME, COLUMN_NAME;FROM INFORMATION_SCHEMA.COLUMNS;WHERE column_name LIKE 'wild 
CONTENT;
        $answer->question_id = 196;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Here goes T-SQL version;-- Test data;DECLARE @TestTable TABLE (id INT, home INT, date DATETIME;player VARCHAR(20), resource INT);INSERT INTO @TestTable;SELECT 1, 10, '2009-03-04', 'john', 399 UNION;SELECT 2, 11, '2009-03-04', 'juliet', 244 UNION;SELECT 5, 12, '2009-03-04', 'borat', 555 UNION;SELECT 3, 10, '2009-03-03', 'john', 300 UNION;SELECT 4, 11, '2009-03-03', 'juliet', 200 UNION;SELECT 6, 12, '2009-03-03', 'borat', 500 UNION;SELECT 7, 13, '2008-12-24', 'borat', 600 UNION;SELECT 8, 13, '2009-01-01', 'borat', 700;-- Answer;SELECT id, home, date, player, resource;FROM (SELECT id, home, date, player, resource;RANK() OVER (PARTITION BY home ORDER BY date DESC) N;FROM @TestTable;M WHERE N = 1;-- and if you really want only home with max date;SELECT T.id, T.home, T.date, T.player, T.resource;FROM @TestTable T;INNER JOIN;(SELECT TI.id, TI.home, TI.date;RANK() OVER (PARTITION BY TI.home ORDER BY TI.date) N;FROM @TestTable TI;WHERE TI.date IN (SELECT MAX(TM.date) FROM @TestTable TM);TJ ON TJ.N = 1 AND T.id = TJ.id;EDIT;Unfortunately, there are no RANK() OVER function in MySQL.;But it can be emulated, see Emulating Analytic (AKA Ranking) Functions with MySQL.;So this is MySQL version;SELECT id, home, date, player, resource;FROM TestTable AS t1;WHERE;(SELECT COUNT(*);FROM TestTable AS t2;WHERE t2.home = t1.home AND t2.date > t1.date;= 0 
CONTENT;
        $answer->question_id = 197;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          A common use of mysqldump is for making a backup of an entire database;shell> mysqldump db_name > backup-file.sql;You can load the dump file back into the server like this;UNIX;shell> mysql db_name < backup-file.sql;The same in Windows command prompt;mysql -p -u[user] [database] cmd.exe /c "mysql -u root -p db_name use db_name;mysql> source backup-file.sql  
CONTENT;
        $answer->question_id = 198;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In most cases JOIN s are faster than sub-queries and it is very rare for a sub-query to be faster.;In JOIN s RDBMS can create an execution plan that is better for your query and can predict what data should be loaded to be processed and save time, unlike the sub-query where it will run all the queries and load all their data to do the processing.;The good thing in sub-queries is that they are more readable than JOIN s: that's why most new SQL people prefer them, it is the easy way, but when it comes to performance, JOINS are better in most cases even though they are not hard to read too.  
CONTENT;
        $answer->question_id = 199;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          When you delete innodb tables, MySQL does not free the space inside the ibdata file, that's why it keeps growing. These files hardly ever shrink.;How to shrink an existing ibdata file;http://dev.mysql.com/doc/refman/5.5/en/innodb-resize-system-tablespace.html;You can script this and schedule the script to run after a fixed period of time, but for the setup described above it seems that multiple tablespaces are an easier solution.;If you use the configuration option innodb_file_per_table, you create multiple tablespaces. That is, MySQL creates separate files for each table instead of one shared file. These separate files a stored in the directory of the database, and they are deleted when you delete this database. This should remove the need to shrink/purge ibdata files in your case.;More information about multiple tablespaces;http://dev.mysql.com/doc/refman/5.5/en/innodb-multiple-tablespaces.html   
CONTENT;
        $answer->question_id = 200;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Bill Karwin's solution above works fine when item count within groups is rather small, but the performance of the query becomes bad when the groups are rather large, since the solution requires about n*n/2 + n/2 of only IS NULL comparisons.;I made my tests on a InnoDB table of 18684446 rows with 1182 groups. The table contains testresults for functional tests and has the (test_id, request_id) as the primary key. Thus, test_id is a group and I was searching for the last request_id for each test_id.;Bill's solution has already been running for several hours on my dell e4310 and I do not know when it is going to finish even though it operates on a coverage index (hence using index in EXPLAIN).;I have a couple of other solutions that are based on the same ideas;if the underlying index is BTREE index (which is usually the case), the largest (group_id, item_value) pair is the last value within each group_id, that is the first for each group_id if we walk through the index in descending order;if we read the values which are covered by an index, the values are read in the order of the index;each index implicitly contains primary key columns appended to that (that is the primary key is in the coverage index). In solutions below I operate directly on the primary key, in you case, you will just need to add primary key columns in the result.;in many cases it is much cheaper to collect the required row ids in the required order in a subquery and join the result of the subquery on the id. Since for each row in the subquery result MySQL will need a single fetch based on primary key, the subquery will be put first in the join and the rows will be output in the order of the ids in the subquery (if we omit explicit ORDER BY for the join);3 ways MySQL uses indexes is a great article to understand some details.;Solution 1;This one is incredibly fast, it takes about 0,8 secs on my 18M+ rows;SELECT test_id, MAX(request_id), request_id;FROM testresults;GROUP BY test_id DESC;If you want to change the order to ASC, put it in a subquery, return the ids only and use that as the subquery to join to the rest of the columns;SELECT test_id, request_id;FROM;SELECT test_id, MAX(request_id), request_id;FROM testresults;GROUP BY test_id DESC) as ids;ORDER BY test_id;This one takes about 1,2 secs on my data.;Solution 2;Here is another solution that takes about 19 seconds for my table;SELECT test_id, request_id;FROM testresults, (SELECT @group:=NULL) as init;WHERE IF(IFNULL(@group, -1)=@group:=test_id, 0, 1);ORDER BY test_id DESC, request_id DESC;It returns tests in descending order as well. It is much slower since it does full index scan but it is here to give you idea how to output N max rows for each group.;The disadvantage of the query is that its result cannot be cached by the query cache.    
CONTENT;
        $answer->question_id = 201;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          All of these are kinds of indices.;primary: must be unique, is an index, is (likely) the physical index, can be only one per table.;unique: as it says. You can't have more than one row with a tuple of this value. Note that since a unique key can be over more than one column, this doesn't necessarily mean that each individual column in the index is unique, but that each combination of values across these columns is unique.;index: if it's not primary or unique, it doesn't constrain values inserted into the table, but it does allow them to be looked up more efficiently.;fulltext: a more specialized form of indexing that allows full text search. Think of it as (essentially) creating an "index" for each "word" in the specified column. 
CONTENT;
        $answer->question_id = 202;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use a case statement;select id;case report.type;when 'P' then amount;when 'N' then -amount;end as amount;from;`report`  
CONTENT;
        $answer->question_id = 203;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          GROUP BY DATE_FORMAT (record_date, '%Y%m');Note (primarily, to potential downvoters). Presently, this may not be as efficient as other suggestions. Still, I leave it as an alternative, and a one, too, that can serve in seeing how faster other solutions are. (For you can't really tell fast from slow until you see the difference.) Also, as time goes on, changes could be made to MySQL's engine with regard to optimisation so as to make this solution, at some (perhaps, not so distant) point in future, to become quite comparable in efficiency with most others.    
CONTENT;
        $answer->question_id = 204;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'm on a mac and use homebrew to install open source programs. I did have to install mac Dev tools in order to install homebrew, but after that it was a simple;brew install mysql;to install mysql. I haven't had a mysql gem problem since.   
CONTENT;
        $answer->question_id = 205;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Toad for MySQL has data and schema compare features, and I believe it will even create a synchronization script. Best of all, it's freeware.;share  206
        439 You can duplicate a table without data by running;CREATE TABLE x LIKE y;(See the MySQL CREATE TABLE Docs);You could write a script that takes the output from SHOW TABLES from one database and copies the schema to another. You should be able to reference schema+table names like;CREATE TABLE x LIKE other_db.y;As far as the data goes, you can also do it in MySQL, but it's not necessarily fast. After you've created the references, you can run the following to copy the data;INSERT INTO x SELECT * FROM other_db.y;If you're using MyISAM, you're better off to copy the table files, it'll be much faster. You should be able to do the same if you're using INNODB with per table table spaces.;If you do end up doing an INSERT INTO SELECT, be sure to temporarily turn off indexes with ALTER TABLE x DISABLE KEYS !;EDIT Maatkit also has some scripts that may be helpful for syncing data. It may not be faster, but you could probably run their syncing scripts on live data without much locking.  
CONTENT;
        $answer->question_id = 207;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Expansion of the same answer;This SO post;varchar(255) vs tinytext/tinyblob and varchar(65535) vs blob/text;outlines in detail the overheads and storage mechanisms.;As noted from point (1), A VARCHAR should always be used instead of TINYTEXT. However when using VARCHAR, the max rowsize should not exceeed 65535 bytes.;As outlined here http://dev.mysql.com/doc/refman/5.0/en/charset-unicode-utf8.html, max 3 bytes for utf-8.;THIS IS A ROUGH ESTIMATION TABLE FOR QUICK DECISIONS!;So the worst case assumptions (3 bytes per utf-8 char) to best case (1 byte per utf-8 char);Assuming the english language has an average of 4.5 letters per word;x is the number of bytes allocated;x-x;Type | A= worst case (x/3) | B = best case (x) | words estimate (A/4.5) - (B/4.5);-----------+---------------------------------------------------------------------------;TINYTEXT | 85 | 255 | 18 - 56;TEXT | 21845 | 65,535 | 4854.44 - 14,563.33;MEDIUMTEXT | 5,592,415 | 16,777,215 | 1,242,758.8 - 3,728,270;LONGTEXT | 1,431,655,765 | 4,294,967,295 | 318,145,725.5 - 954,437,176.6;Please refer to Chris V's answer as well: http://stackoverflow.com/a/35785869/1881812 
CONTENT;
        $answer->question_id = 208;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Moving an application from one database to another isn't very common, but sooner or later you may find yourself working on another project using a different RDBMS. If you're at home with PDO then there will at least be one thing less to learn at that point.;Apart from that I find the PDO API a little more intuitive, and it feels more truly object oriented. mysqli feels like it is just a procedural API that has been objectified, if you know what I mean. In short, I find PDO easier to work with, but that is of course subjective.;share  209
        442 Building on the answer from @Brian-Fisher and answering the comments of some of the people on this post, I have a bunch of huge (and unnecessary) tables in my database so I wanted to skip their contents when copying, but keep the structure;mysqldump -h -u -p --no-data > db-structure.sql;mysqldump -h -u -p --no-create-info --ignore-table=schema.table1 --ignore-table=schema.table2 > db-data.sql;The resulting two files are structurally sound but the dumped data is now ~500MB rather than 9GB, much better for me. I can now import these two files into another database for testing purposes without having to worry about manipulating 9GB of data or running out of disk space. Hope this helps someone! 
CONTENT;
        $answer->question_id = 210;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In MySQL, @variable indicates a user-defined variable. You can define your own.;SET @a = 'test;SELECT @a;Outside of stored programs, a variable, without @, is a system variable, which you cannot define yourself.;The scope of this variable is the entire session. That means that while your connection with the database exists, the variable can still be used.;This is in contrast with MSSQL, where the variable will only be available in the current batch of queries (stored procedure, script, or otherwise). It will not be available in a different batch in the same session.    
CONTENT;
        $answer->question_id = 211;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Check out REPLACE;http://dev.mysql.com/doc/refman/5.0/en/replace.html;REPLACE into table (id, name, age) values(1, "A", 19) 
CONTENT;
        $answer->question_id = 212;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is old question but I don't think the accepted answer is safe. It's good for creating a super user but not good if you want to grant privileges on a single database.;grant all privileges on mydb.* to myuser@'%' identified by 'mypasswd;grant all privileges on mydb.* to myuser@localhost identified by 'mypasswd;% seems to not cover socket communications, that the localhost is for. WITH GRANT OPTION is only good for the super user, otherwise it is usually a security risk.;Hope this helps.  
CONTENT;
        $answer->question_id = 213;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          SELECT TABLE_NAME AS "Table Name";table_rows AS "Quant of Rows", ROUND;data_length + index_length;/1024, 2) AS "Total Size Kb";FROM information_schema.TABLES;WHERE information_schema.TABLES.table_schema = 'YOUR SCHEMA NAME/DATABASE NAME HERE;LIMIT 0, 30;You can get schema name from " information_schema " -> SCHEMATA table -> " SCHEMA_NAME " column;Additional;You can get size of the mysql databases as following.;SELECT table_schema "DB Name";Round(Sum(data_length + index_length) / 1024 / 1024, 1) "DB Size in MB";FROM information_schema.tables;GROUP BY table_schema;Result;DB Name | DB Size in MB;mydatabase_wrdp 39.1;information_schema 0.0;You can get additional details in here.    
CONTENT;
        $answer->question_id = 214;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can enable the " Profiler " in Laravel 3 by setting;profiler' => true;In your application/config/application.php and application/config/database.php;This enables a bar at the bottom of each page. One of its features is listing the executed queries and how long each one took. 
CONTENT;
        $answer->question_id = 215;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Based on my experience, here are some answers to your questions;Q: How do we deal with bringing back fields we don't need?;A: From my experience this really boils down to dealing with complete entities versus ad-hoc queries.;A complete entity is something like a User object. It has properties and methods, etc. It's a first class citizen in your codebase.;An ad-hoc query returns some data, but we don't know anything beyond that. As the data gets passed around the application, it is done so without context. Is it a User? A User with some Order information attached? We don't really know.;I prefer working with full entities.;You are right that you will often bring back data you won't use, but you can address this in various ways;Aggressively cache the entities so you only pay the read price once from the database.;Spend more time modeling your entities so they have good distinctions between them. (Consider splitting a large entity into two smaller entities, etc.);Consider having multiple versions of entities. You can have a User for the back end and maybe a UserSmall for AJAX calls. One might have 10 properties and one has 3 properties.;The downsides of working with ad-hoc queries;You end up with essentially the same data across many queries. For example, with a User, you'll end up writing essentially the same select * for many calls. One call will get 8 of 10 fields, one will get 5 of 10, one will get 7 of 10. Why not replace all with one call that gets 10 out of 10? The reason this is bad is that it is murder to re-factor/test/mock.;It becomes very hard to reason at a high level about your code over time. Instead of statements like "Why is the User so slow?" you end up tracking down one-off queries and so bug fixes tend to be small and localized.;It's really hard to replace the underlying technology. If you store everything in MySQL now and want to move to MongoDB, it's a lot harder to replace 100 ad-hoc calls than it is a handful of entities.;Q: I will have too many methods in my repository.;A: I haven't really seen any way around this other than consolidating calls. The method calls in your repository really map to features in your application. The more features, the more data specific calls. You can push back on features and try to merge similar calls into one.;The complexity at the end of the day has to exist somewhere. With a repository pattern we've pushed it into the repository interface instead of maybe making a bunch of stored procedures.;Sometimes I have to tell myself, "Well it had to give somewhere! There are no silver bullets. 
CONTENT;
        $answer->question_id = 216;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          My way of doing this is to create a new folder in the /app directory in the root of your Laravel 4 project. Then add this folder to the first array of the /app/start/global.php file like so;<?php;ClassLoader::addDirectories(array;app_path().'/commands;app_path().'/controllers;app_path().'/models;app_path().'/database/seeds;app_path().'/classes', // This line is the one I've added.;As long as the folder structure within the new /app/classes folder follows your namespacing convention. Laravel 4 will autoload all the classes/files within this folder. This way there's no need to dig into any composer files or run composer command.;Not sure if this is best practice but it certainly works.;If you created a simple file called /app/classes/Helpers/Helper.php such as this;Helpers\Helper    
CONTENT;
        $answer->question_id = 217;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use the toSql() method on a QueryBuilder instance.;DB::table('users')->toSql() would return;select * from `users`;This is easier than wiring up an event listener, and also lets you check what the query will actually look like at any point while you're building it.    
CONTENT;
        $answer->question_id = 218;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          my initial thought was the composer autoload as well, but it didn't feel very Laravel 5ish to me. L5 makes heavy use of Service Providers, they are what bootstraps your application.;To start off I created a folder in my app directory called Helpers. Then within the Helpers folder I added files for functions I wanted to add. Having a folder with multiple files allows us to avoid one big file that gets too long and unmanageable.;Next I created a HelperServiceProvider.php by running the artisan command;artisan make:provider HelperServiceProvider;Within the register method I added this snippet;public function register();foreach (glob(app_path().'/Helpers/*.php') as $filename);require_once($filename);lastly register the service provider in your config/app.php in the providers array;providers' =>;App\Providers\HelperServiceProvider;now any file in your Helpers directory is loaded, and ready for use.;UPDATE 2016-02-22;There are a lot of good options here, but if my answer works for you, I went ahead and made a package for including helpers this way. You can either use the package for inspiration or feel free to download it with Composer as well. It has some built in helpers that I use often (but which are all inactive by default) and allows you to make your own custom helpers with a simple Artisan generator. It also addresses the suggestion one responder had of using a mapper and allows you to explicitly define the custom helpers to load, or by default, automatically load all PHP files in your helper directory. Feedback and PRs are much appreciated!;composer require browner12/helpers;Github: browner12/helpers   
CONTENT;
        $answer->question_id = 219;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can also use Route::current()->getName() to check your route name.;Example: routes.php;Route::get('test', ['as'=>'testing', function();return View::make('test');View;@if(Route::current()->getName() == 'testing');Hello This is testing;@endif    
CONTENT;
        $answer->question_id = 220;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you want to use parameters for a,b,c,d in Laravel 4;Model::where(function ($query) use ($a,$b);$query->where('a', '=', $a);->orWhere('b', '=', $b);->where(function ($query) use ($c,$d);$query->where('c', '=', $c);->orWhere('d', '=', $d) 
CONTENT;
        $answer->question_id = 221;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          chmod 777 app/storage/*;They should really put this in the quick start docs. Also they should tell you to go to www.domain.com/project/public in your browser, its in the old v3 docs but they forgot to include in the new docs.;Also your DocumentRoot should be /path/to/laravel-project/public  
CONTENT;
        $answer->question_id = 222;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          composer dump-autoload;PATH vendor/composer/autoload_classmap.php;Composer dump-autoload won’t download a thing.;It just regenerates the list of all classes that need to be included in the project (autoload_classmap.php).;Ideal for when you have a new class inside your project.;autoload_classmap.php also includes the providers in config/app.php;php artisan dump-autoload;It will call Composer with the optimize flag;It will 'recompile' loads of files creating the huge bootstrap/compiled.php   
CONTENT;
        $answer->question_id = 223;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I am finishing up a large project using Laravel 4 and had to answer all of the questions you are asking right now. After reading all of the available Laravel books over at Leanpub, and tons of Googling, I came up with the following structure.;One Eloquent Model class per datable table;One Repository class per Eloquent Model;A Service class that may communicate between multiple Repository classes.;So let's say I'm building a movie database. I would have at least the following following Eloquent Model classes;Movie;Studio;Director;Actor;Review;A repository class would encapsulate each Eloquent Model class and be responsible for CRUD operations on the database. The repository classes might look like this;MovieRepository;StudioRepository;DirectorRepository;ActorRepository;ReviewRepository;Each repository class would extend a BaseRepository class which implements the following interface;interface BaseRepositoryInterface;public function errors();public function all(array $related = null);public function get($id, array $related = null);public function getWhere($column, $value, array $related = null);public function getRecent($limit, array $related = null);public function create(array $data);public function update(array $data);public function delete($id);public function deleteWhere($column, $value);A Service class is used to glue multiple repositories together and contains the real "business logic" of the application. Controllers only communicate with Service classes for Create, Update and Delete actions.;So when I want to create a new Movie record in the database, my MovieController class might have the following methods;public function __construct(MovieRepositoryInterface $movieRepository, MovieServiceInterface $movieService);$this->movieRepository = $movieRepository;$this->movieService = $movieService;public function postCreate();if(! $this->movieService->create(Input::all()));return Redirect::back()->withErrors($this->movieService->errors())->withInput();// New movie was saved successfully. Do whatever you need to do here.;It's up to you to determine how you POST data to your controllers, but let's say the data returned by Input::all() in the postCreate() method looks something like this;$data = array;movie' => array;title' => 'Iron Eagle;year' => '1986';synopsis' => 'When Doug\'s father, an Air Force Pilot, is shot down by MiGs belonging to a radical Middle Eastern state, no one seems able to get him out. Doug finds Chappy, an Air Force Colonel who is intrigued by the idea of sending in two fighters piloted by himself and Doug to rescue Doug\'s father after bombing the MiG base.;actors' => array;0 => 'Louis Gossett Jr.;1 => 'Jason Gedrick;2 => 'Larry B. Scott;director' => 'Sidney J. Furie;studio' => 'TriStar Pictures;Since the MovieRepository shouldn't know how to create Actor, Director or Studio records in the database, we'll use our MovieService class, which might look something like this;public function __construct(MovieRepositoryInterface $movieRepository, ActorRepositoryInterface $actorRepository, DirectorRepositoryInterface $directorRepository, StudioRepositoryInterface $studioRepository);$this->movieRepository = $movieRepository;$this->actorRepository = $actorRepository;$this->directorRepository = $directorRepository;$this->studioRepository = $studioRepository;public function create(array $input);$movieData = $input['movie'];$actorsData = $input['actors'];$directorData = $input['director'];$studioData = $input['studio'];// In a more complete example you would probably want to implement database transactions and perform input validation using the Laravel Validator class here.;// Create the new movie record;$movie = $this->movieRepository->create($movieData);// Create the new actor records and associate them with the movie record;foreach($actors as $actor);$actorModel = $this->actorRepository->create($actor);$movie->actors()->save($actorModel);// Create the director record and associate it with the movie record;$director = $this->directorRepository->create($directorData);$director->movies()->associate($movie);// Create the studio record and associate it with the movie record;$studio = $this->studioRepository->create($studioData);$studio->movies()->associate($movie);// Assume everything worked. In the real world you'll need to implement checks.;return true;So what we're left with is a nice, sensible separation of concerns. Repositories are only aware of the Eloquent model they insert and retrieve from the database. Controllers don't care about repositories, they just hand off the data they collect from the user and pass it to the appropriate service. The service doesn't care how the data it receives is saved to the database, it just hands off the relevant data it was given by the controller to the appropriate repositories.   
CONTENT;
        $answer->question_id = 224;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you are using the Eloquent ORM you should consider using scopes. This would keep your logic in the model where it belongs.;So, in the model you would have;public function scopeIdDescending($query);return $query->orderBy('id','DESC');And outside the model you would have;$posts = Post::idDescending()->get();More info: http://laravel.com/docs/eloquent#query-scopes  
CONTENT;
        $answer->question_id = 225;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In laravel-4, you can use the template comment syntax to define/set variables.;Comment syntax is {{-- anything here is comment --}} and it is rendered by blade engine as;so with little trick we can use it to define variables, for example;{{-- */$i=0,/* --}};will be rendered by blade as;which sets the variable for us.;Without changing any line of code.   
CONTENT;
        $answer->question_id = 226;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Detailed instructions;in your ~/.bashrc add these lines;export PATH="$PATH:~/.composer/vendor/bin;Then reload;source ~/.bashrc;Check if its added correctly;echo $PATH;/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/web/bin:~/.composer/vendor/bin    
CONTENT;
        $answer->question_id = 228;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Taking some portion from above answer;For example if you define that the Acme\Foo\ namespace is anchored in src/;with PSR-0 it means it will look for Acme\Foo\Bar in src/Acme/Foo/Bar.php;while in PSR-4 it will look for it in src/Bar.php.;PSR-4 does not convert underscores to directory separators;You cannot use PSR-4 if you do not use namespaces;PSR-0 will not work even if the class name is different from file name;like considering above example;Acme\Foo\Bar ---> src/Acme/Foo/Bar.php (for Bar class) will work;Acme\Foo\Bar ---> src/Acme/Foo/Bar2.php (for Bar class) will not work 
CONTENT;
        $answer->question_id = 229;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'm not a pro at implementing PHP Interfaces, but I believe you need to include all methods of UserInterface and RemindableInterface in your User class (since it implements them). Otherwise, the class is "abstract" and must be defined as such.;By my knowledge, a PHP interface is a set of guidelines that a class must follow. For instance, you can have a general interface for a specific database table. It would include definition of methods like getRow(), insertRow(), deleteRow(), updateColumn(), etc. Then you can use this interface to make multiple different classes for different database types (MySQL, PostgreSQL, Redis), but they must all follow the rules of the interface. This makes migration easier, since you know no matter which database driver you are using to retrieve data from a table it will always implement the same methods defined in your interface (in other words, abstracting the database-specific logic from the class).;3 possible fixes, as far as I know;abstract class User extends Eloquent implements UserInterface, RemindableInterface;class User extends Eloquent;class User extends Eloquent implements UserInterface, RemindableInterface;// include all methods from UserInterFace and RemindableInterface;I think #2 is best for you, since if your class doesn't implement all methods from UserInterface and RemindableInterface why would you need to say it does.   
CONTENT;
        $answer->question_id = 230;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Having just wrestled with this problem for several days, I think I can now provide the definitive answer to solving this problem. Yeah, big call I know, but bare with me...;The first port of call if you encounter this problem is to run composer dump-autoload. This should result in an updated version of the file vendor/composer/autoload_classmap.php.;If autoload_classmap.php doesn't get updated then you may have a permissions problem, in which case you could try sudo composer dump-autoload.;However, if autoload_classmap.php does get updated, check that it contains an entry for your migration class (in this case CreateCodesnippetsTable). If there is no entry for this class then you should check your composer.json file and make sure the app/database/migrations folder is included in the autoload section, eg;autoload;classmap;app/controllers;app/models;app/database/migrations;This last bit is what screwed things up for me. In a misguided attempt at optimising things I pulled as much as I could out of my composer.json file, naively thinking this would only affect web requests. It turns out this affected Artisan as well, so putting this line back in and running composer dump-autoload fixed the problem for me.;Finally, if all that fails, then maybe there's a bug in one of the supporting libraries that is causing the problem, in which case you can try updating using composer update or some variation thereof. However, I suspect that this will rarely be the true cause of the problem.   
CONTENT;
        $answer->question_id = 232;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You may use Redirect::intended function. It will redirect the user to the URL they were trying to access before being caught by the authenticaton filter. A fallback URI may be given to this;method in case the intended destinaton is not available.;In post login/register;return Redirect::intended('defaultpageafterlogin')    
CONTENT;
        $answer->question_id = 233;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Query scopes may help you to let your code more readable.;http://laravel.com/docs/eloquent#query-scopes 
CONTENT;
        $answer->question_id = 234;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You could still use sortBy (at the collection level) instead of orderBy (at the query level) if you still want to use all() since it returns a collection of objects.;Ascending Order;$results = Project::all()->sortBy("name");Descending Order;$results = Project::all()->sortByDesc("name");Check out the documentation about Collections for more details.;https://laravel.com/docs/5.1/collections 
CONTENT;
        $answer->question_id = 235;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The last thing on the Laravel Eloquent doc page is;protected $appends = array('is_admin');That can be used automatically to add new accessors to the model without any additional work like modifying methods like::toArray().;Just create getFooBarAttribute(...) accessor and add the foo_bar to $appends array.  
CONTENT;
        $answer->question_id = 236;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I think you are looking for;$result->isEmpty();This is different from empty($result), which will not be true because the result will be an empty collection. Your suggestion of count($result) is also a good solution. I cannot find any reference in the docs, but there was a discussion here    
CONTENT;
        $answer->question_id = 237;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can download via LaraPack. It provide you ready-to-use Laravel instalation, so you don't have install it with Composer. It also gets weekly update.;Disclaimer: I'm creator of LaraPack.    
CONTENT;
        $answer->question_id = 238;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          xdazz is right in this case, but for the benefit of future visitors who might be using DB::statement or DB::insert, there is another way;DB::getPdo()->lastInsertId()   
CONTENT;
        $answer->question_id = 239;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I accidentally created a migration with a bad name (command: php artisan migrate:make). I did not run (php artisan migrate) the migration, so I decided to remove it.;My steps;Manually delete the migration file under app/database/migrations/my_migration_file_name.php;Reset the composer autoload files: composer dump-autoload;Relax;If you did run the migration (php artisan migrate), you may do this;a) Run migrate:rollback - it is the right way to undo the last migration (Thnx @Jakobud);b) If migrate:rollback does not work, do it manually (I remember bugs with migrate:rollback in previous versions);Manually delete the migration file under app/database/migrations/my_migration_file_name.php;Reset the composer autoload files: composer dump-autoload;Modify your database: Remove the last entry from the migrations table   
CONTENT;
        $answer->question_id = 240;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you're looking to paginate results, use the integrated paginator, it works great!;$games = Game::paginate(30);// $games->results = the 30 you asked for;// $games->links() = the links to next, previous, etc pages  
CONTENT;
        $answer->question_id = 241;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Lumen is not designed to replace Laravel, rather, it is a more specialized (and stripped-down) framework designed for micro-services and APIs. It took away unneeded features for an API such as HTTP sessions and cookies, and also limited the number of configuration options. Out-of-the-box, Lumen sacrified the flexibility of Laravel for speed.;However, you can add Laravel components to Lumen to extend it, so it can be used for more than just micro-services and API. However, if your goal is to extend Lumen to become a website, you might as well use Laravel instead.;They also have different use cases. Lumen and Laravel are meant to work together. For APIs and services are frequently get called, use Lumen. For user-facing applications, use Laravel.;This answer is taken from a blog post I wrote that explains the difference between Lumen and Laravel. 
CONTENT;
        $answer->question_id = 242;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Go to CLI and enter following command line. make sure composer is already installed.;$composer create-project laravel/laravel dev-develop;It will ask you a question about removing.git files enter Y then.;change the directory to;$cd;then enter following command;$ php artisan -V;you will be able to see following message.;Laravel Framework version 5.0-dev;means you have installed laravel 5 successfully! 
CONTENT;
        $answer->question_id = 243;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I solved this by doing this;Copy of the file content.;Remove file.;Run command: php artisan make:seeder.;Copy the file content back in this file.;This happened because I made a change in the filename. I don't know why it didn't work after the change.  
CONTENT;
        $answer->question_id = 244;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I just did that, to add a GET "delete" method.;After creating your files, you just need to add;AntonioRibeiro\Routing\ExtendedRouterServiceProvider;to 'providers' in your app/config.php;Edit the Route alias in this same file;Route' => 'Illuminate\Support\Facades\Route;changing it to;Route' => 'AntonioRibeiro\Facades\ExtendedRouteFacade;And make sure those files are being autoloaded, they must be in some directory that you have in your composer.json ("autoload" section).;Then you just need to;Route::resource('users', 'UsersController');And this (look at the last line) is the result if you run php artisan routes;Those are my source files;ExtendedRouteFacade.pas;currentRouteNamed($name);/**;* Determine if the current route uses a given controller action.;*;* @param string $action;* @return bool;*/;public static function uses($action);return static::$app['router']->currentRouteUses($action);/**;* Get the registered name of the component.;*;* @return string;*/;protected static function getFacadeAccessor() { return 'router', };ExtendedRouter.pas;getResourceUri($name).'/{'.$base.'}/destroy;return $this->get($uri, $this->getResourceAction($name, $controller, 'delete'));ExtendedRouteServiceProvider.pas;app['router'] = $this->app->share(function() { return new ExtendedRouter($this->app), });/**;* Get the services provided by the provider.;*;* @return array;*/;public function provides();return array('router')   
CONTENT;
        $answer->question_id = 245;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          your css file belongs into the public folder or a subfolder of it.;f.e if you put your css in;public/css/common.css;you would use;HTML::style('css/common.css');In your blade view...;Or you could also use the Asset class http://laravel.com/docs/views/assets... 
CONTENT;
        $answer->question_id = 246;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          An update to fideloper's answer for Laravel 5 and its new file structure is;$ sudo chmod -R o+w storage/    
CONTENT;
        $answer->question_id = 247;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you need to frequently use LIKE, you can simplify the problem a bit. A custom method like () can be created in the model that inherits the Eloquent ORM;public function scopeLike($query, $field, $value);return $query->where($field, 'LIKE', "%$value%");So then you can use this method in such way;User::like('name', 'Tomas')->get()    
CONTENT;
        $answer->question_id = 248;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For everyone using Laravel 5, Homestead and Mac try this;mkdir storage/framework/views  
CONTENT;
        $answer->question_id = 249;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I don't think this was a problem of the device, it could be busy. Maybe you could try to execute each order to database sequentally, using the callbacks;BBDDD.transaction;function(tx);tx.executeSql("CREATE TABLE IF NOT EXISTS DateSession (\n\;id INTEGER PRIMARY KEY AUTOINCREMENT,\n\;field1 TEXT NOT NULL,\n\;field2 TEXT NOT NULL)");function(err);console.log("Error"+err.code);function();BBDDD.transaction(function(tx);tx.executeSql("CREATE TABLE IF NOT EXISTS Table2 (\n\;id INTEGER PRIMARY KEY AUTOINCREMENT,\n\;field1 TEXT NOT NULL,\n\;field2 TEXT NOT NULL)");function(err);console.log("Error"+err.code);function()   
CONTENT;
        $answer->question_id = 1;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use the beforeAdd binding to remove the item as you display the added element;** EDIT **;Here's the fiddle: http://jsfiddle.net/janarde/U6Um5/5/;Click  
CONTENT;
        $answer->question_id = 3;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There are several ways to easily structure and manage Cordova web applications now. I suggest XDK from Intel as the cost-free solution for building and structuring iOS, Android, and Windows phone apps;https://software.intel.com/en-us/intel-xdk 
CONTENT;
        $answer->question_id = 8;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Make sure that you have include;on your home page, i.e. where you are logging out.  
CONTENT;
        $answer->question_id = 10;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There is no general answer to this, it depends on the browser implementation and your hardware, but... for the long term solution I would bet on WebGL because it uses the GPU and will ultimately dominate.;WebGL is not well supported right now (2016), and it potentially comes with security issues.;Also see: https://css-tricks.com/rendering-svg-paths-in-webgl/;Canvas is better at working on raw 2d pixel buffers (+ alpha channel) and is slow for higher resolution+animation.;You could use some dual lib like Pixi though.   
CONTENT;
        $answer->question_id = 12;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The version of gulp-useref is different!    
CONTENT;
        $answer->question_id = 15;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          use mousedown and mousemove;window.app =;dragging: false;config;canDrag: false;cursorOffsetX: null;cursorOffsetY: null;reset: function ();this.config.cursorOffsetX = null;this.config.cursorOffsetY = null;start: function ();document.getElementById('target').addEventListener('mousedown', function (event);console.log('+++++++++++++ dragstart');this.dragging = true;this.config.cursorOffsetX = event.offsetX;this.config.cursorOffsetY = event.offsetY;this.adjustPostion(event);bind(this));document.getElementById('target').addEventListener('mousemove', function (event);if (this.dragging);console.log('+++++++++++++ drag');event.target.style.cursor = 'move;this.adjustPostion(event);bind(this));document.getElementById('target').addEventListener('mouseup', function (event);console.log('+++++++++++++ dragend');this.dragging = false;event.target.style.cursor = 'pointer;this.reset();bind(this));adjustPostion: function (event);if (event.clientX <= 0 || event.clientY <= 0);console.log('skipped');return;var elm = document.getElementById('target');elm.style.left = (event.clientX - this.config.cursorOffsetX) + 'px;elm.style.top = (event.clientY - this.config.cursorOffsetY) + 'px;console.log(event.pageX);console.log(event.pageY);#target;position: absolute;top: 100px;left: 100px;width: 400px;height: 400px;background-color: red;-moz-user-select: none;-ms-user-select: none;-webkit-user-select: none;user-select: none;#ui1;position: absolute;top: 50px;left: 50px;width: 100px;height: 400px;background-color: blue;z-index: 100;#ui2;position: absolute;top: 50px;left: 550px;width: 100px;height: 400px;background-color: green;z-index: 100;<!DOCTYPE html>;title  
CONTENT;
        $answer->question_id = 18;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This has been fixed in https://github.com/karma-runner/karma/pull/1646 and merged into 0.13.2;concurrency;Type: Number;Default: Infinity;Description: How many browser Karma launches in parallel.;Especially on sevices like SauceLabs and Browserstack it makes sense to only launch a limited amount of browsers at once, and only start more when those have finished. Using this configuration you can sepcify how many browsers should be running at once at any given point in time.;http://karma-runner.github.io/0.13/config/configuration-file.html   
CONTENT;
        $answer->question_id = 19;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Try to parse document to base64 and added to your document or iframe.;function getAsyncBase64(fileName, callBack);var xhr = new XMLHttpRequest();xhr.open('GET', fileName, true);xhr.responseType = 'arraybuffer;xhr.onload = function (e);if (this.status == 200);var uInt8Array = new Uint8Array(this.response || this.responseText);var i = uInt8Array.length;var binaryString = new Array(i);while (i--);binaryString[i] = String.fromCharCode(uInt8Array[i]);var dataBinary = binaryString.join('');var data64 = window.btoa(dataBinary);callback(data64);xhr.send();function callback(base64);window.open(base64, "_blank");//or;iframe.src = "data:application/pdf,base64,"+ base64;getAsyncBase64(url,callback) 
CONTENT;
        $answer->question_id = 20;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I find clip rather slow so I tend to use globalCompositeOperation to do masking.;If you really need to use clip then use it in conjunction with save and restore.;// ctx is canvas context 2d;// pug is the image to be clipped;// draw your background;ctx.save(), // save state;ctx.rect(100,100,100,100), // set the clip area;ctx.clip(), // apply the clip;ctx.drawImage(pug,x,y), // draw the clipped image;ctx.restore(), // remove the clipping;// draw the other layers.;or you can;// draw background;ctx.globalCompositeOperation = "xor", // set up the mask;ctx.fillRect(100,100,100,100), // draw the mask, could be an image.;// Alpha will effect the amount of masking;// not available with clip;ctx.globalCompositeOperation = "destination-over;ctx.drawImage(pug,x,y), // draw the image that is masked;ctx.globalCompositeOperation = "source-over;// draw the stuff that needs to be over everything.;The advantage of composite operations is you have control over the clipping at a per pixel level, including the amount of clipping via the pixel alpha value   
CONTENT;
        $answer->question_id = 31;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is a security feature in ie. The functionality of:visited has been restricted in many modern browsers to prevent CSS exploit.;Hence, there's no workaround for this issue. 
CONTENT;
        $answer->question_id = 33;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The reason you cannot swipe up and down is likely due to that the "swipe" event is hogging the "movestart" or "move" event.;I ran into a similar problem once when using this plugin;http://stephband.info/jquery.event.swipe/;Their solution as pointed on on their website was to call the preventDefault method on the event to keep it from blocking as seen here.;jQuery('.mydiv').on('movestart', function(e);// If the movestart is heading off in an upwards or downwards;// direction, prevent it so that the browser scrolls normally.;if ((e.distX > e.distY && e.distX < -e.distY);(e.distX -e.distY));e.preventDefault();I have no experience with jQuery mobile, but i would reckon the problems are similar. 
CONTENT;
        $answer->question_id = 36;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You cannot change this behavior of Javascript because it is the only simple way for Javascript to work. What happens is simply that Javascript looks at the time shift, computes the matching timestamp, and then asks the OS for the representation of this timestamp in the local time zone. What is key to understand here is that -05:00 is not an indication of time zone but simply a shift from UTC.;Time zones are complex beasts that are just arbitrary political decisions. The OS provides a service to display time in the local time zone, but not in other time zones. To do that you have to take in account things like DST that are pretty much a hell.;As always with time management, the only decent way to tackle this problem is to use a dedicated library. In Javascript, you'll find Moment.js and Moment.Timezone.js very helpful.;Example http://codepen.io/Xowap/pen/XKpKZb?editors=0010;document.write(moment('2013-07-18T17:00:00-05:00').tz('America/New_York').format('LLL'));As a bonus, you get a ton of formatting/parsing features from Moment.js.;Please also note that as long as you use the ISO 8601, your date can be pinpointed to a precise moment, and thus be displayed in any timezone of your liking. In other words, JS "converting" your date doesn't matter. 
CONTENT;
        $answer->question_id = 38;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It's an ASP powered website so this is going to be a tad trickier than most and you will have to use cURL commands to mimic POSTing the entire form viewstate & eventvalidation strings back to server. Probably just be easier just to lift the data straight out of the page you have.    
CONTENT;
        $answer->question_id = 39;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Most browsers will simply ignore any NON-hex values in your color string, substituting non-hex digits with zeros.;ChuCknorris translates to c00c0000000. At this point, the browser will divide the string into three equal sections, indicating Red, Green and Blue values: c00c 0000 0000. Extra bits in each section will be ignored, which makes the final result #c00000 which is a reddish color.;Note, this does not apply to CSS color parsing, which follow the CSS standard.;Redish;Same as above;Black   
CONTENT;
        $answer->question_id = 46;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Doing Link or Link or whatever else that contains an onclick attribute - was okay back five years ago, though now it can be a bad practice. Here's why;It promotes the practice of obtrusive JavaScript - which has turned out to be difficult to maintain and difficult to scale. More on this in Unobtrusive JavaScript.;You're spending your time writing incredibly overly verbose code - which has very little (if any) benefit to your codebase.;There are now better, easier, and more maintainable and scalable ways of accomplishing the desired result.;The unobtrusive JavaScript way;Just don't have a href attribute at all! Any good CSS reset would take care of the missing default cursor style, so that is a non-issue. Then attach your JavaScript functionality using graceful and unobtrusive best practices - which are more maintainable as your JavaScript logic stays in JavaScript, instead of in your markup - which is essential when you start developing large scale JavaScript applications which require your logic to be split up into blackboxed components and templates. More on this in Large-scale JavaScript Application Architecture;Simple code example;// Cancel click event;$('.cancel-action').click(function();alert('Cancel action occurs!');// Hover shim for Internet Explorer 6 and Internet Explorer 7.;$(document.body).on('hover','a',function();$(this).toggleClass('hover');a { cursor: pointer, color: blue, };a:hover,a.hover { text-decoration: underline, };Cancel this action;A blackboxed Backbone.js example;For a scalable, blackboxed, Backbone.js component example - see this working jsfiddle example here. Notice how we utilize unobtrusive JavaScript practices, and in a tiny amount of code have a component that can be repeated across the page multiple times without side-effects or conflicts between the different component instances. Amazing!;Notes;Omitting the href attribute on the a element will cause the element to not be accessible using tab key navigation. If you wish for those elements to be accessible via the tab key, you can set the tabindex attribute, or use button elements instead. You can easily style button elements to look like normal links as mentioned in Tracker1's answer.;Omitting the href attribute on the a element will cause Internet Explorer 6 and Internet Explorer 7 to not take on the a:hover styling, which is why we have added a simple JavaScript shim to accomplish this via a.hover instead. Which is perfectly okay, as if you don't have a href attribute and no graceful degradation then your link won't work anyway - and you'll have bigger issues to worry about.;If you want your action to still work with JavaScript disabled, then using an a element with a href attribute that goes to some URL that will perform the action manually instead of via an Ajax request or whatever should be the way to go. If you are doing this, then you want to ensure you do an event.preventDefault() on your click call to make sure when the button is clicked it does not follow the link. This option is called graceful degradation. 
CONTENT;
        $answer->question_id = 47;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You may also want to style textareas;input::-webkit-input-placeholder, textarea::-webkit-input-placeholder;color: #636363;input:-moz-placeholder, textarea:-moz-placeholder;color: #636363  
CONTENT;
        $answer->question_id = 48;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Suppose that your div is 200px wide:.centered;position: absolute;left: 50%;margin-left: -100px  
CONTENT;
        $answer->question_id = 49;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          table;border-collapse: collapse, /* 'cellspacing' equivalent */;table td, table th;padding: 0, /* 'cellpadding' equivalent */   
CONTENT;
        $answer->question_id = 50;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Yes, you can do this with only one character and only CSS.;Webkit (and Chrome) only, though;http://jsbin.com/rexoyice/1/;HTML;X;CSS;h1;display: inline-block;font-family: helvetica, arial, sans-serif;font-weight: bold;font-size: 300px;background: linear-gradient(to right, #7db9e8 50%,#1e5799 50%);-webkit-background-clip: text;-webkit-text-fill-color: transparent;Visually, all the examples that use two characters (be it via JS, CSS pseudo elements, or just HTML) look fine, but note that that all adds content to the DOM which may cause accessibility--as well as text selection/cut/paste issues.   
CONTENT;
        $answer->question_id = 51;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In one of my old projects that did not use jQuery, I built the following functions for adding, removing, and checking if element has class;function hasClass(ele, cls);return ele.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));function addClass(ele, cls);if (!hasClass(ele, cls)) ele.className += " " + cls;function removeClass(ele, cls);if (hasClass(ele, cls));var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');ele.className = ele.className.replace(reg, ' ');So, for example, if I want onclick to add some class the the button I can use this:...;My Button;By now for sure it would just better to use jQuery.    
CONTENT;
        $answer->question_id = 52;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        relative;content;position: relative;color: White;z-index: 5;background;position: absolute;top: 0px;left: 0px;width: 100%;height: 100%;background-color: Black;z-index: 1;/* These three lines are for transparency in all browsers. */;-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50);filter: alpha(opacity=50);opacity:.5;Here is the content.;Background should grow to fit. 
CONTENT;
        $answer->question_id = 53;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Most of the major browsers and password managers (correctly, IMHO) now ignore autocomplete=off.;Why? Many banks and other "high security" websites added autocomplete=off to their login pages "for security purposes" but this actually decreases security since it causes people to change the passwords on these high security sites to be easy to remember (and thus crack) since autocomplete was broken.;Long ago most password managers started ignoring autocomplete=off, and now the browsers are starting to do the same for username/password inputs only.;Unfortunately bugs in the autocomplete implementations insert username and/or password info into inappropriate form fields, causing form validation errors, or worse yet, accidentally inserting usernames into fields that were intentionally left blank by the user.;What's a web developer to do?;If you can keep all password fields on a page by themselves, that's a great start as it seems that the presence of a password field is the main trigger for user/pass autocomplete to kick in. Otherwise, read the tips below.;Safari notices that there are 2 password fields and disables autocomplete in this case, assuming it must be a change password form, not a login form. So just be sure to use 2 password fields (new and confirm new) for any forms where you allow;Chrome 34 unfortunately will try to autofill fields with user/pass whenever it sees a password field. This is quite a bad bug that hopefully they will change to the Safari behavior. However, adding this to the top of your form seems to disable the password autofilling;I haven't yet investigated IE or Firefox thoroughly but will be happy to update the answer if others have info in the comments.   
CONTENT;
        $answer->question_id = 54;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I think the flaw here is that HTML is a Chomsky Type 2 grammar (context free grammar) and RegEx is a Chomsky Type 3 grammar (regular grammar). Since a Type 2 grammar is fundamentally more complex than a Type 3 grammar (see the Chomsky hierarchy), you can't possibly make this work. But many will try, some will claim success and others will find the fault and totally mess you up.;share  55
        513 I found 2 things;first;textarea{resize:none};this is a css3 which is not released yet compatable with Firefox4+ chrome and safari;another format feature is to overflow:auto to get rid of the right scrollbar taking into account dir attribute;code and different browsers;Basic html;<!DOCTYPE html>;Some browsers;IE8;FF 17.0.1;chrome  
CONTENT;
        $answer->question_id = 56;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can technically use colons and periods in id/name attributes, but I would strongly suggest avoiding both.;In CSS (and several JavaScript libraries like jQuery), both the period and the colon have special meaning and you will run into problems if you're not careful. Periods are class selectors and colons are pseudo-selectors (eg., ":hover" for an element when the mouse is over it).;If you give an element the id "my.cool:thing", your CSS selector will look like this;#my.cool:thing {... /* some rules */... };Which is really saying, "the element with an id of 'my', a class of 'cool' and the 'thing' pseudo-selector" in CSS-speak.;Stick to A-Z of any case, numbers, underscores and hyphens. And as said above, make sure your ids are unique.;That should be your first concern.   
CONTENT;
        $answer->question_id = 57;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You need to use list-style: none,...    
CONTENT;
        $answer->question_id = 58;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          working off of One Crayon's solution, I have something that works for me and is simpler;input[type=checkbox], input[type=radio];vertical-align: middle;position: relative;bottom: 1px;input[type=radio];bottom: 2px;renders pixel-for-pixel the same in safari (whose baseline I trust) and both firefox and IE7 check out as good. it also works for various label font sizes, big and small. now, for fixing IE's baseline on selects and inputs..... 
CONTENT;
        $answer->question_id = 59;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          NOTE: If you are working with an HTML5 browser then you should ignore this answer. This is now possible as can be seen in the other answers.;There is no way to modify the URL in the browser without reloading the page. The URL represents what the last loaded page was. If you change it (document.location) then it will reload the page.;One obvious reason being, you write a site on www.mysite.com that looks like a bank login page. Then you change the browser url bar to say www.mybank.com. The user will be totally unaware that they are really looking at www.mysite.com.  
CONTENT;
        $answer->question_id = 60;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          XML doesn't allow leaving tags open, so it makes;a bit worse than the other two. The other two are roughly equivalent with the second preferred for compatibility with older browsers. Actually, space before / is preferred for compatibility sake, but I think it only makes sense for tags that have attributes. So I'd say either;or, whichever pleases your aesthetics.;To sum it up: all three are valid with the first one being a bit less "portable".;Edit: Now that we're all crazy about specs, I think it worth pointing out that according to dev.w3.org;Start tags consist of the following;parts, in exactly the following order;A " " character.    
CONTENT;
        $answer->question_id = 61;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        behavior);HTML;content;CSS:.yourdiv;display: inline  
CONTENT;
        $answer->question_id = 62;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This article seems to offer a pretty good overview of the difference.;From the page;Buttons created with the BUTTON element function just like buttons;created with the INPUT element, but;they offer richer rendering;possibilities: the BUTTON element may;have content. For example, a BUTTON;element that contains an image;functions like and may resemble an;INPUT element whose type is set to;“image”, but the BUTTON element type;allows content.;The Button Element - W3C 
CONTENT;
        $answer->question_id = 63;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Technically $(' ') will 'create' a div element (or more specifically a DIV DOM element) but wont add it to your HTML document. You will then need to use that in combination with the other answers to actually do anything useful with it (such as using the append() method or such like).;The manipulation documentation gives you all the various options on how to add new elements.   
CONTENT;
        $answer->question_id = 64;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I just used;$('#source').prependTo('#destination');Which I grabbed from here.   
CONTENT;
        $answer->question_id = 65;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you’re able to absolutely position your elements;position: absolute;top: 0;bottom: 0;would do it.    
CONTENT;
        $answer->question_id = 66;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          After some investigation and general hair-pulling the solution seems to be HTML2PDF. DOMPDF did a terrible job with tables, borders and even moderately complex layout and htmldoc seems reasonably robust but is almost completely CSS-ignorant and I don't want to go back to doing HTML layout without CSS just for that program.;HTML2PDF looked the most promising but I kept having this weird error about null reference arguments to node_type. I finally found the solution to this. Basically, PHP 5.1.x worked fine with regex replaces (preg_replace_*) on strings of any size. PHP 5.2.1 introduced a php.ini config directive called pcre.backtrack_limit. What this config parameter does is limits the string length for which matching is done. Why this was introduced I don't know. The default value was chosen as 100,000. Why such a low value? Again, no idea.;A bug was raised against PHP 5.2.1 for this, which is still open almost two years later.;What's horrifying about this is that when the limit is exceeded, the replace just silently fails. At least if an error had been raised and logged you'd have some indication of what happened, why and what to change to fix it. But no.;So I have a 70k HTML file to turn into PDF. It requires the following php.ini settings;pcre.backtrack_limit = 2000000, # probably more than I need but that's OK;memory_limit = 1024M, # yes, one gigabyte, and;max_execution_time = 600, # yes, 10 minutes.;Now the astute reader may have noticed that my HTML file is smaller than 100k. The only reason I can guess as to why I hit this problem is that html2pdf does a conversion into xhtml as part of the process. Perhaps that took me over (although nearly 50% bloat seems odd). Whatever the case, the above worked.;Now, html2pdf is a resource hog. My 70k file takes approximately 5 minutes and at least 500-600M of RAM to create a 35 page PDF file. Not quick enough (by far) for a real-time download unfortunately and the memory usage puts the memory usage ratio in the order of 1000-to-1 (600M of RAM for a 70k file), which is utterly ridiculous.;Unfortunately, that's the best I've come up with. 
CONTENT;
        $answer->question_id = 67;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The only one package I've been able to find is Tag.;You can install it using the package control. https://sublime.wbond.net;After installing package control. Go to package control (Preferences -> Package Control) then type install, hit enter. Then type tag and hit enter.;After installing Tag, highlight the text and press the shortcut Ctrl + Alt + F. 
CONTENT;
        $answer->question_id = 68;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Creating new DOM elements is a core feature of the jQuery() method, see;http://api.jquery.com/jQuery/#creating-new-elements;and particulary http://api.jquery.com/jQuery/#example-1-1;Cheers.   
CONTENT;
        $answer->question_id = 69;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can easily do this by adding the following piece of CSS code;display: table-cell;vertical-align: middle;Thats means your CSS finally looks like;#box;height: 90px;width: 270px;background: #000;font-size: 48px;font-style: oblique;color: #FFF;text-align: center;margin-top: 20px;margin-left: 5px;display: table-cell;vertical-align: middle;jsfiddle here   
CONTENT;
        $answer->question_id = 70;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In case anyone's curious, the ultimate reason is that HTML was originally a dialect of SGML, which is XML's weird older brother. In SGML-land, tags can be specified in the DTD as either self-closing (e.g. BR, HR, INPUT), implicitly closeable (e.g. P, LI, TD), or explicitly closeable (e.g. TABLE, DIV, SCRIPT). XML of course has no concept of this.;The tag-soup parsers used by modern browsers evolved out of this legacy, although their parsing model isn't pure SGML anymore. And of course your carefully-crafted XHTML is being treated as badly-written tag-soup/SGML unless you send it with an XML mime type. This is also why...;hello...gets interpreted by the browser as;hello...which is the recipe for a lovely obscure bug that can throw you into fits as you try to code against the DOM.   
CONTENT;
        $answer->question_id = 71;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          JavaScript;Meta tag 
CONTENT;
        $answer->question_id = 72;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          OPTION 1: UNICODE COLUMN SORT ARROWS;I found this one very handy for a single character column sorter. (Looks good upscaled).;x21D5# = ⇕;IMPORTANT NOTE (When using unicode symbols);Unicode support varies dependant on the symbol of choice, browser and the font family. If you find your chosen symbol does not work in some browsers then try using a different font-family. Microsoft recommend "Segoe UI Symbol" however it would be wise to include the font with your website as not many people have it on their computers.;Open this page in other browsers to see which symbols render with the default font.;Some more unicode arrows.;You can copy them right off the page below or you can use the code.;Each row of arrows is numbered from left to right;0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F;Simply insert the corresponding number/letter before the closing semi-colon as above.;x219#;← ↑ → ↓ ↔ ↕ ↖ ↗ ↘ ↙ ↚ ↛ ↜ ↝ ↞ ↟;x21A#;↠ ↡ ↢ ↣ ↤ ↥ ↦ ↧ ↨ ↩ ↪ ↫ ↬ ↭ ↮ ↯;x21B#;↰ ↱ ↲ ↳ ↴ ↵ ↶ ↷ ↸ ↹ ↺ ↻ ↼ ↽ ↾ ↿;x21C#;⇀ ⇁ ⇂ ⇃ ⇄ ⇅ ⇆ ⇇ ⇈ ⇉ ⇊ ⇋ ⇌ ⇍ ⇎ ⇏;x21D#;⇐ ⇑ ⇒ ⇓ ⇔ ⇕ ⇖ ⇗ ⇘ ⇙ ⇚ ⇛ ⇜ ⇝ ⇞ ⇟;x21E#;⇠ ⇡ ⇢ ⇣ ⇤ ⇥ ⇦ ⇧ ⇨ ⇩ ⇪ ⇫ ⇬ ⇭ ⇮ ⇯;x21F#;⇰ ⇱ ⇲ ⇳ ⇴ ⇵ ⇶ ⇷ ⇸ ⇹ ⇺ ⇻ ⇼ ⇽ ⇾ ⇿;Additional HTML unicode symbols;A selected list of other helpful unicode icons/symbols.;U+2302 ⌂ HOUSE;U+2303 ⌃ UP ARROWHEAD;U+2304 ⌄ DOWN ARROWHEAD;U+2305 ⌅ PROJECTIVE;U+2306 ⌆ PERSPECTIVE;U+2307 ⌇ WAVY LINE;U+2315 ⌕ TELEPHONE RECORDER;U+2316 ⌖ POSITION INDICATOR;U+2317 ⌗ VIEWDATA SQUARE;U+2318 ⌘ PLACE OF INTEREST SIGN;U+231A ⌚ WATCH;U+231B ⌛ HOURGLASS;U+2326 ⌦ ERASE TO THE RIGHT;U+2327 ⌧ X IN A RECTANGLE BOX;U+2328 ⌨ KEYBOARD;U+2329 〈 LEFT-POINTING ANGLE BRACKET;U+232A 〉 RIGHT-POINTING ANGLE BRACKET;U+232B ⌫ ERASE TO THE LEFT;U+23E9 ⏩ BLACK RIGHT-POINTING DOUBLE TRIANGLE;U+23EA ⏪ BLACK LEFT-POINTING DOUBLE TRIANGLE;U+23EB ⏫ BLACK UP-POINTING DOUBLE TRIANGLE;U+23EC ⏬ BLACK DOWN-POINTING DOUBLE TRIANGLE;U+23ED ⏭ BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR;U+23EE ⏮ BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR;U+23EF ⏯ BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR;U+23F0 ⏰ ALARM CLOCK;U+23F1 ⏱ STOPWATCH;U+23F2 ⏲ TIMER CLOCK;U+23F3 ⏳ HOURGLASS WITH FLOWING SAND;U+2600 ☀ BLACK SUN WITH RAYS;U+2601 ☁ CLOUD;U+2602 ☂ UMBRELLA;U+2603 ☃ SNOWMAN;U+2604 ☄ COMET;U+2605 ★ BLACK STAR;U+2606 ☆ WHITE STAR;U+2607 ☇ LIGHTNING;U+2608 ☈ THUNDERSTORM;U+2609 ☉ SUN;U+260A ☊ ASCENDING NODE;U+260B ☋ DESCENDING NODE;U+260C ☌ CONJUNCTION;U+260D ☍ OPPOSITION;U+260E ☎ BLACK TELEPHONE;U+260F ☏ WHITE TELEPHONE;U+2610 ☐ BALLOT BOX;U+2611 ☑ BALLOT BOX WITH CHECK;U+2612 ☒ BALLOT BOX WITH X;U+2613 ☓ SALTIRE;U+2614 ☔ UMBRELLA WITH RAIN DROPS;U+2615 ☕ HOT BEVERAGE;U+2616 ☖ WHITE SHOGI PIECE;U+2617 ☗ BLACK SHOGI PIECE;U+2618 ☘ SHAMROCK;U+2619 ☙ REVERSED ROTATED FLORAL HEART BULLET;U+261A ☚ BLACK LEFT POINTING INDEX;U+261B ☛ BLACK RIGHT POINTING INDEX;U+261C ☜ WHITE LEFT POINTING INDEX;U+261D ☝ WHITE UP POINTING INDEX;U+261E ☞ WHITE RIGHT POINTING INDEX;U+261F ☟ WHITE DOWN POINTING INDEX;U+2620 ☠ SKULL AND CROSSBONES;U+2621 ☡ CAUTION SIGN;U+2622 ☢ RADIOACTIVE SIGN;U+2623 ☣ BIOHAZARD SIGN;U+262A ☪ STAR AND CRESCENT;U+262B ☫ FARSI SYMBOL;U+262C ☬ ADI SHAKTI;U+262D ☭ HAMMER AND SICKLE;U+262E ☮ PEACE SYMBOL;U+262F ☯ YIN YANG;U+2638 ☸ WHEEL OF DHARMA;U+2639 ☹ WHITE FROWNING FACE;U+263A ☺ WHITE SMILING FACE;U+263B ☻ BLACK SMILING FACE;U+263C ☼ WHITE SUN WITH RAYS;U+263D ☽ FIRST QUARTER MOON;U+263E ☾ LAST QUARTER MOON;U+263F ☿ MERCURY;U+2640 ♀ FEMALE SIGN;U+2641 ♁ EARTH;U+2642 ♂ MALE SIGN;U+2643 ♃ JUPITER;U+2644 ♄ SATURN;U+2645 ♅ URANUS;U+2646 ♆ NEPTUNE;U+2647 ♇ PLUTO;U+2648 ♈ ARIES;U+2649 ♉ TAURUS;U+264A ♊ GEMINI;U+264B ♋ CANCER;U+264C ♌ LEO;U+264D ♍ VIRGO;U+264E ♎ LIBRA;U+264F ♏ SCORPIUS;U+2650 ♐ SAGITTARIUS;U+2651 ♑ CAPRICORN;U+2652 ♒ AQUARIUS;U+2653 ♓ PISCES;U+2654 ♔ WHITE CHESS KING;U+2655 ♕ WHITE CHESS QUEEN;U+2656 ♖ WHITE CHESS ROOK;U+2657 ♗ WHITE CHESS BISHOP;U+2658 ♘ WHITE CHESS KNIGHT;U+2659 ♙ WHITE CHESS PAWN;U+265A ♚ BLACK CHESS KING;U+265B ♛ BLACK CHESS QUEEN;U+265C ♜ BLACK CHESS ROOK;U+265D ♝ BLACK CHESS BISHOP;U+265E ♞ BLACK CHESS KNIGHT;U+265F ♟ BLACK CHESS PAWN;U+2660 ♠ BLACK SPADE SUIT;U+2661 ♡ WHITE HEART SUIT;U+2662 ♢ WHITE DIAMOND SUIT;U+2663 ♣ BLACK CLUB SUIT;U+2664 ♤ WHITE SPADE SUIT;U+2665 ♥ BLACK HEART SUIT;U+2666 ♦ BLACK DIAMOND SUIT;U+2667 ♧ WHITE CLUB SUIT;U+2668 ♨ HOT SPRINGS;U+2669 ♩ QUARTER NOTE;U+266A ♪ EIGHTH NOTE;U+266B ♫ BEAMED EIGHTH NOTES;U+266C ♬ BEAMED SIXTEENTH NOTES;U+266D ♭ MUSIC FLAT SIGN;U+266E ♮ MUSIC NATURAL SIGN;U+266F ♯ MUSIC SHARP SIGN;U+267A ♺ RECYCLING SYMBOL FOR GENERIC MATERIALS;U+267B ♻ BLACK UNIVERSAL RECYCLING SYMBOL;U+267C ♼ RECYCLED PAPER SYMBOL;U+267D ♽ PARTIALLY-RECYCLED PAPER SYMBOL;U+267E ♾ PERMANENT PAPER SIGN;U+267F ♿ WHEELCHAIR SYMBOL;U+2680 ⚀ DIE FACE-1;U+2681 ⚁ DIE FACE-2;U+2682 ⚂ DIE FACE-3;U+2683 ⚃ DIE FACE-4;U+2684 ⚄ DIE FACE-5;U+2685 ⚅ DIE FACE-6;U+2686 ⚆ WHITE CIRCLE WITH DOT RIGHT;U+2687 ⚇ WHITE CIRCLE WITH TWO DOTS;U+2688 ⚈ BLACK CIRCLE WITH WHITE DOT RIGHT;U+2689 ⚉ BLACK CIRCLE WITH TWO WHITE DOTS;U+268A ⚊ MONOGRAM FOR YANG;U+268B ⚋ MONOGRAM FOR YIN;U+268C ⚌ DIGRAM FOR GREATER YANG;U+268D ⚍ DIGRAM FOR LESSER YIN;U+268E ⚎ DIGRAM FOR LESSER YANG;U+268F ⚏ DIGRAM FOR GREATER YIN;U+2690 ⚐ WHITE FLAG;U+2691 ⚑ BLACK FLAG;U+2692 ⚒ HAMMER AND PICK;U+2693 ⚓ ANCHOR;U+2694 ⚔ CROSSED SWORDS;U+2695 ⚕ STAFF OF AESCULAPIUS;U+2696 ⚖ SCALES;U+2697 ⚗ ALEMBIC;U+2698 ⚘ FLOWER;U+2699 ⚙ GEAR;U+269A ⚚ STAFF OF HERMES;U+269B ⚛ ATOM SYMBOL;U+269C ⚜ FLEUR-DE-LIS;U+269D ⚝ OUTLINED WHITE STAR;U+269E ⚞ THREE LINES CONVERGING RIGHT;U+269F ⚟ THREE LINES CONVERGING LEFT;U+26A0 ⚠ WARNING SIGN;U+26A1 ⚡ HIGH VOLTAGE SIGN;U+26A2 ⚢ DOUBLED FEMALE SIGN;U+26A3 ⚣ DOUBLED MALE SIGN;U+26A4 ⚤ INTERLOCKED FEMALE AND MALE SIGN;U+26A5 ⚥ MALE AND FEMALE SIGN;U+26A6 ⚦ MALE WITH STROKE SIGN;U+26A7 ⚧ MALE WITH STROKE AND MALE AND FEMALE SIGN;U+26A8 ⚨ VERTICAL MALE WITH STROKE SIGN;U+26A9 ⚩ HORIZONTAL MALE WITH STROKE SIGN;U+26AA ⚪ MEDIUM WHITE CIRCLE;U+26AB ⚫ MEDIUM BLACK CIRCLE;U+26BD ⚽ SOCCER BALL;U+26BE ⚾ BASEBALL;U+26BF ⚿ SQUARED KEY;U+26C0 ⛀ WHITE DRAUGHTS MAN;U+26C1 ⛁ WHITE DRAUGHTS KING;U+26C2 ⛂ BLACK DRAUGHTS MAN;U+26C3 ⛃ BLACK DRAUGHTS KING;U+26C4 ⛄ SNOWMAN WITHOUT SNOW;U+26C5 ⛅ SUN BEHIND CLOUD;U+26C6 ⛆ RAIN;U+26C7 ⛇ BLACK SNOWMAN;U+26C8 ⛈ THUNDER CLOUD AND RAIN;U+26C9 ⛉ TURNED WHITE SHOGI PIECE;U+26CA ⛊ TURNED BLACK SHOGI PIECE;U+26CB ⛋ WHITE DIAMOND IN SQUARE;U+26CC ⛌ CROSSING LANES;U+26CD ⛍ DISABLED CAR;U+26CE ⛎ OPHIUCHUS;U+26CF ⛏ PICK;U+26D0 ⛐ CAR SLIDING;U+26D1 ⛑ HELMET WITH WHITE CROSS;U+26D2 ⛒ CIRCLED CROSSING LANES;U+26D3 ⛓ CHAINS;U+26D4 ⛔ NO ENTRY;U+26D5 ⛕ ALTERNATE ONE-WAY LEFT WAY TRAFFIC;U+26D6 ⛖ BLACK TWO-WAY LEFT WAY TRAFFIC;U+26D7 ⛗ WHITE TWO-WAY LEFT WAY TRAFFIC;U+26D8 ⛘ BLACK LEFT LANE MERGE;U+26D9 ⛙ WHITE LEFT LANE MERGE;U+26DA ⛚ DRIVE SLOW SIGN;U+26DB ⛛ HEAVY WHITE DOWN-POINTING TRIANGLE;U+26DC ⛜ LEFT CLOSED ENTRY;U+26DD ⛝ SQUARED SALTIRE;U+26DE ⛞ FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE;U+26DF ⛟ BLACK TRUCK;U+26E0 ⛠ RESTRICTED LEFT ENTRY-1;U+26E1 ⛡ RESTRICTED LEFT ENTRY-2;U+26E2 ⛢ ASTRONOMICAL SYMBOL FOR URANUS;U+26E3 ⛣ HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE;U+26E4 ⛤ PENTAGRAM;U+26E5 ⛥ RIGHT-HANDED INTERLACED PENTAGRAM;U+26E6 ⛦ LEFT-HANDED INTERLACED PENTAGRAM;U+26E7 ⛧ INVERTED PENTAGRAM;U+26E8 ⛨ BLACK CROSS ON SHIELD;U+26E9 ⛩ SHINTO SHRINE;U+26EA ⛪ CHURCH;U+26EB ⛫ CASTLE;U+26EC ⛬ HISTORIC SITE;U+26ED ⛭ GEAR WITHOUT HUB;U+26EE ⛮ GEAR WITH HANDLES;U+26EF ⛯ MAP SYMBOL FOR LIGHTHOUSE;U+26F0 ⛰ MOUNTAIN;U+26F1 ⛱ UMBRELLA ON GROUND;U+26F2 ⛲ FOUNTAIN;U+26F3 ⛳ FLAG IN HOLE;U+26F4 ⛴ FERRY;U+26F5 ⛵ SAILBOAT;U+26F6 ⛶ SQUARE FOUR CORNERS;U+26F7 ⛷ SKIER;U+26F8 ⛸ ICE SKATE;U+26F9 ⛹ PERSON WITH BALL;U+26FA ⛺ TENT;U+26FD ⛽ FUEL PUMP;U+26FE ⛾ CUP ON BLACK SQUARE;U+26FF ⛿ WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE;U+2701 ✁ UPPER BLADE SCISSORS;U+2702 ✂ BLACK SCISSORS;U+2703 ✃ LOWER BLADE SCISSORS;U+2704 ✄ WHITE SCISSORS;U+2705 ✅ WHITE HEAVY CHECK MARK;U+2706 ✆ TELEPHONE LOCATION SIGN;U+2707 ✇ TAPE DRIVE;U+2708 ✈ AIRPLANE;U+2709 ✉ ENVELOPE;U+270A ✊ RAISED FIST;U+270B ✋ RAISED HAND;U+270C ✌ VICTORY HAND;U+270D ✍ WRITING HAND;U+270E ✎ LOWER RIGHT PENCIL;U+270F ✏ PENCIL;U+2710 ✐ UPPER RIGHT PENCIL;U+2711 ✑ WHITE NIB;U+2712 ✒ BLACK NIB;U+2713 ✓ CHECK MARK;U+2714 ✔ HEAVY CHECK MARK;U+2715 ✕ MULTIPLICATION X;U+2716 ✖ HEAVY MULTIPLICATION X;U+2717 ✗ BALLOT X;U+2718 ✘ HEAVY BALLOT X;U+2719 ✙ OUTLINED GREEK CROSS;U+271A ✚ HEAVY GREEK CROSS;U+271B ✛ OPEN CENTRE CROSS;U+271C ✜ HEAVY OPEN CENTRE CROSS;U+271D ✝ LATIN CROSS;U+271E ✞ SHADOWED WHITE LATIN CROSS;U+271F ✟ OUTLINED LATIN CROSS;U+2720 ✠ MALTESE CROSS;U+2721 ✡ STAR OF DAVID;U+2722 ✢ FOUR TEARDROP-SPOKED ASTERISK;U+2723 ✣ FOUR BALLOON-SPOKED ASTERISK;U+2724 ✤ HEAVY FOUR BALLOON-SPOKED ASTERISK;U+2725 ✥ FOUR CLUB-SPOKED ASTERISK;U+2726 ✦ BLACK FOUR POINTED STAR;U+2727 ✧ WHITE FOUR POINTED STAR;U+2728 ✨ SPARKLES;U+2729 ✩ STRESS OUTLINED WHITE STAR;U+272A ✪ CIRCLED WHITE STAR;U+272B ✫ OPEN CENTRE BLACK STAR;U+272C ✬ BLACK CENTRE WHITE STAR;U+272D ✭ OUTLINED BLACK STAR;U+272E ✮ HEAVY OUTLINED BLACK STAR;U+272F ✯ PINWHEEL STAR;U+2730 ✰ SHADOWED WHITE STAR;U+2731 ✱ HEAVY ASTERISK;U+2732 ✲ OPEN CENTRE ASTERISK;U+2733 ✳ EIGHT SPOKED ASTERISK;U+2734 ✴ EIGHT POINTED BLACK STAR;U+2735 ✵ EIGHT POINTED PINWHEEL STAR;U+2736 ✶ SIX POINTED BLACK STAR;U+2737 ✷ EIGHT POINTED RECTILINEAR BLACK STAR;U+2738 ✸ HEAVY EIGHT POINTED RECTILINEAR BLACK STAR;U+2739 ✹ TWELVE POINTED BLACK STAR;U+273A ✺ SIXTEEN POINTED ASTERISK;U+273B ✻ TEARDROP-SPOKED ASTERISK;U+273C ✼ OPEN CENTRE TEARDROP-SPOKED ASTERISK;U+273D ✽ HEAVY TEARDROP-SPOKED ASTERISK;U+273E ✾ SIX PETALLED BLACK AND WHITE FLORETTE;U+273F ✿ BLACK FLORETTE;U+2740 ❀ WHITE FLORETTE;U+2741 ❁ EIGHT PETALLED OUTLINED BLACK FLORETTE;U+2742 ❂ CIRCLED OPEN CENTRE EIGHT POINTED STAR;U+2743 ❃ HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK;U+2744 ❄ SNOWFLAKE;U+2745 ❅ TIGHT TRIFOLIATE SNOWFLAKE;U+2746 ❆ HEAVY CHEVRON SNOWFLAKE;U+2747 ❇ SPARKLE;U+2748 ❈ HEAVY SPARKLE;U+2749 ❉ BALLOON-SPOKED ASTERISK;U+274A ❊ EIGHT TEARDROP-SPOKED PROPELLER ASTERISK;U+274B ❋ HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK;U+274C ❌ CROSS MARK;U+274D ❍ SHADOWED WHITE CIRCLE;U+274E ❎ NEGATIVE SQUARED CROSS MARK;U+2753 ❓ BLACK QUESTION MARK ORNAMENT;U+2754 ❔ WHITE QUESTION MARK ORNAMENT;U+2755 ❕ WHITE EXCLAMATION MARK ORNAMENT;U+2756 ❖ BLACK DIAMOND MINUS WHITE X;U+2757 ❗ HEAVY EXCLAMATION MARK SYMBOL;U+275B ❛ HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT;U+275C ❜ HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT;U+275D ❝ HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT;U+275E ❞ HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT;U+275F ❟ HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT;U+2760 ❠ HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT;U+2761 ❡ CURVED STEM PARAGRAPH SIGN ORNAMENT;U+2762 ❢ HEAVY EXCLAMATION MARK ORNAMENT;U+2763 ❣ HEAVY HEART EXCLAMATION MARK ORNAMENT;U+2764 ❤ HEAVY BLACK HEART;U+2765 ❥ ROTATED HEAVY BLACK HEART BULLET;U+2766 ❦ FLORAL HEART;U+2767 ❧ ROTATED FLORAL HEART BULLET;U+276C ❬ MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT;U+276D ❭ MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT;U+276E ❮ HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT;U+276F ❯ HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT;U+2770 ❰ HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT;U+2771 ❱ HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT;U+2794 ➔ HEAVY WIDE-HEADED RIGHTWARDS ARROW;U+2795 ➕ HEAVY PLUS SIGN;U+2796 ➖ HEAVY MINUS SIGN;U+2797 ➗ HEAVY DIVISION SIGN;U+2798 ➘ HEAVY SOUTH EAST ARROW;U+2799 ➙ HEAVY RIGHTWARDS ARROW;U+279A ➚ HEAVY NORTH EAST ARROW;U+279B ➛ DRAFTING POINT RIGHTWARDS ARROW;U+279C ➜ HEAVY ROUND-TIPPED RIGHTWARDS ARROW;U+279D ➝ TRIANGLE-HEADED RIGHTWARDS ARROW;U+279E ➞ HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW;U+279F ➟ DASHED TRIANGLE-HEADED RIGHTWARDS ARROW;U+27A0 ➠ HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW;U+27A1 ➡ BLACK RIGHTWARDS ARROW;U+27A2 ➢ THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD;U+27A3 ➣ THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD;U+27A4 ➤ BLACK RIGHTWARDS ARROWHEAD;U+27A5 ➥ HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW;U+27A6 ➦ HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW;U+27A7 ➧ SQUAT BLACK RIGHTWARDS ARROW;U+27A8 ➨ HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW;U+27A9 ➩ RIGHT-SHADED WHITE RIGHTWARDS ARROW;U+27AA ➪ LEFT-SHADED WHITE RIGHTWARDS ARROW;U+27AB ➫ BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW;U+27AC ➬ FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW;U+27AD ➭ HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW;U+27AE ➮ HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW;U+27AF ➯ NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW;U+27B0 ➰ CURLY LOOP;U+27B1 ➱ NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW;U+27B2 ➲ CIRCLED HEAVY WHITE RIGHTWARDS ARROW;U+27B3 ➳ WHITE-FEATHERED RIGHTWARDS ARROW;U+27B4 ➴ BLACK-FEATHERED SOUTH EAST ARROW;U+27B5 ➵ BLACK-FEATHERED RIGHTWARDS ARROW;U+27B6 ➶ BLACK-FEATHERED NORTH EAST ARROW;U+27B7 ➷ HEAVY BLACK-FEATHERED SOUTH EAST ARROW;U+27B8 ➸ HEAVY BLACK-FEATHERED RIGHTWARDS ARROW;U+27B9 ➹ HEAVY BLACK-FEATHERED NORTH EAST ARROW;U+27BA ➺ TEARDROP-BARBED RIGHTWARDS ARROW;U+27BB ➻ HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW;U+27BC ➼ WEDGE-TAILED RIGHTWARDS ARROW;U+27BD ➽ HEAVY WEDGE-TAILED RIGHTWARDS ARROW;U+27BE ➾ OPEN-OUTLINED RIGHTWARDS ARROW;U+27C0 ⟀ THREE DIMENSIONAL ANGLE;U+27E8 ⟨ MATHEMATICAL LEFT ANGLE BRACKET;U+27E9 ⟩ MATHEMATICAL RIGHT ANGLE BRACKET;U+27EA ⟪ MATHEMATICAL LEFT DOUBLE ANGLE BRACKET;U+27EB ⟫ MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET;U+27F0 ⟰ UPWARDS QUADRUPLE ARROW;U+27F1 ⟱ DOWNWARDS QUADRUPLE ARROW;U+27F2 ⟲ ANTICLOCKWISE GAPPED CIRCLE ARROW;U+27F3 ⟳ CLOCKWISE GAPPED CIRCLE ARROW;U+27F4 ⟴ RIGHT ARROW WITH CIRCLED PLUS;U+27F5 ⟵ LONG LEFTWARDS ARROW;U+27F6 ⟶ LONG RIGHTWARDS ARROW;U+27F7 ⟷ LONG LEFT RIGHT ARROW;U+27F8 ⟸ LONG LEFTWARDS DOUBLE ARROW;U+27F9 ⟹ LONG RIGHTWARDS DOUBLE ARROW;U+27FA ⟺ LONG LEFT RIGHT DOUBLE ARROW;U+27FB ⟻ LONG LEFTWARDS ARROW FROM BAR;U+27FC ⟼ LONG RIGHTWARDS ARROW FROM BAR;U+27FD ⟽ LONG LEFTWARDS DOUBLE ARROW FROM BAR;U+27FE ⟾ LONG RIGHTWARDS DOUBLE ARROW FROM BAR;U+27FF ⟿ LONG RIGHTWARDS SQUIGGLE ARROW;U+2900 ⤀ RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE;U+2901 ⤁ RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE;U+2902 ⤂ LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE;U+2903 ⤃ RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE;U+2904 ⤄ LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE;U+2905 ⤅ RIGHTWARDS TWO-HEADED ARROW FROM BAR;U+2906 ⤆ LEFTWARDS DOUBLE ARROW FROM BAR;U+2907 ⤇ RIGHTWARDS DOUBLE ARROW FROM BAR;U+2908 ⤈ DOWNWARDS ARROW WITH HORIZONTAL STROKE;U+2909 ⤉ UPWARDS ARROW WITH HORIZONTAL STROKE;U+290A ⤊ UPWARDS TRIPLE ARROW;U+290B ⤋ DOWNWARDS TRIPLE ARROW;U+290C ⤌ LEFTWARDS DOUBLE DASH ARROW;U+290D ⤍ RIGHTWARDS DOUBLE DASH ARROW;U+290E ⤎ LEFTWARDS TRIPLE DASH ARROW;U+290F ⤏ RIGHTWARDS TRIPLE DASH ARROW;U+2910 ⤐ RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW;U+2911 ⤑ RIGHTWARDS ARROW WITH DOTTED STEM;U+2912 ⤒ UPWARDS ARROW TO BAR;U+2913 ⤓ DOWNWARDS ARROW TO BAR;U+2914 ⤔ RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE;U+2915 ⤕ RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE;U+2916 ⤖ RIGHTWARDS TWO-HEADED ARROW WITH TAIL;U+2917 ⤗ RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE;U+2918 ⤘ RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE;U+2919 ⤙ LEFTWARDS ARROW-TAIL;U+291A ⤚ RIGHTWARDS ARROW-TAIL;U+291B ⤛ LEFTWARDS DOUBLE ARROW-TAIL;U+291C ⤜ RIGHTWARDS DOUBLE ARROW-TAIL;U+291D ⤝ LEFTWARDS ARROW TO BLACK DIAMOND;U+291E ⤞ RIGHTWARDS ARROW TO BLACK DIAMOND;U+291F ⤟ LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND;U+2920 ⤠ RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND;U+2921 ⤡ NORTH WEST AND SOUTH EAST ARROW;U+2922 ⤢ NORTH EAST AND SOUTH WEST ARROW;U+2923 ⤣ NORTH WEST ARROW WITH HOOK;U+2924 ⤤ NORTH EAST ARROW WITH HOOK;U+2925 ⤥ SOUTH EAST ARROW WITH HOOK;U+2926 ⤦ SOUTH WEST ARROW WITH HOOK;U+2927 ⤧ NORTH WEST ARROW AND NORTH EAST ARROW;U+2928 ⤨ NORTH EAST ARROW AND SOUTH EAST ARROW;U+2929 ⤩ SOUTH EAST ARROW AND SOUTH WEST ARROW;U+292A ⤪ SOUTH WEST ARROW AND NORTH WEST ARROW;U+292B ⤫ RISING DIAGONAL CROSSING FALLING DIAGONAL;U+292C ⤬ FALLING DIAGONAL CROSSING RISING DIAGONAL;U+292D ⤭ SOUTH EAST ARROW CROSSING NORTH EAST ARROW;U+292E ⤮ NORTH EAST ARROW CROSSING SOUTH EAST ARROW;U+292F ⤯ FALLING DIAGONAL CROSSING NORTH EAST ARROW;U+2930 ⤰ RISING DIAGONAL CROSSING SOUTH EAST ARROW;U+2931 ⤱ NORTH EAST ARROW CROSSING NORTH WEST ARROW;U+2932 ⤲ NORTH WEST ARROW CROSSING NORTH EAST ARROW;U+2933 ⤳ WAVE ARROW POINTING DIRECTLY RIGHT;U+2934 ⤴ ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS;U+2935 ⤵ ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS;U+2936 ⤶ ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS;U+2937 ⤷ ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS;U+2938 ⤸ RIGHT-SIDE ARC CLOCKWISE ARROW;U+2939 ⤹ LEFT-SIDE ARC ANTICLOCKWISE ARROW;U+293A ⤺ TOP ARC ANTICLOCKWISE ARROW;U+293B ⤻ BOTTOM ARC ANTICLOCKWISE ARROW;U+293C ⤼ TOP ARC CLOCKWISE ARROW WITH MINUS;U+293D ⤽ TOP ARC ANTICLOCKWISE ARROW WITH PLUS;U+293E ⤾ LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW;U+293F ⤿ LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW;U+2940 ⥀ ANTICLOCKWISE CLOSED CIRCLE ARROW;U+2941 ⥁ CLOCKWISE CLOSED CIRCLE ARROW;U+2942 ⥂ RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW;U+2943 ⥃ LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW;U+2944 ⥄ SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW;U+2945 ⥅ RIGHTWARDS ARROW WITH PLUS BELOW;U+2946 ⥆ LEFTWARDS ARROW WITH PLUS BELOW;U+2962 ⥢ LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN;U+2963 ⥣ UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT;U+2964 ⥤ RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN;U+2965 ⥥ DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT;U+2966 ⥦ LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP;U+2967 ⥧ LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN;U+2968 ⥨ RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP;U+2969 ⥩ RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN;U+296A ⥪ LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH;U+296B ⥫ LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH;U+296C ⥬ RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH;U+296D ⥭ RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH;U+296E ⥮ UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT;U+296F ⥯ DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT;U+2989 ⦉ Z NOTATION LEFT BINDING BRACKET;U+298A ⦊ Z NOTATION RIGHT BINDING BRACKET;U+2991 ⦑ LEFT ANGLE BRACKET WITH DOT;U+2992 ⦒ RIGHT ANGLE BRACKET WITH DOT;U+2993 ⦓ LEFT ARC LESS-THAN BRACKET;U+2994 ⦔ RIGHT ARC GREATER-THAN BRACKET;U+2995 ⦕ DOUBLE LEFT ARC GREATER-THAN BRACKET;U+2996 ⦖ DOUBLE RIGHT ARC LESS-THAN BRACKET;U+29A8 ⦨ MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT;U+29A9 ⦩ MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT;U+29AA ⦪ MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT;U+29AB ⦫ MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT;U+29AC ⦬ MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP;U+29AD ⦭ MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP;U+29AE ⦮ MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN;U+29AF ⦯ MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN;U+29BE ⦾ CIRCLED WHITE BULLET;U+29BF ⦿ CIRCLED BULLET;U+29C9 ⧉ TWO JOINED SQUARES;U+29CE ⧎ RIGHT TRIANGLE ABOVE LEFT TRIANGLE;U+29CF ⧏ LEFT TRIANGLE BESIDE VERTICAL BAR;U+29D0 ⧐ VERTICAL BAR BESIDE RIGHT TRIANGLE;U+29D1 ⧑ BOWTIE WITH LEFT HALF BLACK;U+29D2 ⧒ BOWTIE WITH RIGHT HALF BLACK;U+29D3 ⧓ BLACK BOWTIE;U+29D4 ⧔ TIMES WITH LEFT HALF BLACK;U+29D5 ⧕ TIMES WITH RIGHT HALF BLACK;U+29D6 ⧖ WHITE HOURGLASS;U+29D7 ⧗ BLACK HOURGLASS;U+29E8 ⧨ DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK;U+29E9 ⧩ DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK;U+29EA ⧪ BLACK DIAMOND WITH DOWN ARROW;U+29EB ⧫ BLACK LOZENGE;U+29EC ⧬ WHITE CIRCLE WITH DOWN ARROW;U+29ED ⧭ BLACK CIRCLE WITH DOWN ARROW;U+29F4 ⧴ RULE-DELAYED;U+29FC ⧼ LEFT-POINTING CURVED ANGLE BRACKET;U+29FD ⧽ RIGHT-POINTING CURVED ANGLE BRACKET;U+29FE ⧾ TINY;U+29FF ⧿ MINY;U+2B00 ⬀ NORTH EAST WHITE ARROW;U+2B01 ⬁ NORTH WEST WHITE ARROW;U+2B02 ⬂ SOUTH EAST WHITE ARROW;U+2B03 ⬃ SOUTH WEST WHITE ARROW;U+2B04 ⬄ LEFT RIGHT WHITE ARROW;U+2B05 ⬅ LEFTWARDS BLACK ARROW;U+2B06 ⬆ UPWARDS BLACK ARROW;U+2B07 ⬇ DOWNWARDS BLACK ARROW;U+2B08 ⬈ NORTH EAST BLACK ARROW;U+2B09 ⬉ NORTH WEST BLACK ARROW;U+2B0A ⬊ SOUTH EAST BLACK ARROW;U+2B0B ⬋ SOUTH WEST BLACK ARROW;U+2B0C ⬌ LEFT RIGHT BLACK ARROW;U+2B0D ⬍ UP DOWN BLACK ARROW;U+2B0E ⬎ RIGHTWARDS ARROW WITH TIP DOWNWARDS;U+2B0F ⬏ RIGHTWARDS ARROW WITH TIP UPWARDS;U+2B10 ⬐ LEFTWARDS ARROW WITH TIP DOWNWARDS;U+2B11 ⬑ LEFTWARDS ARROW WITH TIP UPWARDS;U+2B12 ⬒ SQUARE WITH TOP HALF BLACK;U+2B13 ⬓ SQUARE WITH BOTTOM HALF BLACK;U+2B14 ⬔ SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK;U+2B15 ⬕ SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK;U+2B16 ⬖ DIAMOND WITH LEFT HALF BLACK;U+2B17 ⬗ DIAMOND WITH RIGHT HALF BLACK;U+2B18 ⬘ DIAMOND WITH TOP HALF BLACK;U+2B19 ⬙ DIAMOND WITH BOTTOM HALF BLACK;U+2B1A ⬚ DOTTED SQUARE;U+2B1B ⬛ BLACK LARGE SQUARE;U+2B1C ⬜ WHITE LARGE SQUARE;U+2B1D ⬝ BLACK VERY SMALL SQUARE;U+2B1E ⬞ WHITE VERY SMALL SQUARE;U+2B1F ⬟ BLACK PENTAGON;U+2B20 ⬠ WHITE PENTAGON;U+2B21 ⬡ WHITE HEXAGON;U+2B22 ⬢ BLACK HEXAGON;U+2B23 ⬣ HORIZONTAL BLACK HEXAGON;U+2B24 ⬤ BLACK LARGE CIRCLE;U+2B25 ⬥ BLACK MEDIUM DIAMOND;U+2B26 ⬦ WHITE MEDIUM DIAMOND;U+2B27 ⬧ BLACK MEDIUM LOZENGE;U+2B28 ⬨ WHITE MEDIUM LOZENGE;U+2B29 ⬩ BLACK SMALL DIAMOND;U+2B2A ⬪ BLACK SMALL LOZENGE;U+2B2B ⬫ WHITE SMALL LOZENGE;U+2B30 ⬰ LEFT ARROW WITH SMALL CIRCLE;U+2B31 ⬱ THREE LEFTWARDS ARROWS;U+2B32 ⬲ LEFT ARROW WITH CIRCLED PLUS;U+2B33 ⬳ LONG LEFTWARDS SQUIGGLE ARROW;U+2B34 ⬴ LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE;U+2B35 ⬵ LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE;U+2B36 ⬶ LEFTWARDS TWO-HEADED ARROW FROM BAR;U+2B37 ⬷ LEFTWARDS TWO-HEADED TRIPLE DASH ARROW;U+2B38 ⬸ LEFTWARDS ARROW WITH DOTTED STEM;U+2B39 ⬹ LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE;U+2B3A ⬺ LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE;U+2B3B ⬻ LEFTWARDS TWO-HEADED ARROW WITH TAIL;U+2B3C ⬼ LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE;U+2B3D ⬽ LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE;U+2B3E ⬾ LEFTWARDS ARROW THROUGH X;U+2B3F ⬿ WAVE ARROW POINTING DIRECTLY LEFT;U+2B40 ⭀ EQUALS SIGN ABOVE LEFTWARDS ARROW;U+2B41 ⭁ REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW;U+2B42 ⭂ LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO;U+2B43 ⭃ RIGHTWARDS ARROW THROUGH GREATER-THAN;U+2B44 ⭄ RIGHTWARDS ARROW THROUGH SUPERSET;U+2B45 ⭅ LEFTWARDS QUADRUPLE ARROW;U+2B46 ⭆ RIGHTWARDS QUADRUPLE ARROW;U+2B47 ⭇ REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW;U+2B48 ⭈ RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO;U+2B49 ⭉ TILDE OPERATOR ABOVE LEFTWARDS ARROW;U+2B4A ⭊ LEFTWARDS ARROW ABOVE ALMOST EQUAL TO;U+2B4B ⭋ LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR;U+2B4C ⭌ RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR;U+2B50 ⭐ WHITE MEDIUM STAR;U+2B51 ⭑ BLACK SMALL STAR;U+2B52 ⭒ WHITE SMALL STAR;U+2B53 ⭓ BLACK RIGHT-POINTING PENTAGON;U+2B54 ⭔ WHITE RIGHT-POINTING PENTAGON;U+2B55 ⭕ HEAVY LARGE CIRCLE;U+2B56 ⭖ HEAVY OVAL WITH OVAL INSIDE;U+2B57 ⭗ HEAVY CIRCLE WITH CIRCLE INSIDE;U+2B58 ⭘ HEAVY CIRCLE;U+2B59 ⭙ HEAVY CIRCLED SALTIRE;OPTION 2: PURE CSS CHEVRONS;I recently made an article about creating Chevrons efficiently using only CSS (No Images required).;How to simply alter;ROTATION;THICKNESS;COLOR;SIZE;CLICK FOR DEMO << >> CLICK FOR DEMO;PROS;No need to include additional resources in the form of images.;Supports full alpha transparancy.;Full cross browser support.;Small images/icons can be stored into a database.;CONS;Updating/editing can become a hassle.;Not suitable for large images due to excessive code markup that's generated.;CSS.sorting,.sorting_asc,.sorting_desc;padding:4px 21px 4px 4px;cursor:pointer;sorting;background:url(data:image/gif,base64,R0lGODlhCwALAJEAAAAAAP///xUVFf///yH5BAEAAAMALAAAAAALAAsAAAIUnC2nKLnT4or00PvyrQwrPzUZshQAOw==) no-repeat center right;sorting_asc;background:url(data:image/gif,base64,R0lGODlhCwALAJEAAAAAAP///xUVFf///yH5BAEAAAMALAAAAAALAAsAAAIRnC2nKLnT4or00Puy3rx7VQAAOw==) no-repeat center right;sorting_desc;background:url(data:image/gif,base64,R0lGODlhCwALAJEAAAAAAP///xUVFf///yH5BAEAAAMALAAAAAALAAsAAAIPnI+py+0/hJzz0IruwjsVADs=) no-repeat center right  
CONTENT;
        $answer->question_id = 73;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'm surprised no one's mentioned this yet: CSS transitions.;You can natively transition a div 's background image;#some_div;background-image:url(image_1.jpg);-webkit-transition:background-image 0.5s;/* Other vendor-prefixed transition properties */;transition:background-image 0.5s;#some_div:hover;background-image:url(image_2.jpg);This saves any kind of JavaScript or jQuery animation to fade an 's src.;share  74
        532 The original post is more than 3 years ago. And I guess many people who come to this post like me are looking for an app-like layout solution, say a somehow fixed header, footer, and full height content taking up the rest screen. If so, this post may help, it works on IE7+, etc.;http://blog.stevensanderson.com/2011/10/05/full-height-app-layouts-a-css-trick-to-make-it-easier/;And here are some snippets from that post;@media screen;/* start of screen rules. */;/* Generic pane rules */;body { margin: 0 }.row,.col { overflow: hidden, position: absolute, }.row { left: 0, right: 0, }.col { top: 0, bottom: 0, }.scroll-x { overflow-x: auto, }.scroll-y { overflow-y: auto, }.header.row { height: 75px, top: 0, }.body.row { top: 75px, bottom: 50px, }.footer.row { height: 50px, bottom: 0, };/* end of screen rules. */;My header;The body;My footer    
CONTENT;
        $answer->question_id = 75;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is quick, easy, to the point and doesn't require any third-party script    
CONTENT;
        $answer->question_id = 76;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Example CSS file (selectExample.css);/* All select elements on page */;select;position: relative;/* Style by class. Effects the text of the contained options. */.blueText;color: #0000FF;/* Style by id. Effects position of the select drop down. */;#styledSelect;left: 100px    
CONTENT;
        $answer->question_id = 77;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          www.example.com 
CONTENT;
        $answer->question_id = 78;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Update: PointedEars mentions that the correct stand in for &&nbsp;in all css situations would be;\a0 ' implying that the space is a terminator to the hex string and is absorbed by the escaped sequence. He further pointed out this authoritative description which sounds like a good solution to the problem I described and fixed below.;What you need to do is use the escaped unicode. Despite what you've been told \00a0 is not a perfect stand-in for &&nbsp;within CSS, so try;content:'>\a0 ', /* or */;content:'>\0000a0', /* because you'll find: */;content:'No\a0 Break', /* and */;content:'No\0000a0Break', /* becomes No&&nbsp;Break as opposed to below */;Specifically using \0000a0 as &&nbsp;If you try, as suggested by mathieu and millikin;content:'No\00a0Break' /* becomes No;2571#reak */;It takes the B into the hex escaped characters. The same occurs with 0-9a-fA-F.  
CONTENT;
        $answer->question_id = 79;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          HTML;An HTML parser will treat everything between as part of the script. Some implementations don't even need a correct closing tag, they stop script interpretation at " </ ", which is correct according to the specs. [update]In HTML5, and with current browsers, that is not the case anymore.[/update];So, in HTML, this is not possible;alert(x);A CDATA section has no effect at all. That's why you need to write;var x = ' ', // or;var x = ';or similar.;This also applies to XHTML files served as text/html. (Since IE does not support XML content types, this is mostly true.);XML;In XML, different rules apply. Note that (non IE) browsers only use an XML parser if the XHMTL document is served with an XML content type.;To the XML parser, a script tag is no better than any other tag. Particularly, a script node may contain non-text child nodes, triggered by " < ", and a " & " sign denotes a character entity.;So, in XHTML, this is not possible;To work around this, you can wrap the whole script in a CDATA section. This tells the parser: 'In this section, don't treat " < " and " & " as control characters.' To prevent the JavaScript engine from interpreting the " <![CDATA[ " and " ]]> " marks, you can wrap them in comments.;If your script does not contain any " < " or " & ", you don't need a CDATA section anyway.  
CONTENT;
        $answer->question_id = 80;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Obvious answer: See CSS Zen Garden. If you tell me that you can easily do the same with a table-based layout (remember - the HTML isn't changing) then by all means use tables for layout.;Two other important things are accessibility and SEO.;Both care about in what order information is presented. You cannot easily present your navigation at the top of the page if your table-based layout puts it in the 3rd cell of the 2nd row of the 2nd nested table on the page.;So your answers are maintainability, accessibility and SEO.;Don't be lazy. Do things the right and proper way even if they are a bit harder to learn.;share    81
        539 The standard advice, promoted by the Yahoo! Exceptional Performance team, is to put the tags at the end of the document body so they don't block rendering of the page.;But there are some newer approaches that offer better performance, I'm duplicating another answer here;There are some great slides by Steve Souders (client-side performance expert) about;Different techniques to load external JavaScript files in parallel;their effect on loading time and page rendering;what kind of "in progress" indicators the browser displays (e.g. 'loading' in the status bar, hourglass mouse cursor).    
CONTENT;
        $answer->question_id = 82;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If the content of the iframe is not completely under your control or you want to access the content from different pages with different styles you could try manipulating it using JavaScript.;var frm = frames['frame'].document;var otherhead = frm.getElementsByTagName("head")[0];var link = frm.createElement("link");link.setAttribute("rel", "stylesheet");link.setAttribute("type", "text/css");link.setAttribute("href", "style.css");otherhead.appendChild(link);Note that depending on what browser you use this might only work on pages served from the same domain.   
CONTENT;
        $answer->question_id = 83;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Inline;Unobtrusive style;$('input[name="number"]').keyup(function(e);if (/\D/g.test(this.value));// Filter non-digits from input value.;this.value = this.value.replace(/\D/g, '')  
CONTENT;
        $answer->question_id = 84;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The problem happens when a floated element is within a container box, that element does not automatically force the container’s height adjust to the floated element. When an element is floated, its parent no longer contains it because the float is removed from the flow. You can use 2 methods to fix it;{ clear: both, };clearfix;Once you understand what is happening, use the method below to “clearfix” it..clearfix:after;content: ".;display: block;clear: both;visibility: hidden;line-height: 0;height: 0;clearfix;display: inline-block;html[xmlns].clearfix;display: block;* html.clearfix;height: 1%;Demonstration:)  
CONTENT;
        $answer->question_id = 85;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          the "best" answer will not be good for multiple dialogs. here is a better solution.;open: function(event, ui);//hide close button.;$(this).parent().children().children('.ui-dialog-titlebar-close').hide() 
CONTENT;
        $answer->question_id = 86;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You might want to check the target of the click event that fires for the body instead of relying on stopPropagation.;Something like;$("body").click;function(e);if(e.target.className !== "form_wrapper");$(".form_wrapper").hide();Also, the body element may not include the entire visual space shown in the browser. If you notice that your clicks are not registering, you may need to add the click handler for the HTML element instead.    
CONTENT;
        $answer->question_id = 87;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I would recommend jQueryUI Position utility;$('your-selector').position;of: $(window);which gives you much more possibilities than only centering...    
CONTENT;
        $answer->question_id = 88;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you have something like;You can read all like this;jQuery("input[name='mycheckbox']").each(function();console.log(this.value + ":" + this.checked)   
CONTENT;
        $answer->question_id = 89;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          When submitting a form, you're trying to say your browser to send via the HTTP protocol a message on the network properly enveloped in a TCP/IP protocol message structure. When sending data, you can use POST or GET modes to send data using HTTP protocol. POST tells your browser to build an HTTP message and put all content in the body of the message (a very useful way of doing things, more safe and also flexible). GET has some constraints about data representation and length.;Stating what you send;When sending a file, it is necessary to tell HTTP protocol that you are sending a file having several characteristics and information inside it. In this way it is possible to consistently send data to receiver and let it open the file with the current format and so on...;This is a requirement from the HTTP protocol as shown here;You cannot send files using default send enctype parameters because your receiver might encounter problems reading it (consider that a file is a descriptor for some data for a specific operating system, if you see things this way, maybe you'll understand why it is so important to specify a different enctype for files).;Do not forget security;This way of doing things also ensures that some security algorithms work on your messages. This information is also used by application-level routers in order to act as good firewalls for external data.;Well, as you can see, it is not a stupid thing using a specific enctype for files.  
CONTENT;
        $answer->question_id = 90;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Standard "vanilla" JavaScript way to redirect a page;window.location.href = 'newPage.html;If you are here because you are losing HTTP_REFERER when redirecting, keep reading;The following section is for those using HTTP_REFERER as one of many secure measures (although it isn't a great protective measure). If you're using Internet Explorer 8 or lower, these variables get lost when using any form of JavaScript page redirection (location.href / etc);Below we are going to implement an alternative for IE8 & lower so that we don't lose HTTP_REFERER. Otherwise you can almost always simply use window.location.href.;Testing against HTTP_REFERER (URL pasting, session, etc.) can be helpful in telling whether a request is legitimate.;(Note:: there are also ways to work-around / spoof these referrers, as noted by droop's link in the comments);Simple cross-browser testing solution (fallback to window.location.href for IE9+ and all other browsers);Usage: redirect('anotherpage.aspx');function redirect (url);var ua = navigator.userAgent.toLowerCase();isIE = ua.indexOf('msie') !== -1;version = parseInt(ua.substr(4, 2), 10);// Internet Explorer 8 and lower;if (isIE && version < 9);var link = document.createElement('a');link.href = url;document.body.appendChild(link);link.click();// All other browsers can use the standard window.location.href (they don't lose HTTP_REFERER like IE8 & lower does);else;window.location.href = url    
CONTENT;
        $answer->question_id = 91;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          if ($(element).css('display') == 'none');// element is hidden;Functions don't work with the visibility attribute.   
CONTENT;
        $answer->question_id = 92;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          AngularJS vs. jQuery;AngularJS and jQuery adopt very different ideologies. If you're coming from jQuery you may find some of the differences surprising. Angular may make you angry.;This is normal, you should push through. Angular is worth it.;The big difference (TLDR);jQuery gives you a toolkit for selecting arbitrary bits of the DOM and making ad-hoc changes to them. You can do pretty much anything you like piece by piece.;AngularJS instead gives you a compiler.;What this means is that AngularJS reads your entire DOM from top to bottom and treats it as code, literally as instructions to the compiler. As it traverses the DOM, It looks for specific directives (compiler directives) that tell the AngularJS compiler how to behave and what to do. Directives are little objects full of JavaScript which can match against attributes, tags, classes or even comments.;When the Angular compiler determines that a piece of the DOM matches a particular directive, it calls the directive function, passing it the DOM element, any attributes, the current $scope (which is a local variable store), and some other useful bits. These attributes may contain expressions which can be interpreted by the Directive, and which tell it how to render, and when it should redraw itself.;Directives can then in turn pull in additional Angular components such as controllers, services, etc. What comes out the bottom of the compiler is a fully formed web application, wired up and ready to go.;This means that Angular is Template Driven. Your template drives the JavaScript, not the other way around. This is a radical reversal of roles, and the complete opposite of the unobtrusive JavaScript we have been writing for the last 10 years or so. This can take some getting used to.;If this sounds like it might be over-prescriptive and limiting, nothing could be farther from the truth. Because AngularJS treats your HTML as code, you get HTML level granularity in your web application. Everything is possible, and most things are surprisingly easy once you make a few conceptual leaps.;Let's get down to the nitty gritty.;First up, Angular doesn't replace jQuery;Angular and jQuery do different things. AngularJS gives you a set of tools to produce web applications. jQuery mainly gives you tools for modifying the DOM. If jQuery is present on your page, AngularJS will use it automatically. If it isn't, AngularJS ships with jQuery Lite, which is a cut down, but still perfectly usable version of jQuery.;Misko likes jQuery and doesn't object to you using it. However you will find as you advance that you can get a pretty much all of your work done using a combination of scope, templates and directives, and you should prefer this workflow where possible because your code will be more discrete, more configurable, and more Angular.;If you do use jQuery, you shouldn't be sprinkling it all over the place. The correct place for DOM manipulation in AngularJS is in a directive. More on these later.;Unobtrusive JavaScript with Selectors vs. Declarative Templates;jQuery is typically applied unobtrusively. Your JavaScript code is linked in the header (or the footer), and this is the only place it is mentioned. We use selectors to pick out bits of the page and write plugins to modify those parts.;The JavaScript is in control. The HTML has a completely independent existence. Your HTML remains semantic even without JavaScript. Onclick attributes are very bad practice.;One of the first things your will notice about AngularJS is that custom attributes are everywhere. Your HTML will be littered with ng attributes, which are essentially onClick attributes on steroids. These are directives (compiler directives), and are one of the main ways in which the template is hooked to the model.;When you first see this you might be tempted to write AngularJS off as old school intrusive JavaScript (like I did at first). In fact, AngularJS does not play by those rules. In AngularJS, your HTML5 is a template. It is compiled by AngularJS to produce your web page.;This is the first big difference. To jQuery, your web page is a DOM to be manipulated. To AngularJS, your HTML is code to be compiled. AngularJS reads in your whole web page and literally compiles it into a new web page using its built in compiler.;Your template should be declarative, its meaning should be clear simply by reading it. We use custom attributes with meaningful names. We make up new HTML elements, again with meaningful names. A designer with minimal HTML knowledge and no coding skill can read your AngularJS template and understand what it is doing. He or she can make modifications. This is the Angular way.;The template is in the driving seat.;One of the first questions I asked myself when starting AngularJS and running through the tutorials is "Where is my code?". I've written no JavaScript, and yet I have all this behaviour. The answer is obvious. Because AngularJS compiles the DOM, AngularJS is treating your HTML as code. For many simple cases it's often sufficient to just write a template and let AngularJS compile it into an application for you.;Your template drives your application. It's treated as a DSL. You write AngularJS components, and AngularJS will take care of pulling them in and making them available at the right time based on the structure of your template. This is very different to a standard MVC pattern, where the template is just for output.;It's more similar to XSLT than Ruby on Rails for example.;This is a radical inversion of control that takes some getting used to.;Stop trying to drive your application from your JavaScript. Let the template drive the application, and let AngularJS take care of wiring the components together. This also is the Angular way.;Semantic HTML vs. Semantic Models;With jQuery your HTML page should contain semantic meaningful content. If the JavaScript is turned off (by a user or search engine) your content remains accessible.;Because AngularJS treats your HTML page as a template. The template is not supposed to be semantic as your content is typically stored in your model which ultimately comes from your API. AngularJS compiles your DOM with the model to produce a semantic web page.;Your HTML source is no longer semantic, instead, your API and compiled DOM are semantic.;In AngularJS, meaning lives in the model, the HTML is just a template, for display only.;At this point you likely have all sorts of questions concerning SEO and accessibility, and rightly so. There are open issues here. Most screen readers will now parse JavaScript. Search engines can also index AJAXed content. Nevertheless, you will want to make sure you are using pushstate URLs and you have a decent sitemap. See here for a discussion of the issue: http://stackoverflow.com/a/23245379/687677;Separation of concerns (SOC) vs. MVC;Separation of concerns (SOC) is a pattern that grew up over many years of web development for a variety of reasons including SEO, accessibility and browser incompatibility. It looks like this;HTML - Semantic meaning. The HTML should stand alone.;CSS - Styling, without the CSS the page is still readable.;JavaScript - Behaviour, without the script the content remains.;Again, AngularJS does not play by their rules. In a stroke, AngularJS does away with a decade of received wisdom and instead implements an MVC pattern in which the template is no longer semantic, not even a little bit.;It looks like this;Model - your models contains your semantic data. Models are usually JSON objects. Models exist as attributes of an object called $scope. You can also store handy utility functions on $scope which your templates can then access.;View - Your views are written in HTML. The view is usually not semantic because your data lives in the model.;Controller - Your controller is a JavaScript function which hooks the view to the model. Its function is to initialise $scope. Depending on your application, you may or may not need to create a controller. You can have many controllers on a page.;MVC and SOC are not on opposite ends of the same scale, they are on completely different axes. SOC makes no sense in an AngularJS context. You have to forget it and move on.;If, like me, you lived through the browser wars, you might find this idea quite offensive. Get over it, it'll be worth it, I promise.;Plugins vs. Directives;Plugins extend jQuery. AngularJS Directives extend the capabilities of your browser.;In jQuery we define plugins by adding functions to the jQuery.prototype. We then hook these into the DOM by selecting elements and calling the plugin on the result. The idea is to extend the capabilities of jQuery.;For example, if you want a carousel on your page, you might define an unordered list of figures, perhaps wrapped in a nav element. You might then write some jQuery to select the list on the page and restyle it as a gallery with timeouts to do the sliding animation.;In AngularJS, we define directives. A directive is a function which returns a JSON object. This object tells AngularJS what DOM elements to look for, and what changes to make to them. Directives are hooked in to the template using either attributes or elements, which you invent. The idea is to extend the capabilities of HTML with new attributes and elements.;The AngularJS way is to extend the capabilities of native looking HTML. You should write HTML that looks like HTML, extended with custom attributes and elements.;If you want a carousel, just use a element, then define a directive to pull in a template, and make that sucker work.;Lots of small directives vs. big plugins with configuration switches;The tendency with jQuery is to write great big plugins like lightbox which we then configure by passing in numerous values and options.;This is a mistake in AngularJS.;Take the example of a dropdown. When writing a dropdown plugin you might be tempted to code in click handlers, perhaps a function to add in a chevron which is either up or down, perhaps change the class of the unfolded element, show hide the menu, all helpful stuff.;Until you want to make a small change.;Say you have a menu that you want to unfold on hover. Well now we have a problem. Our plugin has wired in our click handler for us, we're going to need to add a configuration option to make it behave differently in this specific case.;In AngularJS we write smaller directives. Our dropdown directive would be ridiculously small. It might maintain the folded state, and provide methods to fold(), unfold() or toggle(). These methods would simply update $scope.menu.visible which is a boolean holding the state.;Now in our template we can wire this up;Menu...;Need to update on mouseover?;Menu...;The template drives the application so we get HTML level granularity. If we want to make case by case exceptions, the template makes this easy.;Closure vs. $scope;JQuery plugins are created in a closure. Privacy is maintained within that closure. It's up to you to maintain your scope chain within that closure. You only really have access to the set of DOM nodes passed in to the plugin by jQuery, plus any local variables defined in the closure and any globals you have defined. This means that plugins are quite self contained. This is a good thing, but can get restrictive when creating a whole application. Trying to pass data between sections of a dynamic page becomes a chore.;AngularJS has $scope objects. These are special objects created and maintained by AngularJS in which you store your model. Certain directives will spawn a new $scope, which by default inherits from its wrapping $scope using JavaScript prototypical inheritance. The $scope object is accessible in the controller and the view.;This is the clever part. Because the structure of $scope inheritance roughly follows the structure of the DOM, elements have access to their own scope, and any containing scopes seamlessly, all the way up to the global $scope (which is not the same as the global scope).;This makes it much easier to pass data around, and to store data at an appropriate level. If a dropdown is unfolded, only the dropdown $scope needs to know about it. If the user updates their preferences, you might want to update the global $scope, and any nested scopes listening to the user preferences would automatically be alerted.;This might sound complicated, in fact, once you relax into it, it's like flying. You don't need to create the $scope object, AngularJS instantiates and configures it for you, correctly and appropriately based on your template hierarchy. AngularJS then makes it available to your component using the magic of dependency injection (more on this later).;Manual DOM changes vs. Data Binding;In jQuery you make all your DOM changes by hand. You construct new DOM elements programatically. If you have a JSON array and you want to put it to the DOM, you must write a function to generate the HTML and insert it.;In AngularJS you can do this too, but you are encouraged to make use of data binding. Change your model, and because the DOM is bound to it via a template your DOM will automatically update, no intervention required.;Because data binding is done from the template, using either an attribute or the curly brace syntax, it's super easy to do. There's little cognitive overhead associated with it so you'll find yourself doing it all the time.;Binds the input element to $scope.user.name. Updating the input will update the value in your current scope, and vice-versa.;Likewise;{{user.name}};will output the user name in a paragraph. It's a live binding, so if the $scope.user.name value is updated, the template will update too.;Ajax all of the time;In jQuery making an Ajax call is fairly simple, but it's still something you might think twice about. There's the added complexity to think about, and a fair chunk of script to maintain.;In AngularJS, Ajax is your default go-to solution and it happens all the time, almost without you noticing. You can include templates with ng-include. You can apply a template with the simplest custom directive. You can wrap an Ajax call in a service and create yourself a GitHub service, or a Flickr service, which you can access with astonishing ease.;Service Objects vs Helper Functions;In jQuery, if we want to accomplish a small non-dom related task such as pulling a feed from an API, we might write a little function to do that in our closure. That's a valid solution, but what if we want to access that feed often? What if we want to reuse that code in another application?;AngularJS gives us service objects.;Services are simple objects that contain functions and data. They are always singletons, meaning there can never be more than one of them. Say we want to access the Stack Overflow API, we might write a StackOverflowService which defines methods for doing so.;Let's say we have a shopping cart. We might define a ShoppingCartService which maintains our cart and contains methods for adding and removing items. Because the service is a singleton, and is shared by all other components, any object that needs to can write to the shopping cart and pull data from it. It's always the same cart.;Service objects are self-contained AngularJS components which we can use and reuse as we see fit. They are simple JSON objects containing functions and Data. They are always singletons, so if you store data on a service in one place, you can get that data out somewhere else just by requesting the same service.;Dependency injection (DI) vs. Instatiation - aka de-spaghettification;AngularJS manages your dependencies for you. If you want an object, simply refer to it and AngularJS will get it for you.;Until you start to use this, it's hard to explain just what a massive time boon this is. Nothing like AngularJS DI exists inside jQuery.;DI means that instead of writing your application and wiring it together, you instead define a library of components, each identified by a string.;Say I have a component called 'FlickrService' which defines methods for pulling JSON feeds from Flickr. Now, if I want to write a controller that can access Flickr, I just need to refer to the 'FlickrService' by name when I declare the controller. AngularJS will take care of instantiating the component and making it available to my controller.;For example, here I define a service;myApp.service('FlickrService', function();return;getFeed: function() { // do something here };Now when I want to use that service I just refer to it by name like this;myApp.controller('myController', ['FlickrService', function(FlickrService);FlickrService.getFeed();AngularJS will recognise that a FlickrService object is needed to instantiate the controller, and will provide one for us.;This makes wiring things together very easy, and pretty much eliminates any tendency towards spagettification. We have a flat list of components, and AngularJS hands them to us one by one as and when we need them.;Modular service architecture;jQuery says very little about how you should organise your code. AngularJS has opinions.;AngularJS gives you modules into which you can place your code. If you're writing a script that talks to Flickr for example, you might want to create a Flickr module to wrap all your Flickr related functions in. Modules can include other modules (DI). Your main application is usually a module, and this should include all the other modules your application will depend on.;You get simple code reuse, if you want to write another application based on Flickr, you can just include the Flickr module and voila, you have access to all your Flickr related functions in your new application.;Modules contain AngularJS components. When we include a module, all the components in that module become available to us as a simple list identified by their unique strings. We can then inject those components into each other using AngularJS's dependency injection mechanism.;To sum up;AngularJS and jQuery are not enemies. It's possible to use jQuery within AngularJS very nicely. If you're using AngularJS well (templates, data-binding, $scope, directives, etc.) you will find you need a lot less jQuery than you might otherwise require.;The main thing to realise is that your template drives your application. Stop trying to write big plugins that do everything. Instead write little directives that do one thing, then write a simple template to wire them together.;Think less about unobtrusive JavaScript, and instead think in terms of HTML extensions.;My little book;I got so excited about AngularJS, I wrote a short book on it which you're very welcome to read online http://nicholasjohnson.com/angular-book/. I hope it's helpful.;share    93
        551 Using jQuery > 1.6;// traditional attr;$('#checkMeOut').attr('checked'), // "checked;// new property method;$('#checkMeOut').prop('checked'), // true;Using the new property method;if($('#checkMeOut').prop('checked'));// something when checked;else;// something else when not  
CONTENT;
        $answer->question_id = 94;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is the correct way of checking and unchecking checkboxes with jQuery, as it is cross-platform standard, and will allow form reposts.;$('.myCheckBox').each(function(){ this.checked = true, });$('.myCheckBox').each(function(){ this.checked = false, });By doing this, you are using JavaScript standards for checking and unchecking checkboxes, so any browser that properly implements the "checked" property of the checkbox element will run this code flawlessly. This should be all major browsers, but I am unable to test previous to Internet Explorer 9.;The Problem (jQuery 1.6);Once a user clicks on a checkbox, that checkbox stops responding to the "checked" attribute changes.;Here is an example of the checkbox attribute failing to do the job after someone has clicked the checkbox (this happens in Chrome).;Fiddle;The Solution;By using JavaScript's "checked" property on the DOM elements, we are able to solve the problem directly, instead of trying to manipulate the DOM into doing what we want it to do.;Fiddle;This plugin will alter the checked property of any elements selected by jQuery, and successfully check and uncheck checkboxes under all circumstances. So, while this may seem like an over-bearing solution, it will make your site's user experience better, and help prevent user frustration.;(function($);$.fn.checked = function(value);if(value === true || value === false);// Set the value of the checkbox;$(this).each(function(){ this.checked = value, });else if(value === undefined || value === 'toggle');// Toggle the checkbox;$(this).each(function(){ this.checked = !this.checked, });return this;(jQuery);Alternatively, if you do not want to use a plugin, you can use the following code snippets;// Check;$(':checkbox').prop('checked', true);// Un-check;$(':checkbox').prop('checked', false);// Toggle;$(':checkbox').prop('checked', function (i, value);return !value    
CONTENT;
        $answer->question_id = 95;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          XHR2 (first of all read the answers from Benjamin Gruenbaum & Felix Kling);If you don't use jQuery, and want a nice short XHR2 which works on the modern browsers and also on the mobile browsers I suggest to use it this way.;function ajax(a,b,c){ // Url, Callback, just a placeholder;c=new XMLHttpRequest;c.open('GET',a);c.onload=b;c.send();As you can see;It's shorter than all other functions Listed.;The callback is set directly (so no extra unnecessary closures).;It uses the new onload (so you don't have to check for readystate && status);there are some other situations which i don't remember that make the xhr1 annoying.;There are 2 ways to get the response of this ajax call(3 using the xhr var name);The simplest;this.response;or if for some reason you bind() the callback to a class;e.target.response;Example;function callback(e);console.log(this.response);ajax('URL',callback);or (the above one is better anonymous functions are always a problem);ajax('URL',function(e){console.log(this.response)});Nothing easier.;Now some ppl will probably say that it's better to use onreadystatechange or the even the XMLHttpRequest variable name. That's wrong.;Check this out;http://caniuse.com/xhr2;support on all *modern browsers. And I can confirm as I'm using this approach since xhr2 exists. I never had any type of problem on all browsers I use.;onreadystatechange is only useful if you want to get the headers on state 2.;Using the XMLHttpRequest variable name is another big error as you need to execute the callback inside the onload/oreadystatechange closures else you lost it.;Now if you want something more complex using post and FormData you can easily extend this function;function x(a,b,e,d,c){ // Url,callback,method,formdata or {key:val},placeholder;c=new XMLHttpRequest;c.open(e||'get',a);c.onload=b;c.send(d||null);Again... it's a very short function but it does get & post;examples of usage;x(url,callback),//by default it's get so no need to set;x(url,callback,'post',{'key':'val'}), //no need to set post data;or pass a full form element (document.getElementsByTagName('form')[0]);var fd=new FormData(form);x(url,callback,'post',fd);or set some custom values;var fd=new FormData();fd.append('key','val');x(url,callback,'post',fd);As you can see I don't implemented sync... it's a bad thing.;Said that... why don't do it the easy way?;As mentioned in the comment the use of error && synchronous does completely break the point of the answer.Which is a nice short way to use ajax in the proper way.;Errror handler;function x(a,b,e,d,c){ // URL,callback,method,formdata or {key:val},placeholder;c=new XMLHttpRequest;c.open(e||'get',a);c.onload=b;c.onerror=error;c.send(d||null);function error(e);console.log('--Error--',this.type);console.log('this: ',this);console.log('Event: ',e);function displayAjax(e);console.log(e,this);x('WRONGURL',displayAjax);In the above script you have an error handler which is statically defined so it does not compromise the function. The error handler can be used for other functions too.;But to really get out an error the only way is to write a wrong URL in which case every browsers throws an error.;error handlers are maybe useful if you set custom headers, set the responseType to blob arraybuffer or whatever....;Even if you pass 'POSTAPAPAP' as methot it won't throw an error.;Even if you pass 'fdggdgilfdghfldj' as formdata it won't throw an error.;In the first case the error is inside the displayAjax() under this.statusText;as Method not Allowed.;In the second case it simply works. You have to check at the server side if you passed the right post data.;crossdomain not allowed throws error automatically.;In the error response there are no error codes.;There is only the this.type which is set to error.;Why add errorhandler if you totally have no control over errors?;Most of the errors are returned inside this in the callback function displayAjax();So: NO need for error checks if your able to copy and paste the url properly.,);ps.: As the first test i wrote x('x',displayAjax).. and it totally got a response...??? so I checked the folder where the HTML is located.. and there was a file called 'x.xml'..;so even if you forget the extension of your file xhr2 WILL FIND IT I lol'd;Read a file syncronous;Don't do that.;if you wan't to block the browser for a while load a nice big txt file syncronous;function omg(a,c){ // Url;c=new XMLHttpRequest;c.open('GET',a,true);c.send();return c, //or c.response;now you can do;var res=omg('thisIsGonnaBlockThePage.txt');There is no other way to do this in a non asynchronous way.(yeah with setTimeout loop... but srsly?);Another point is.. if you work with API's or just you own list's files or whatever you always use different functions for each request..;Only if you have a page where you load always the same XML/JSON or whatever you need only one function.In that case modify a little the ajax function and replace b with your special function.;the functions above are for basic use.;if you want to EXTEND the function...;yes you can;I'm using a lot of API's and one of the first functions i integrate in every html page is the first ajax function in this answer..with GET only...;but you can do a lot of stuff with xhr2;I made a download manager (using ranges on both sides with resume,filereader,filesystem),various image resizers converters using canvas,populate websql databases with base64images and much more... but in thisc cases you should create a function only for that purpose... sometimes you need blob, arraybuffers, you can set headers, override mimetype and there is a lot more...;but the question here is how to return an Ajax response... (i added n easy way)   
CONTENT;
        $answer->question_id = 96;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is not, as you've titled it, a "JavaScript" question, it is a question regarding the design of jQuery.;jQuery and the previously linked citation from John Resig (in karim79's message) seem to be the source misunderstanding of how event handlers in general work.;Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.;The documentation from MDN explains how return false in an event handler works;What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE "attached" events are a different matter altogether.;For further reading, see attachEvent on MSDN and the W3C DOM 2 Events documentation.    
CONTENT;
        $answer->question_id = 97;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You cannot practically do Ajax file uploads if you need wide-ranging browser support.;The new file API is not supported in IE before version 10 so depending on where you pull your stats from and your natural demographic, you're looking at 5-20% of your users. For most sane developers this is an unaffordable loss.;While I originally posted this answer in 2008, this is still true in 2016. IE7-9 usage is still above 10% globally and much higher in some sectors (slow IT departments in enterprise).;However, there are viable non-JS methods of file uploads. You can create an iframe on the page (that you hide with CSS) and then target your form to post to that iframe. The main page doesn't need to move.;It's a "real" post so it's not wholly interactive. If you need status you need something server-side to process that. This varies massively depending on your server. ASP.NET has nicer mechanisms. PHP plain fails, but you can use Perl or Apache modifications to get around it.;If you need multiple file-uploads, it's best to do each file one at a time (to overcome maximum file upload limits). Post the first form to the iframe, monitor its progress using the above and when it has finished, post the second form to the iframe, and so on.;Or use a Java/Flash solution. They're a lot more flexible in what they can do with their posts...    
CONTENT;
        $answer->question_id = 98;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you need to get the first img that's down exactly one level, you can do;$(this).children("img:first")    
CONTENT;
        $answer->question_id = 99;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you already have a reference to a radio button group, for example;var myRadio = $('input[name=myRadio]');Use the filter() function, not find(). (find() is for locating child/descendant elements, whereas filter() searches top-level elements in your selection.);var checkedValue = myRadio.filter(':checked').val();Note: This answer was originally correcting another answer that recommended using find(), which seems to have since been changed. find() could still be useful in the situation where you already had a reference to a container element, but not to the radio buttons, e.g.;var form = $('#mainForm'),...;var checkedValue = form.find('input[name=myRadio]:checked').val() 
CONTENT;
        $answer->question_id = 100;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you used;jQuery.fn.exists = function(){return ($(this).length > 0),};if ($(selector).exists()) { };you would imply that chaining was possible when it is not.;This would be better;jQuery.exists = function(selector) {return ($(selector).length > 0),};if ($.exists(selector)) { };Alternatively, from the FAQ;if ($('#myDiv').length) { /* Do something */ };You could also use the following. If there are no values in the jQuery object array then getting the first item in the array would return undefined.;if ($('#myDiv')[0]) { /* Do something */ }  
CONTENT;
        $answer->question_id = 101;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          So things have changed ever since @Luke Bennett answered this question. Here is an update.;jQuery since version 1.4(?) automatically detects if the element you are trying to insert (using any of the append(), prepend(), before(), or after() methods) is a;and inserts it into the first in your table or wraps it into a new if one doesn't exist.;So yes your example code is acceptable and will work fine with jQuery 1.4+.,);$('#myTable').append(;my data more data ')    
CONTENT;
        $answer->question_id = 102;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This change has been a long time coming for jQuery. For years, they've been content with a function named attr() that mostly retrieved DOM properties, not the result you'd expect from the name. The segregation of attr() and prop() should help alleviate some of the confusion between HTML attributes and DOM properties. $.fn.prop() grabs the specified DOM property, while $.fn.attr() grabs the specified HTML attribute.;To fully understand how they work, here's an extended explanation on the difference between HTML attributes and DOM properties.;HTML Attributes;Syntax;Purpose;Allows markup to have data associated with it for events, rendering, and other purposes.;Visualization;The class attribute is shown here on the body. It's accessible through the following code;var attr;attr = document.body.getAttribute("class");//IE 8 Quirks and below;attr = document.body.getAttribute("className");Attributes are returned in string form and can be inconsistent from browser to browser. However, they can be vital in some situations. As exemplified above, IE 8 Quirks Mode (and below) expects the name of a DOM property in get/set/removeAttribute instead of the attribute name. This is one of many reasons why it's important to know the difference.;DOM Properties;Syntax;document.body.onload = foo;Purpose;Gives access to properties that belong to element nodes. These properties are similar to attributes, but are only accessible through JavaScript. This is an important difference that helps clarify the role of DOM properties. Please note that attributes are completely different from properties, as this event handler assignment is useless and won't receive the event (body doesn't have an onload event, only an onload attribute).;Visualization;Here, you'll notice a list of properties under the "DOM" tab in Firebug. These are DOM properties. You'll immediately notice quite a few of them, as you'll have used them before without knowing it. Their values are what you'll be receiving through JavaScript.;Documentation;JavaScript: The Definitive Guide by;David Flanagan;HTML Attributes;Mozilla Dev Center;DOM Element Properties, Mozilla Dev Center;Example;HTML;JavaScript: alert($('#test').attr('value'));In earlier versions of jQuery, this returns an empty string. In 1.6, it returns the proper value, foo.;Without having glanced at the new code for either function, I can say with confidence that the confusion has more to do with the difference between HTML attributes and DOM properties, than with the code itself. Hopefully, this cleared some things up for you.;-Matt 
CONTENT;
        $answer->question_id = 103;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For those using Newtonsoft Json.NET, read up on how to do it via Native JSON in IE8, Firefox 3.5 plus Json.NET.;Also the documentation on changing the format of dates written by Json.NET is useful;Serializing Dates with Json.NET;For those that are too lazy, here are the quick steps. As JSON has a loose DateTime implementation, you need to use the IsoDateTimeConverter(). Note that since Json.NET 4.5 the default date format is ISO so the code below isn't needed.;string jsonText = JsonConvert.SerializeObject(p, new IsoDateTimeConverter());The JSON will come through as;fieldName": "2009-04-12T20:44:55";Finally, some JavaScript to convert the ISO date to a JavaScript date;function isoDateReviver(value);if (typeof value === 'string');var a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)(?:([\+-])(\d{2})\:(\d{2}))?Z?$/.exec(value);if (a);var utcMilliseconds = Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]);return new Date(utcMilliseconds);return value;I used it like this;$(" ").text(isoDateReviver(item.fieldName).toLocaleString()).appendTo("#" + divName)    
CONTENT;
        $answer->question_id = 104;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There are multiple unlimited ways to refresh a page with JavaScript;location.reload();history.go(0);location.href = location.href;location.href = location.pathname;location.replace(location.pathname);location.reload(false);If we needed to pull the document from;the web-server again (such as where the document contents;change dynamically) we would pass the argument as true.;You can continue the list being creative;window.location = window.location;window.self.window.self.window.window.location = window.location...and other 534 ways;var methods =;location.reload();history.go(0);location.href = location.href;location.href = location.pathname;location.replace(location.pathname);location.reload(false);var $body = $("body");for (var i = 0, i < methods.length, ++i);(function(cMethod);$body.append($(";text: cMethod;on("click", function();eval(cMethod), // don't blame me for using eval;(methods[i]);button;background: #2ecc71;border: 0;color: white;font-weight: bold;font-family: "Monaco", monospace;padding: 10px;border-radius: 4px;cursor: pointer;transition: background-color 0.5s ease;margin: 2px;button:hover;background: #27ae60    
CONTENT;
        $answer->question_id = 105;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The answers posted here, for example;$('#yourdropdownid option:selected').text();didn't work for me, but this did;$('#yourdropdownid').find('option:selected').text();It is possibly an older version of jQuery.    
CONTENT;
        $answer->question_id = 106;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          // Disable #x;$("#x").prop("disabled", true);// Enable #x;$("#x").prop("disabled", false);Sometimes you need to disable/enable the form element like input or textarea. Jquery helps you to easily make this with setting disabled attribute to "disabled".;For e.g.;//To disable;$('.someElement').attr('disabled', 'disabled');To enable disabled element you need to remove "disabled" attribute from this element or empty it's string. For e.g;//To enable;$('.someElement').removeAttr('disabled');// OR you can set attr to ";$('.someElement').attr('disabled', '');refer: http://garmoncheg.blogspot.fr/2011/07/how-to-disableenable-element-with.html 
CONTENT;
        $answer->question_id = 107;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          for the case;you would need to put a space in between.a and.b.c;$('.a.b.c') 
CONTENT;
        $answer->question_id = 108;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I have an application that works similarly to Eran's example, except I attach the click event to the body when I open the menu... Kinda like this;$('#menucontainer').click(function(event);$('html').one('click',function();// Hide the menus;event.stopPropagation();More information on jQuery's one() function  
CONTENT;
        $answer->question_id = 109;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It's an asynchronous request, meaning once it's sent it's out there.;In case your server is starting a very expensive operation due to the AJAX request, the best you can do is open your server to listen for cancel requests, and send a separate AJAX request notifying the server to stop whatever it's doing.;Otherwise, simply ignore the AJAX response.  
CONTENT;
        $answer->question_id = 110;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you are not much interested in the smooth scroll effect and just interested in scrolling to a particular element, you don't require some jQuery function for this. Javascript has got your case covered;https://developer.mozilla.org/en-US/docs/Web/API/element.scrollIntoView;So all you need to do is: $("selector").get(0).scrollIntoView(),.get(0) is used because we want to retrieve the JavaScript's DOM element and not the JQuery's DOM element.   
CONTENT;
        $answer->question_id = 111;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          http://www.refulz.com:8082/index.php#tab2?foo=789;Property Result;------------------------------------------;host www.refulz.com:8082;hostname www.refulz.com;port 8082;protocol http;pathname index.php;href http://www.refulz.com:8082/index.php#tab2;hash #tab2;search?foo=789;var x = $(location).attr(' ');This will work only if you have jQuery. For example;$(location).attr('href'), // http://www.refulz.com:8082/index.php#tab2;$(location).attr('pathname'), // index.php   
CONTENT;
        $answer->question_id = 112;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          What's wrong with;var data = {};$(".form-selector").serializeArray().map(function(x){data[x.name] = x.value,})  
CONTENT;
        $answer->question_id = 113;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Three options;If script is the last tag of the body, the DOM would be ready before script tag executes;When the DOM is ready, "readyState" will change to "complete;Put everything under 'DOMContentLoaded' event listener;onreadystatechange;document.onreadystatechange = function ();if (document.readyState == "complete");// document is ready. Do your stuff here;Source: MDN;DOMContentLoaded;document.addEventListener('DOMContentLoaded', function();console.log('document is ready. I can sleep now');Concerned about stone age browsers;Go to the jQuery source code and use the ready function. In that case you are not parsing+executing the whole library you're are doing only a very small part of it. 
CONTENT;
        $answer->question_id = 114;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Simple solution for all your web service requests, assuming you're using jQuery;$.ajaxPrefilter(function (options, originalOptions, jqXHR);// you can use originalOptions.type || options.type to restrict specific type of requests;options.data = jQuery.param($.extend(originalOptions.data||{};timeStamp: new Date().getTime();Read more about the jQuery prefilter call here.;If you aren't using jQuery, check the docs for your library of choice. They may have similar functionality.  
CONTENT;
        $answer->question_id = 115;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Works on IE8+;No need for jQuery, use;JSON.stringify(countries) 
CONTENT;
        $answer->question_id = 116;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Download the map file and the uncompressed version of jQuery. Put them with the minified version;Include minified version into your HTML;Check in Google Chrome;Read Introduction to JavaScript Source Maps;Get familiar with Debugging JavaScript  
CONTENT;
        $answer->question_id = 117;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is slightly faster and cleaner.;$.each(selectValues, function(key, value);$('#mySelect').append($(";value: key;text: value 
CONTENT;
        $answer->question_id = 118;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Based on the original HTML posted by Paolo I came up with the following.;$("#list").change(function();alert($(this).find("option:selected").text()+' clicked!');It has been tested to work on Internet Explorer and Firefox.    
CONTENT;
        $answer->question_id = 119;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This seems to work for me;hello jQuery;The way it works is to use the google object that calling http://www.google.com/jsapi loads onto the window object. If that object is not present, we are assuming that access to Google is failing. If that is the case, we load a local copy using document.write. (I'm using my own server in this case, please use your own for testing this).;I also test for the presence of window.google.load - I could also do a typeof check to see that things are objects or functions as appropriate. But I think this does the trick.;Here's just the loading logic, since code highlighting seems to fail since I posted the whole HTML page I was testing;if (window.google && window.google.load);google.load("jquery", "1.3.2");else;document.write(' ');Though I must say, I'm not sure that if this is a concern for your site visitors you should be fiddling with the Google AJAX Libraries API at all.;Fun fact: I tried initially to use a try..catch block for this in various versions but could not find a combination that was as clean as this. I'd be interested to see other implementations of this idea, purely as an exercise. 
CONTENT;
        $answer->question_id = 120;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          if (variable == null);// Do stuff, will only match null or undefined, this won't match false    
CONTENT;
        $answer->question_id = 121;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is a pure JavaScript solution without any libraries or plugins;document.addEventListener('click', function (e);if (hasClass(e.target, 'bu'));//.bu clicked;// Do your thing;else if (hasClass(e.target, 'test'));//.test clicked;// Do your other thing;false);where hasClass is;function hasClass(elem, className);return elem.className.split(' ').indexOf(className) > -1;Live demo;Credit goes to Dave and Sime Vidas  
CONTENT;
        $answer->question_id = 122;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can set the cookies as like;setCookie('test','1');You can get the cookies as like;getCookie('test');Hope it will helps to someone:);EDIT;If you want to save path of cookie for homepage alone then do this like;function setCookie(key, value);var expires = new Date();expires.setTime(expires.getTime() + (1 * 24 * 60 * 60 * 1000));document.cookie = key + '=' + value +',path=/'+ ',expires=' + expires.toUTCString();Thanks;vicky    
CONTENT;
        $answer->question_id = 123;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          No browsers handle 301 and 302 responses correctly. And in fact the standard even says they should handle them "transparently" which is a MASSIVE headache for Ajax Library vendors. In Ra-Ajax we were forced into using HTTP response status code 278 (just some "unused" success code) to handle transparently redirects from the server...;This really annoys me, and if someone here have some "pull" in W3C I would appreciate that you could let W3C know that we really need to handle 301 and 302 codes ourselves...!,)    
CONTENT;
        $answer->question_id = 124;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use the attr method on your lookup. You can switch out any attribute with a new value.;$("a.mylink").attr("href", "http://cupcream.com")    
CONTENT;
        $answer->question_id = 125;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This can be done by using the unbind function.;$('#myimage').unbind('click');You can add multiple event handlers to the same object and event in jquery. This means adding a new one doesn't replace the old ones.;There are several strategies for changing event handlers, such as event namespaces. There are some pages about this in the online docs.;Look at this question (that's how I learned of unbind). There is some useful description of these strategies in the answers.;How to read bound hover callback functions in jquery    
CONTENT;
        $answer->question_id = 126;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          $("html, body").animate({ scrollTop: 0 }, "slow");is working    
CONTENT;
        $answer->question_id = 127;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          $(document).ready() is a jQuery event. JQuery’s $(document).ready() method gets called as soon as the DOM is ready (which means that the browser has parsed the HTML and built the DOM tree). This allows you to run code as soon as the document is ready to be manipulated.;For example, if a browser supports the DOMContentLoaded event (as many non-IE browsers do), then it will fire on that event. However, IE8 doesn't have a domcontentloaded event, that came out in IE9.;Two syntaxes can be used for this;$(document).ready(function);The ready() method can only be used on the current document, so no selector is required;$(function);Main points for $(document).ready()`;It will not wait for the images to get loaded.;Used to execute JavaScript when the DOM is completely loaded. Put event handlers here.;Can be used multiple times.;Replace $ with jQuery when you receive “$ is not defined.”;Not used if you want to manipulate images. Use $(window).load() instead.;window.onload() is a JavaScript function. The window.onload() event fires when all the content on your page has loaded, including the DOM (document object model), banner ads and images. Another difference between the two is we can have more than one $(document).ready() function in a web page but only one onload` function.   
CONTENT;
        $answer->question_id = 128;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Excellent solution! I noticed when I tried to implement it that if I returned a value in the success clause, it came back as undefined. I had to store it in a variable and return that variable. This is the method I came up with;function getWhatever();// strUrl is whatever URL you need to call;var strUrl = "", strReturn = ";jQuery.ajax;url: strUrl;success: function(html);strReturn = html;async:false;return strReturn  
CONTENT;
        $answer->question_id = 129;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The best method I have found so far is the jQuery appear plugin. Works like a charm.;Mimics a custom "appear" event, which fires when an element scrolls into view or otherwise becomes visible to the user.;$('#foo').appear(function();$(this).text('Hello world');This plugin can be used to prevent unnecessary requests for content that's hidden or outside the viewable area.    
CONTENT;
        $answer->question_id = 130;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Underscore.js has a nice method for that;myArray = [{'id':'73','foo':'bar'},{'id':'45','foo':'bar'},etc.];obj = _.find(myArray, function(obj) { return obj.id == '45' })    
CONTENT;
        $answer->question_id = 131;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Be aware that caching headers are different when you use "direct" vs. "latest" link from google.;When using http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js;Cache-Control: public, max-age=31536000;When using http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js;Cache-Control: public, max-age=3600, must-revalidate, proxy-revalidate 
CONTENT;
        $answer->question_id = 132;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'd recommend using PDO (PHP Data Objects) to run parameterized SQL queries.;Not only does this protect against SQL injection, it also speeds up queries.;And by using PDO rather than mysql_, mysqli_, and pgsql_ functions, you make your app a little more abstracted from the database, in the rare occurrence that you have to switch database providers.;share    133
        591 Alias for gettext();The underscore character '_' as in _() is an alias to gettext().    
CONTENT;
        $answer->question_id = 134;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This question is asked a lot, but I think you should step back and ask yourself why you want to validate email adresses syntactically? What is the benefit really?;It will not catch common typos.;It does not prevent people from entering invalid or made-up email addresses, or entering someone else's address.;If you want to validate that an email is correct, you have no choice than to send an confirmation email and have the user reply to that. In many cases you will have to send a confirmation mail anyway for security reasons or for ethical reasons (so you cannot e.g. sign someone up to a service against their will).   
CONTENT;
        $answer->question_id = 135;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use strpos function;if (strpos($a, 'are') !== false);echo 'true 
CONTENT;
        $answer->question_id = 136;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Just use DOMDocument->loadHTML() and be done with it. libxml's HTML parsing algorithm is quite good and fast, and contrary to popular belief, does not choke on malformed HTML. 
CONTENT;
        $answer->question_id = 137;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          First, let's begin with the standard comment we give everyone;Please, don't use mysql_* functions in new code. They are no longer maintained and are officially deprecated. See the red box? Learn about prepared statements instead, and use PDO or MySQLi - this article will help you decide which. If you choose PDO, here is a good tutorial.;Let's go through this, sentence by sentence, and explain;They are no longer maintained, and are officially deprecated;This means that the PHP community is gradually dropping support for these very old functions. They are likely to not exist in a future (recent) version of PHP! Continued use of these functions may break your code in the (not so) far future.;NEW! - ext/mysql is now officially deprecated as of PHP 5.5!;Newer! ext/mysql has been removed in PHP 7;Instead, you should learn of prepared statements -;mysql_* extension does not support prepared statements, which is (among other things) a very effective countermeasure against SQL Injection. It fixed a very serious vulnerability in MySQL dependent applications which allows attackers to gain access to your script and perform any possible query on your database.;For more information, see How can I prevent SQL-injection in PHP?;See the Red Box?;When you go on any mysql function manual page, you see a red box, explaining it should not be used anymore.;Use either PDO or MySQLi;There are better, more robust and well built alternatives, PDO - PHP Database Object, which offers a complete OOP approach to database interaction, and MySQLi, which is a MySQL specific improvement.    
CONTENT;
        $answer->question_id = 138;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          DO NOT USE self::, use static;There is another aspect of self:: that is worth mentioning. Annoyingly self:: refers to the scope at the point of definition not at the point of execution. Consider this simple class with two methods;class Person;public static function status();self::getStatus();protected static function getStatus();echo "Person is alive;If we call Person::status() we will see "Person is alive". Now consider what happens when we make a class that inherits from this;class Deceased extends Person;protected static function getStatus();echo "Person is deceased;Calling Deceased::status() we would expect to see "Person is deceased" however what we see is "Person is alive" as the scope contains the original method definition when call to self::getStatus() was defined.;PHP 5.3 has a solution. the static:: resolution operator implements "late static binding" which is a fancy way of saying that its bound to the scope of the class called. Change the line in status() to static::getStatus() and the results are what you would expect. In older versions of PHP you will have to find a kludge to do this.;http://php.net/manual/en/language.oop5.late-static-bindings.php;So to answer the question not as asked...;$this-> refers to the current object (an instance of a class), whereas static:: refers to a class    
CONTENT;
        $answer->question_id = 139;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          What Asaph said is right. However, not every YouTube video contains all nine thumbnails, but there are seven thumbnails for every video. They are;(Image size depends on video.);Player Background Thumbnail (480x360 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/0.jpg;Start Thumbnail (120x90 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/1.jpg;Middle Thumbnail (120x90 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/2.jpg;End Thumbnail (120x90 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/3.jpg;High Quality Thumbnail (480x360 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/hqdefault.jpg;Medium Quality Thumbnail (320x180 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/mqdefault.jpg;Normal Quality Thumbnail (120x90 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/default.jpg;And additionally, the next two thumbnails may or may not exist. For HQ videos;they exist.;Standard Definition Thumbnail (640x480 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/sddefault.jpg;Maximum Resolution Thumbnail (1920x1080 pixels);http://i1.ytimg.com/vi/G0wGs3useV8/maxresdefault.jpg;You can get the JavaScript and PHP scripts to retrieve thumbnails and other;YouTube information in;How to get YouTube Video Info with PHP;Retrieve YouTube Video Details using JavaScript - JSON & API v2;Also use the tool YouTube Video Information Generator to get all the;information of a YouTube video by submitting a;URL or video ID.  
CONTENT;
        $answer->question_id = 140;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You could encrypt the password + a salt with a public key. For logins just check if the stored value equals the value calculated from the user input + salt. If there comes a time, when the password needs to be restored in plaintext, you can decrypt manually or semi-automatically with the private key. The private key may be stored elsewhere and may additionally be encrypted symmetrically (which will need a human interaction to decrypt the password then).;I think this is actually kind of similar to the way the Windows Recovery Agent works.;Passwords are stored encrypted;People can login without decrypting to plaintext;Passwords can be recovered to plaintext, but only with a private key, that can be stored outside the system (in a bank safe, if you want to).   
CONTENT;
        $answer->question_id = 141;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          // our initial array;$arr = array("blue", "green", "red", "yellow", "green", "orange", "yellow", "indigo", "red");print_r($arr);// remove the elements who's values are yellow or red;$arr = array_diff($arr, array("yellow", "red"));print_r($arr);This is the output from the code above;Array;[0] => blue;[1] => green;[2] => red;[3] => yellow;[4] => green;[5] => orange;[6] => yellow;[7] => indigo;[8] => red;Array;[0] => blue;[1] => green;[4] => green;[5] => orange;[7] => indigo;Now, array_values() will reindex a numerical array nicely, but will remove all key strings from the array and replace them with numbers. If you need to preserve the key names (strings), or reindex the array if all keys are numerical, use array_merge();$arr = array_merge(array_diff($arr, array("yellow", "red")));print_r($arr);outputs;Array;[0] => blue;[1] => green;[2] => green;[3] => orange;[4] => indigo 
CONTENT;
        $answer->question_id = 142;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Some points to note when working with foreach();a) foreach works on the prospected copy of the original array.;It means foreach() will have SHARED data storage until or unless a prospected copy is;not created foreach Notes/User comments.;b) What triggers a prospected copy?;Prospected copy is created based on the policy of copy-on-write, that is, whenever;an array passed to foreach() is changed, a clone of original array is created.;c) The original array and foreach() iterator will have DISTINCT SENTINEL VARIABLES, that is, one for the original array and other for foreach, see the test code below. SPL, Iterators, and Array Iterator.;Stack Overflow question How to make sure the value is reset in a 'foreach' loop in PHP? addresses the cases (3,4,5) of your question.;The following example show that each() and reset() DOES NOT affect SENTINEL variables;(for example, the current index variable) of the foreach() iterator.;$array = array(1, 2, 3, 4, 5);list($key2, $val2) = each($array);echo "each() Original (outside): $key2 => $val2;foreach($array as $key => $val);echo "foreach: $key => $val;list($key2,$val2) = each($array);echo "each() Original(inside): $key2 => $val2;echo "--------Iteration--------;if ($key == 3);echo "Resetting original array pointer;reset($array);list($key2, $val2) = each($array);echo "each() Original (outside): $key2 => $val2;Output;each() Original (outside): 0 => 1;foreach: 0 => 1;each() Original(inside): 1 => 2;--------Iteration--------;foreach: 1 => 2;each() Original(inside): 2 => 3;--------Iteration--------;foreach: 2 => 3;each() Original(inside): 3 => 4;--------Iteration--------;foreach: 3 => 4;each() Original(inside): 4 => 5;--------Iteration--------;Resetting original array pointer;foreach: 4 => 5;each() Original(inside): 0=>1;--------Iteration--------;each() Original (outside): 1 => 2   
CONTENT;
        $answer->question_id = 143;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You'll get a lot of information in Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes or Portable PHP password hashing framework.;The goal is to hash the password with something slow, so someone getting your password database will die trying to brute force it (a 10 ms delay to check a password is nothing for you, a lot for someone trying to brute force it). Bcrypt is slow and can be used with a parameter to choose how slow it is.  
CONTENT;
        $answer->question_id = 144;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Updated 18-Nov-2014;The Functions;function substr_startswith($haystack, $needle);return substr($haystack, 0, strlen($needle)) === $needle;function preg_match_startswith($haystack, $needle);return preg_match('~'.preg_quote($needle,'~').'~A', $haystack) > 0;function substr_compare_startswith($haystack, $needle);return substr_compare($haystack, $needle, 0, strlen($needle)) === 0;function strpos_startswith($haystack, $needle);return strpos($haystack, $needle) === 0;function strncmp_startswith($haystack, $needle);return strncmp($haystack, $needle, strlen($needle)) === 0;function strncmp_startswith2($haystack, $needle);return $haystack[0] === $needle[0];? strncmp($haystack, $needle, strlen($needle)) === 0;false;Tests;function randstr($len);return substr(base64_encode(openssl_random_pseudo_bytes(ceil($len * 3 / 4))), 0, $len);echo 'generating tests;for($i=0, $i randstr(mt_rand(1,7000));needle' => randstr(mt_rand(1,3000));echo "done!\n;$start = microtime(true);foreach($test_cases as $tc);substr_startswith($tc['haystack'],$tc['needle']);$elapsed = (microtime(true)-$start)*1000;echo "substr_startswith: $elapsed ms".PHP_EOL;$start = microtime(true);foreach($test_cases as $tc);preg_match_startswith($tc['haystack'],$tc['needle']);$elapsed = (microtime(true)-$start)*1000;echo "preg_match_startswith: $elapsed ms".PHP_EOL;$start = microtime(true);foreach($test_cases as $tc);substr_compare_startswith($tc['haystack'],$tc['needle']);$elapsed = (microtime(true)-$start)*1000;echo "substr_compare_startswith: $elapsed ms".PHP_EOL;$start = microtime(true);foreach($test_cases as $tc);strpos_startswith($tc['haystack'],$tc['needle']);$elapsed = (microtime(true)-$start)*1000;echo "strpos_startswith: $elapsed ms".PHP_EOL;$start = microtime(true);foreach($test_cases as $tc);strncmp_startswith($tc['haystack'],$tc['needle']);$elapsed = (microtime(true)-$start)*1000;echo "strncmp_startswith: $elapsed ms".PHP_EOL;$start = microtime(true);foreach($test_cases as $tc);strncmp_startswith2($tc['haystack'],$tc['needle']);$elapsed = (microtime(true)-$start)*1000;echo "strncmp_startswith2: $elapsed ms".PHP_EOL;Results (PHP 5.6.2);(Sorted fastest to slowest);substr_startswith: 110.81886291504 ms;substr_compare_startswith: 133.23283195496 ms;strncmp_startswith: 151.41010284424 ms;strncmp_startswith2: 168.16401481628 ms;strpos_startswith: 180.95993995667 ms;preg_match_startswith: 4042.2859191895 ms;The substr_startswith method is the fastest, both with short and long strings.;startswith_benchmark.php    
CONTENT;
        $answer->question_id = 145;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I got this error many times before.and I am sure all PHP programmer at-least once got this error.;To solve this error you can solve use solution as per your problem level;Possible Solution 1;You may have left blank spaces before or after (at the end of file after?>) i.e.;THERE SHOULD BE NO BLANK SPACES HERE;DO CHECK FOR BLANK SPACES HERE AS WELL, THIS LINE (blank line) SHOULD NOT EXIST.;Most of the time this should solve your problem.Do check all files associated with file you require.;Note: Sometimes EDITOR(IDE) like gedit(a default linux editor) add one blank line on save save file.This should not happen. If you are using linux. you can use VI editor to remove space/lines after?> at the end of the page.;If this is not your case then,then you can use ob_start for output buffering like below;Possible Solution 2;share    146
        604 I would not store the password hashed in two different ways, because then the system is at least as weak as the weakest of the hash algorithms in use.  
CONTENT;
        $answer->question_id = 147;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          What about class constants?;echoConstant()  
CONTENT;
        $answer->question_id = 148;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          No. You can't generically filter data without any context of what it's for. Sometimes you'd want to take a SQL query as input and sometimes you'd want to take HTML as input.;You need to filter input on a whitelist -- ensure that the data matches some specification of what you expect. Then you need to escape it before you use it, depending on the context in which you are using it.;The process of escaping data for SQL - to prevent SQL injection - is very different from the process of escaping data for (X)HTML, to prevent XSS.   
CONTENT;
        $answer->question_id = 149;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Also worth noting, an stdClass object can be created from the use of json_decode() as well. 
CONTENT;
        $answer->question_id = 150;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Is this to log the user out after a set time? Setting the session creation time (or an expiry time) when it is registered, and then checking that on each page load could handle that.;E.g.;$_SESSION['example'] = array('foo' => 'bar', 'registered' => time());// later;if ((time() - $_SESSION['example']['registered']) > (60 * 30));unset($_SESSION['example']);Edit: I've got a feeling you mean something else though.;You can scrap sessions after a certain lifespan by using the session.gc_maxlifetime ini setting;Edit;ini_set('session.gc_maxlifetime', 60*30) 
CONTENT;
        $answer->question_id = 151;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Tornado is designed for long-polling, and includes a very minimal (few hundred lines of Python) chat app in / examples/chatdemo, including server code and JS client code. It works like this;Clients use JS to ask for an updates since (number of last message), server URLHandler receives these and adds a callback to respond to the client to a queue.;When the server gets a new message, the onmessage event fires, loops through the callbacks, and sends the messages.;The client-side JS receives the message, adds it to the page, then asks for updates since this new message ID. 
CONTENT;
        $answer->question_id = 152;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          echo $_SERVER['REMOTE_ADDR'];http://php.net/manual/en/reserved.variables.server.php 
CONTENT;
        $answer->question_id = 153;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Nothing is seen. The page is empty and white.;Also known as the White Page Of Death or White Screen Of Death. This happens when error reporting is turned off and a fatal error (often syntax error) occurred.;If you have error logging enabled, you will find the concrete error message in your error log. This will usually be in a file called "php_errors.log", either in a central location (e.g. /var/log/apache2 on many Linux environments) or in the directory of the script itself (sometimes used in a shared hosting environment).;Sometimes it might be more straightforward to temporarily enable the display of errors. The white page will then display the error message. Take care because these errors are visible to everybody visiting the website.;This can be easily done by adding at the top of the script the following PHP code;ini_set('display_errors', 1), error_reporting(~0);The code will turn on the display of errors and set reporting to the highest level.;Since the ini_set() is executed at runtime it has no effects on parsing/syntax errors. Those errors will appear in the log. If you want to display them in the output as well (e.g. in a browser) you have to set the display_startup_errors directive to true. Do this either in the php.ini or in a.htaccess or by any other method that affects the configuration before runtime.;You can use the same methods to set the log_errors and error_log directives to choose your own log file location.;Looking in the log or using the display, you will get a much better error message and the line of code where your script comes to halt.;Related questions;PHP's white screen of death;White screen of death!;PHP Does Not Display Error Messages;PHP emitting 500 on errors - where is this documented?;How to get useful error messages in PHP?;All PHP "White Page of Death" Questions on Stackoverflow;Related errors;Parse error: syntax error, unexpected T_XXX;Fatal error: Call to a member function... on a non-object;Code doesn't run/what looks like parts of my PHP code are output   
CONTENT;
        $answer->question_id = 154;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In addition to setting default_charset in php.ini, you can send the correct charset using header() from within your code, before any output;header('Content-Type: text/html, charset=utf-8');Working with Unicode in PHP is easy as long as you realize that most of the string functions don't work with Unicode, and some might mangle strings completely. PHP considers "characters" to be 1 byte long. Sometimes this is okay (for example, explode() only looks for a byte sequence and uses it as a separator -- so it doesn't matter what actual characters you look for). But other times, when the function is actually designed to work on characters, PHP has no idea that your text has multi-byte characters that are found with Unicode.;A good library to check into is phputf8. This rewrites all of the "bad" functions so you can safely work on UTF8 strings. There are extensions like the mbstring extension that try to do this for you, too, but I prefer using the library because it's more portable (but I write mass-market products, so that's important for me). But phputf8 can use mbstring behind the scenes, anyway, to increase performance.  
CONTENT;
        $answer->question_id = 156;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          My suggestion is to just use require_once 99.9% of the time.;Using require or include instead implies that your code is not reusable elsewhere, i.e. that the scripts you're pulling in actually execute code instead of making available a class or some function libraries.;If you are require/including code that executes on the spot, that's procedural code, and you need to get to know a new paradigm. Like object oriented programming, function-based programming, or functional programming.;If you're already doing OO or functional programming, using include_once is mostly going to be delaying where in the stack you find bugs/errors. Do you want to know that the function do_cool_stuff() is not available when you go to call for it later, or the moment that you expect it to be available by requiring the library? Generally, it's best to know immediately if something you need and expect isn't available, so just use require_once.;Alternatively, in modern OOP, just autoload your classes upon use.    
CONTENT;
        $answer->question_id = 157;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I use this function;function array_sort_by_column(&$arr, $col, $dir = SORT_ASC);$sort_col = array();foreach ($arr as $key=> $row);$sort_col[$key] = $row[$col];array_multisort($sort_col, $dir, $arr);array_sort_by_column($array, 'order') 
CONTENT;
        $answer->question_id = 158;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Error occurred here was due to the use of single quotes ('). You can put your query like this;mysql_query(;SELECT * FROM Users;WHERE UserName;LIKE '".mysql_real_escape_string ($username).";);It's using mysql_real_escape_string for prevention of SQL injection.;Though we should use MySQLi or PDO_MYSQL extension for upgraded version of PHP (PHP 5.5.0 and later), but for older versions mysql_real_escape_string will do the trick.    
CONTENT;
        $answer->question_id = 159;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          To overwite form request method you can use 
CONTENT;
        $answer->question_id = 160;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For that matter, just have a look at the whole array with print_r($_SERVER), you'll see everything you need there:) 
CONTENT;
        $answer->question_id = 161;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Inside your php.ini;display_errors = on;Then restart your web server.   
CONTENT;
        $answer->question_id = 162;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          $first_value = reset($array), // First Element's Value;$first_key = key($array), // First Element's Key;Hope this helps.:)  
CONTENT;
        $answer->question_id = 163;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It is typically considered good practice to default to the lowest visibility required as this promotes data encapsulation and good interface design. When considering member variable and method visibility think about the role the member plays in the interaction with other objects.;If you "code to an interface rather than implementation" then it's usually pretty straightforward to make visibility decisions. In general, variables should be private or protected unless you have a good reason to expose them. Use public accessors (getters/setters) instead to limit and regulate access to a class's internals.;To use a car as an analogy, things like speed, gear, and direction would be private instance variables. You don't want the driver to directly manipulate things like air/fuel ratio. Instead, you expose a limited number of actions as public methods. The interface to a car might include methods such as accelerate(), deccelerate() / brake(), setGear(), turnLeft(), turnRight(), etc.;The driver doesn't know nor should he care how these actions are implemented by the car's internals, and exposing that functionality could be dangerous to the driver and others on the road. Hence the good practice of designing a public interface and encapsulating the data behind that interface.;This approach also allows you to alter and improve the implementation of the public methods in your class without breaking the interface's contract with client code. For example, you could improve the accelerate() method to be more fuel efficient, yet the usage of that method would remain the same, client code would require no changes but still reap the benefits of your efficiency improvement.;Edit: Since it seems you are still in the midst of learning object oriented concepts (which are much more difficult to master than any language's syntax), I highly recommend picking up a copy of PHP Objects, Patterns, and Practice by Matt Zandstra. This is the book that first taught me how to use OOP effectively, rather than just teaching me the syntax. I had learned the syntax years beforehand, but that was useless without understanding the "why" of OOP.   
CONTENT;
        $answer->question_id = 164;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Output JavaScript from PHP using echo, which will do the job.;echo ';You can't really do it in PHP unless you buffer the page output and then later check for redirect condition. That might be too much of a hassle. Remember that headers are the first thing that is sent from the page. Most of the redirect is usually required later in the page. For that you have to buffer all the output of the page and check for redirect condition later. At that point you can either redirect page user header() or simply echo the buffered output.;For more about buffering (advantages);What is Output Buffering? 
CONTENT;
        $answer->question_id = 165;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Apache MPM Prefork with modphp is used because it is easy to configure/install. performance wise it is fairly inefficient. My preferred way to do the stack, FastCGI/PHP-FPM. That way you can use the much faster MPM Worker. The whole PHP remains non-threaded but apache serves threaded (like it should);So basically, from bottom to top;Linux;Apache + MPM Worker + ModFastCGI (NOT FCGI) |(or)| Cherokee |(or)| Nginx;PHP-FPM + APC;ModFCGI does not correctly support PHP-FPM, or any external FastCGI applications. It only supports non process managed FastCGI scripts. PHP-FPM is the PHP FastCGI process manager. 
CONTENT;
        $answer->question_id = 166;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Actually, you probably want to use utf8_unicode_ci or utf8_general_ci.;utf8_general_ci sorts by stripping away all accents and sorting as if it were ASCII;utf8_unicode_ci uses the Unicode sort order, so it sorts correctly in more languages;However, if you are only using this to store English text, these shouldn't differ.  
CONTENT;
        $answer->question_id = 167;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The best course of action is using PHP's DateTime (and DateInterval) objects. Each date is encapsulated in a DateTime object, and then a difference between the two can be made;$first_date = new DateTime("2012-11-30 17:03:30");$second_date = new DateTime("2012-12-21 00:00:00");The DateTime object will accept any format strtotime() would. If an even more specific date format is needed, DateTime::createFromFormat() can be used to create the DateTime object.;After both objects were instantiated, you substract one from the other with DateTime::diff().;$difference = $first_date->diff($second_date);$difference now holds a DateInterval object with the difference information. A var_dump() looks like this;object(DateInterval);public 'y' => int 0;public 'm' => int 0;public 'd' => int 20;public 'h' => int 6;public 'i' => int 56;public 's' => int 30;public 'invert' => int 0;public 'days' => int 20;To format the DateInterval object, we'll need check each value and exclude it if it's 0;/**;* Format an interval to show all existing components.;* If the interval doesn't have a time component (years, months, etc);* That component won't be displayed.;*;* @param DateInterval $interval The interval;*;* @return string Formatted interval string.;*/;function format_interval(DateInterval $interval);$result = ";if ($interval->y) { $result.= $interval->format("%y years "), };if ($interval->m) { $result.= $interval->format("%m months "), };if ($interval->d) { $result.= $interval->format("%d days "), };if ($interval->h) { $result.= $interval->format("%h hours "), };if ($interval->i) { $result.= $interval->format("%i minutes "), };if ($interval->s) { $result.= $interval->format("%s seconds "), };return $result;All that's left now is to call our function on the $difference DateInterval object;echo format_interval($difference);And we get the correct result;20 days 6 hours 56 minutes 30 seconds;The complete code used to achieve the goal;/**;* Format an interval to show all existing components.;* If the interval doesn't have a time component (years, months, etc);* That component won't be displayed.;*;* @param DateInterval $interval The interval;*;* @return string Formatted interval string.;*/;function format_interval(DateInterval $interval);$result = ";if ($interval->y) { $result.= $interval->format("%y years "), };if ($interval->m) { $result.= $interval->format("%m months "), };if ($interval->d) { $result.= $interval->format("%d days "), };if ($interval->h) { $result.= $interval->format("%h hours "), };if ($interval->i) { $result.= $interval->format("%i minutes "), };if ($interval->s) { $result.= $interval->format("%s seconds "), };return $result;$first_date = new DateTime("2012-11-30 17:03:30");$second_date = new DateTime("2012-12-21 00:00:00");$difference = $first_date->diff($second_date);echo format_interval($difference)  
CONTENT;
        $answer->question_id = 168;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          My super lazy version of showing a copyright line, that automatically stays updated;copy;Me, Inc.;This year (2008), it will say;© 2008 Me, Inc.;Next year, it will say;© 2008-2009 Me, Inc.;and forever stay updated with the current year.;Or (PHP 5.3.0+) a compact way to do it using an anonymous function so you don't have variables leaking out and don't repeat code/constants;copy;Me, Inc.    
CONTENT;
        $answer->question_id = 169;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          A (often discouraged) alternative is the error suppression operator @. It is a specific language construct to shut down undesired notices and warnings, but should be used with care.;First, it incurs a microperformance penalty over using isset. That's not measurable in real world applications, but should be considered in data heavy iterations. Secondly it might obstruct debugging, but at the same time suppressed errors are in fact passed on to custom error handlers (unlike isset decorated expressions).  
CONTENT;
        $answer->question_id = 170;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Surely this is a better alternative.;<?php;$arr = array(1,2,3,4);$isIndexed = array_values($arr) === $arr   
CONTENT;
        $answer->question_id = 171;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          on duplicate key update, or insert ignore can be viable solutions with MySQL.;Example of on duplicate key update update based on mysql.com;INSERT INTO table (a,b,c) VALUES (1,2,3);ON DUPLICATE KEY UPDATE c=c+1;UPDATE table SET c=c+1 WHERE a=1;Example of insert ignore based on mysql.com;INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE];[INTO] tbl_name [(col_name,...)];{VALUES | VALUE} ({expr | DEFAULT},...),(...),...;[ ON DUPLICATE KEY UPDATE;col_name=expr;[, col_name=expr]... ];Or;INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE];[INTO] tbl_name;SET col_name={expr | DEFAULT},...;[ ON DUPLICATE KEY UPDATE;col_name=expr;[, col_name=expr]... ];Or;INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE];[INTO] tbl_name [(col_name,...)];SELECT...;[ ON DUPLICATE KEY UPDATE;col_name=expr;[, col_name=expr]... ]  
CONTENT;
        $answer->question_id = 172;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I've written a blogpost about this subject: " Cache a large array: JSON, serialize or var_export? ". In this post it is shown that serialize is the best choice for small to large sized arrays. For very large arrays (> 70MB) JSON is the better choice.  
CONTENT;
        $answer->question_id = 173;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          key($an_array) will give you the first key;edit per Blixt: you should call reset($array), before key($an_array) to reset the pointer to the beginning of the array. 
CONTENT;
        $answer->question_id = 174;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Starting with PHP 5.4, the echo shortcut is a separate issue from short tags, as the echo shortcut will always be enabled. It's a fact now;SVN Revision by Rasmus Lerdorf;Mailing list discussion;So the echo shortcut itself (<?=) is safe to use now. 
CONTENT;
        $answer->question_id = 175;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There is also SplFileInfo;$file = new SplFileInfo($path);$ext = $file->getExtension();Often you can write better code if you pass such an object around instead of a string, your code is more speaking then. Since PHP 5.4 this is a one-liner;$ext = (new SplFileInfo($path))->getExtension() 
CONTENT;
        $answer->question_id = 176;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I always use DATETIME fields for anything other than row metadata (date created or modified).;As mentioned in the MySQL documentation;The DATETIME type is used when you need values that contain both date and time information. MySQL retrieves and displays DATETIME values in 'YYYY-MM-DD HH:MM:SS' format. The supported range is '1000-01-01 00:00:00' to '9999-12-31 23:59:59'....;The TIMESTAMP data type has a range of '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC. It has varying properties, depending on the MySQL version and the SQL mode the server is running in.;You're quite likely to hit the lower limit on TIMESTAMPs in general use -- e.g. storing birthdate.    
CONTENT;
        $answer->question_id = 177;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          A user account comprises the username and the host level access.;Therefore, this is the query that gives all user accounts;SELECT CONCAT(QUOTE(user),'@',QUOTE(host)) UserAccount FROM mysql.user   
CONTENT;
        $answer->question_id = 178;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is an elegant solution that I quite appreciate because it uses zero data bytes;some_flag CHAR(0) DEFAULT NULL;To set it to true, set some_flag = '' and to set it to false, set some_flag = NULL.;Then to test for true, check if some_flag IS NOT NULL, and to test for false, check if some_flag IS NULL.;(This method is described in "High Performance MySQL: Optimization, Backups, Replication, and More" by Jon Warren Lentz, Baron Schwartz and Arjen Lentz.);[edit] I just realized there is a -2 vote answer already posted with the same solution. I'd delete this but I don't see an option to do that. I also don't agree with the down-votes because I find it a very nice solution. 
CONTENT;
        $answer->question_id = 179;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I've worked on a high-volume system using MySQL and I've tried both MyISAM and InnoDB.;I found that the table-level locking in MyISAM caused serious performance problems for our workload which sounds similar to yours. Unfortunately I also found that performance under InnoDB was also worse than I'd hoped.;In the end I resolved the contention issue by fragmenting the data such that inserts went into a "hot" table and selects never queried the hot table.;This also allowed deletes (the data was time-sensitive and we only retained X days worth) to occur on "stale" tables that again weren't touched by select queries. InnoDB seems to have poor performance on bulk deletes so if you're planning on purging data you might want to structure it in such a way that the old data is in a stale table which can simply be dropped instead of running deletes on it.;Of course I have no idea what your application is but hopefully this gives you some insight into some of the issues with MyISAM and InnoDB. 
CONTENT;
        $answer->question_id = 180;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Oracle (MySQL) now supports a pure Python connector. That means no binaries to install: it's just a Python library. It's called "Connector/Python".;http://dev.mysql.com/downloads/connector/python/    
CONTENT;
        $answer->question_id = 181;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          An SQL JOIN clause is used to combine rows from two or more tables;based on a common field between them.;There are different types of joins available in SQL;INNER JOIN: returns rows when there is a match in both tables.;LEFT JOIN: returns all rows from the left table, even if there are no matches in the right table.;RIGHT JOIN: returns all rows from the right table, even if there are no matches in the left table.;FULL JOIN: returns rows when there is a match in one of the tables.;SELF JOIN: is used to join a table to itself as if the table were two tables, temporarily renaming at least one table in the SQL statement.;CARTESIAN JOIN: returns the Cartesian product of the sets of records from the two or more joined tables.;WE can take each first four joins in Details;We have two tables with the following values.;TableA;id firstName lastName.......................................;1 arun prasanth;2 ann antony;3 sruthy abc;6 new abc;TableB;id2 age Place................;1 24 kerala;2 24 usa;3 25 ekm;5 24 chennai....................................................................;INNER JOIN;Note:it gives the intersection of the two tables, i.e. rows they have common in TableA and TableB;Syntax;SELECT table1.column1, table2.column2...;FROM table1;INNER JOIN table2;ON table1.common_field = table2.common_field;Apply it in our sample table;SELECT TableA.firstName,TableA.lastName,TableB.age,TableB.Place;FROM TableA;INNER JOIN TableB;ON TableA.id = TableB.id2;Result Will Be;firstName lastName age Place..............................................;arun prasanth 24 kerala;ann antony 24 usa;sruthy abc 25 ekm;LEFT JOIN;Note: will give all selected rows in TableA, plus any common selected rows in TableB.;Syntax;SELECT table1.column1, table2.column2...;FROM table1;LEFT JOIN table2;ON table1.common_field = table2.common_field;Apply it in our sample table;SELECT TableA.firstName,TableA.lastName,TableB.age,TableB.Place;FROM TableA;LEFT JOIN TableB;ON TableA.id = TableB.id2;Result;firstName lastName age Place...............................................................................;arun prasanth 24 kerala;ann antony 24 usa;sruthy abc 25 ekm;new abc NULL NULL;RIGHT JOIN;Note: will give all selected rows in TableB, plus any common selected rows in TableA.;Syntax;SELECT table1.column1, table2.column2...;FROM table1;RIGHT JOIN table2;ON table1.common_field = table2.common_field;Apply it in our sample table;SELECT TableA.firstName,TableA.lastName,TableB.age,TableB.Place;FROM TableA;RIGHT JOIN TableB;ON TableA.id = TableB.id2;Result;firstName lastName age Place...............................................................................;arun prasanth 24 kerala;ann antony 24 usa;sruthy abc 25 ekm;NULL NULL 24 chennai;FULL JOIN;Note: It is same as union operation, it will return all selected values from both tables.;Syntax;SELECT table1.column1, table2.column2...;FROM table1;FULL JOIN table2;ON table1.common_field = table2.common_field;Apply it in our sample table;SELECT TableA.firstName,TableA.lastName,TableB.age,TableB.Place;FROM TableA;FULL JOIN TableB;ON TableA.id = TableB.id2;Result;firstName lastName age Place...............................................................................;arun prasanth 24 kerala;ann antony 24 usa;sruthy abc 25 ekm;new abc NULL NULL;NULL NULL 24 chennai;Interesting Fact;For INNER joins the order doesn't matter;For (LEFT, RIGHT or FULL) OUTER joins,the order matter;Better to go check this Link it will give you interesting details about join order 
CONTENT;
        $answer->question_id = 182;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          mysql --batch, -B;Print results using tab as the column separator, with each row on a;new line. With this option, mysql does not use the history file.;Batch mode results in non-tabular output format and escaping of;special characters. Escaping may be disabled by using raw mode, see;the description for the --raw option.;This will give you a tab separated file. Since commas (or strings containing comma) are not escaped it is not straightforward to change the delimiter to comma.    
CONTENT;
        $answer->question_id = 183;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can change the max length of the GROUP_CONCAT value by setting the group_concat_max_len parameter.;See details in the MySQL documantation.  
CONTENT;
        $answer->question_id = 184;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          MySQL (before version 5.6.5) does not allow functions to be used for default DateTime values. TIMESTAMP is not suitable due to its odd behavior and is not recommended for use as input data. (See MySQL Data Type Defaults.);That said, you can accomplish this by creating a Trigger.;I have a table with a DateCreated field of type DateTime. I created a trigger on that table "Before Insert" and " SET NEW.DateCreated=NOW() " and it works great.;I hope this helps somebody.   
CONTENT;
        $answer->question_id = 185;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Can you predict how long the user input would be?;VARCHAR(X);Case: user name, email, country, subject, password;TEXT;Case: messages, emails, comments, formatted text, html, code, images, links;MEDIUMTEXT;Case: large json bodies, short to medium length books, csv strings;LONGTEXT;Case: textbooks, programs, years of logs files, harry potter and the goblet of fire, scientific research logging    
CONTENT;
        $answer->question_id = 186;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Simply like this;ALTER TABLE tablename AUTO_INCREMENT = value;reference: http://dev.mysql.com/doc/refman/5.1/en/alter-table.html    
CONTENT;
        $answer->question_id = 187;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I think the solution is simpler and was suggested by some developers. phpMyAdmin has an operation for this.;From phpMyAdmin, select the database you want to select. In the tabs there's one called Operations, go to the rename section. That's all.;It does, as many suggested, create a new database with the new name, dump all tables of the old database into the new database and drop the old database. 
CONTENT;
        $answer->question_id = 188;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Something important to add: When using INSERT IGNORE and you do have key violations, MySQL does NOT raise a warning!;If you try for instance to insert 100 records at a time, with one faulty one, you would get in interactive mode;Query OK, 99 rows affected (0.04 sec);Records: 100 Duplicates: 1 Warnings: 0;As you see: No Warnings! This behavior is even wrongly described in the official Mysql Documentation.;If your script needs to be informed, if some records have not been added (due to key violations) you have to call mysql_info() and parse it for the "Duplicates" value. 
CONTENT;
        $answer->question_id = 189;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This post describes it very nicely.;In short: utf8_unicode_ci uses the Unicode Collation Algorithm as defined in the Unicode standards, whereas utf8_general_ci is a more simple sort order which results in "less accurate" sorting results.   
CONTENT;
        $answer->question_id = 190;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Multi column unique indexes do not work in MySQL if you have a NULL value in row as MySQL treats NULL as a unique value and at least currently has no logic to work around it in multi-column indexes. Yes the behavior is insane, because it limits a lot of legitimate applications of multi-column indexes, but it is what it is... As of yet, it is a bug that has been stamped with "will not fix" on the MySQL bug-track...   
CONTENT;
        $answer->question_id = 191;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Applying conditional statements in ON / WHERE;Here I have explained about the logical query processing steps.;Reference: Inside Microsoft® SQL Server™ 2005 T-SQL Querying;Publisher: Microsoft Press;Pub Date: March 07, 2006;Print ISBN-10: 0-7356-2313-9;Print ISBN-13: 978-0-7356-2313-2;Pages: 640;Inside Microsoft® SQL Server™ 2005 T-SQL Querying;(8) SELECT (9) DISTINCT (11) TOP;(1) FROM;(3) JOIN;(2) ON;(4) WHERE;(5) GROUP BY;(6) WITH {CUBE | ROLLUP};(7) HAVING;(10) ORDER BY;The first noticeable aspect of SQL that is different than other programming languages is the order in which the code is processed. In most programming languages, the code is processed in the order in which it is written. In SQL, the first clause that is processed is the FROM clause, while the SELECT clause, which appears first, is processed almost last.;Each step generates a virtual table that is used as the input to the following step. These virtual tables are not available to the caller (client application or outer query). Only the table generated by the final step is returned to the caller. If a certain clause is not specified in a query, the corresponding step is simply skipped.;Brief Description of Logical Query Processing Phases;Don't worry too much if the description of the steps doesn't seem to make much sense for now. These are provided as a reference. Sections that come after the scenario example will cover the steps in much more detail.;FROM: A Cartesian product (cross join) is performed between the first two tables in the FROM clause, and as a result, virtual table VT1 is generated.;ON: The ON filter is applied to VT1. Only rows for which the is TRUE are inserted to VT2.;OUTER (join): If an OUTER JOIN is specified (as opposed to a CROSS JOIN or an INNER JOIN), rows from the preserved table or tables for which a match was not found are added to the rows from VT2 as outer rows, generating VT3. If more than two tables appear in the FROM clause, steps 1 through 3 are applied repeatedly between the result of the last join and the next table in the FROM clause until all tables are processed.;WHERE: The WHERE filter is applied to VT3. Only rows for which the is TRUE are inserted to VT4.;GROUP BY: The rows from VT4 are arranged in groups based on the column list specified in the GROUP BY clause. VT5 is generated.;CUBE | ROLLUP: Supergroups (groups of groups) are added to the rows from VT5, generating VT6.;HAVING: The HAVING filter is applied to VT6. Only groups for which the is TRUE are inserted to VT7.;SELECT: The SELECT list is processed, generating VT8.;DISTINCT: Duplicate rows are removed from VT8. VT9 is generated.;ORDER BY: The rows from VT9 are sorted according to the column list specified in the ORDER BY clause. A cursor is generated (VC10).;TOP: The specified number or percentage of rows is selected from the beginning of VC10. Table VT11 is generated and returned to the caller.;Therefore, (INNER JOIN) ON will filter the data (the data count of VT will be reduced here itself) before applying WHERE clause. The subsequent join conditions will be executed with filtered data which improves performance. After that only the WHERE condition will apply filter conditions.;(Applying conditional statements in ON / WHERE will not make much difference in few cases. This depends how many tables you have joined and number of rows available in each join tables)  
CONTENT;
        $answer->question_id = 192;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          SELECT date FROM logs group by date having count(*) >= 2    
CONTENT;
        $answer->question_id = 193;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I can't vouch for the performance, but here's a trick inspired by the limitations of Microsoft Excel. It has some good features;GOOD STUFF;It should force return of only one "max record" even if there is a tie (sometimes useful);It doesn't require a join;APPROACH;It is a little bit ugly and requires that you know something about the range of valid values of the rev column. Let us assume that we know the rev column is a number between 0.00 and 999 including decimals but that there will only ever be two digits to the right of the decimal point (e.g. 34.17 would be a valid value).;The gist of the thing is that you create a single synthetic column by string concatenating/packing the primary comparison field along with the data you want. In this way, you can force SQL's MAX() aggregate function to return all of the data (because it has been packed into a single column). Then you have to unpack the data.;Here's how it looks with the above example, written in SQL;SELECT id;CAST(SUBSTRING(max(packed_col) FROM 2 FOR 6) AS float) as max_rev;SUBSTRING(max(packed_col) FROM 11) AS content_for_max_rev;FROM (SELECT id;CAST(1000 + rev +.001 as CHAR) || '---' || CAST(content AS char) AS packed_col;FROM yourtable;GROUP BY id;The packing begins by forcing the rev column to be a number of known character length regardless of the value of rev so that for example;3.2 becomes 1003.201;57 becomes 1057.001;923.88 becomes 1923.881;If you do it right, string comparison of two numbers should yield the same "max" as numeric comparison of the two numbers and it's easy to convert back to the original number using the substring function (which is available in one form or another pretty much everywhere).    
CONTENT;
        $answer->question_id = 194;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I believe that if you already have a package it installed, pip will not overwrite it with another version. Use -I to ignore previous versions.  
CONTENT;
        $answer->question_id = 195;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          SELECT DISTINCT TABLE_NAME, COLUMN_NAME;FROM INFORMATION_SCHEMA.COLUMNS;WHERE column_name LIKE 'employee%;AND TABLE_SCHEMA='YourDatabase    
CONTENT;
        $answer->question_id = 196;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This will work even if you have two or more rows for each home with equal DATETIME 's;SELECT id, home, datetime, player, resource;FROM;SELECT;SELECT id;FROM topten ti;WHERE ti.home = t1.home;ORDER BY;ti.datetime DESC;LIMIT 1;lid;FROM;SELECT DISTINCT home;FROM topten;t1;ro, topten t2;WHERE t2.id = ro.lid    
CONTENT;
        $answer->question_id = 197;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Regarding the time taken for importing huge files: most importantly, it takes more time because the default setting of MySQL is "autocommit = true". You must set that off before importing your file and then check how import works like a gem...;You just need to do the following thing...;mysql> use db_name;mysql> SET autocommit=0, source the_sql_file.sql, COMMIT  
CONTENT;
        $answer->question_id = 198;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use EXPLAIN to see how your database executes the query on your data. There is a huge "it depends" in this answer...;PostgreSQL can rewrite a subquery to a join or a join to a subquery when it thinks one is faster than the other. It all depends on the data, indexes, correlation, amount of data, query, etc. 
CONTENT;
        $answer->question_id = 199;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you use the InnoDB storage engine for (some of) your MySQL tables, you’ve probably already came across a problem with its default configuration. As you may have noticed in your MySQL’s data directory (in Debian/Ubuntu – /var/lib/mysql) lies a file called ‘ibdata1′. It holds almost all the InnoDB data (it’s not a transaction log) of the MySQL instance and could get quite big. By default this file has a initial size of 10Mb and it automatically extends. Unfortunately, by design InnoDB data files cannot be shrinked. That’s why DELETEs, TRUNCATEs, DROPs, etc. will not reclaim the space used by the file.;I think you can find good explanation and solution there;http://vdachev.net/2007/02/22/mysql-reducing-ibdata1/    
CONTENT;
        $answer->question_id = 200;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use your subquery to return the correct grouping, because you're halfway there.;Try this;select;a.*;from;messages a;inner join;(select name, max(id) as maxid from messages group by name) as b on;a.id = b.maxid;If it's not id you want the max of;select;a.*;from;messages a;inner join;(select name, max(other_col) as other_col;from messages group by name) as b on;a.name = b.name;and a.other_col = b.other_col;This way, you avoid correlated subqueries and/or ordering in your subqueries, which tend to be very slow/inefficient.   
CONTENT;
        $answer->question_id = 201;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I feel like this has been well covered, maybe except for the following;Simple KEY / INDEX (or otherwise called SECONDARY INDEX) do increase performance if selectivity is sufficient. On this matter, the usual recommendation is that if the amount of records in the result set on which an index is applied exceeds 20% of the total amount of records of the parent table, then the index will be ineffective. In practice each architecture will differ but, the idea is still correct.;Secondary Indexes (and that is very specific to mysql) should not be seen as completely separate and different objects from the primary key. In fact, both should be used jointly and, once this information known, provide an additional tool to the mysql DBA: in Mysql, indexes embed the primary key. It leads to significant performance improvements, specifically when cleverly building implicit covering indexes such as described there;If you feel like your data should be UNIQUE, use a unique index. You may think it's optional (for instance, working it out at application level) and that a normal index will do, but it actually represents a guarantee for Mysql that each row is unique, which incidentally provides a performance benefit.;You can only use FULLTEXT (or otherwise called SEARCH INDEX) with Innodb (In MySQL 5.6.4 and up) and Myisam Engines;You can only use FULLTEXT on CHAR, VARCHAR and TEXT column types;FULLTEXT index involves a LOT more than just creating an index. There's a bunch of system tables created, a completely separate caching system and some specific rules and optimizations applied. See http://dev.mysql.com/doc/refman/5.7/en/fulltext-restrictions.html and http://dev.mysql.com/doc/refman/5.7/en/innodb-fulltext-index.html    
CONTENT;
        $answer->question_id = 202;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          SELECT CompanyName;CASE WHEN Country IN ('USA', 'Canada') THEN 'North America;WHEN Country = 'Brazil' THEN 'South America;ELSE 'Europe' END AS Continent;FROM Suppliers;ORDER BY CompanyName    
CONTENT;
        $answer->question_id = 203;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I tried using the 'WHERE' statement above, I thought its correct since nobody corrected it but I was wrong, after some searches I found out that this is the right formula for the WHERE statement so the code becomes like this;SELECT COUNT(id);FROM stats;WHERE YEAR(record_date) = 2009;GROUP BY MONTH(record_date) 
CONTENT;
        $answer->question_id = 204;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          here is a solution for the windows users, hope it helps!;Using MySQL with Rails 3 on Windows;Install railsinstaller -> www.railsinstaller.org (I installed it to c:\Rails);Install MySQL (I used MySQL 5.5) -> dev.mysql.com/downloads/installer/;--- for mySQL installation ---;If you dont already have these two files installed you might need them to get your MySQL going;vcredist_x86.exe -> http://www.microsoft.com/download/en/details.aspx?id=5555;dotNetFx40_Full_x86_x64.exe -> http://www.microsoft.com/download/en/details.aspx?id=17718;Use default install;Developer Machine;-MySQL Server Config-;port: 3306;windows service name: MySQL55;mysql root pass: root (you can change this later);(username: root);-MySQL Server Config-;--- for mySQL installation ---;--- Install the mysql2 Gem ---;Important: Do this with Git Bash Command Line (this was installed with railsinstaller) -> start/Git Bash;gem install mysql2 -- '--with-mysql-lib="c:\Program Files\MySQL\MySQL Server 5.5\lib" --with-mysql-include="c:\Program Files\MySQL\MySQL Server 5.5\include";Now the gem should have installed correctly;Lastly copy the libmysql.dll file from;C:\Program Files\MySQL\MySQL Server 5.5\lib;to;C:\Rails\Ruby1.9.2\bin;--- Install the mysql2 Gem ---;You will now be able to use your Rails app with MySQL, if you are not sure how to create a Rails 3 app with MySQL read on...;--- Get a Rails 3 app going with MySQL ---;Open command prompt(not Git Bash) -> start/cmd;Navigate to your folder (c:\Sites);Create new rails app;rails new world;Delete the file c:\Sites\world\public\index.html;Edit the file c:\Sites\world\config\routes.rb;add this line -> root:to => 'cities#index;Open command prompt (generate views and controllers);rails generate scaffold city ID:integer Name:string CountryCode:string District:string Population:integer;Edit the file c:\Sites\world\app\models\city.rb to look like this;class City http://localhost:3000;--- Get a Rails 3 app going with MySQL ---  
CONTENT;
        $answer->question_id = 205;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I use a piece of software called Navicat to;Sync Live databases to my test databases.;Show differences between the two databases.;It costs money, it's windows and mac only, and it's got a whacky UI, but I like it.;share 206
        663 If you are using Linux, you can use this bash script;(it perhaps needs some additional code cleaning but it works... and it's much faster then mysqldump|mysql);#!/bin/bash;DBUSER=user;DBPASSWORD=pwd;DBSNAME=sourceDb;DBNAME=destinationDb;DBSERVER=db.example.com;fCreateTable=";fInsertData=";echo "Copying database... (may take a while...);DBCONN="-h ${DBSERVER} -u ${DBUSER} --password=${DBPASSWORD};echo "DROP DATABASE IF EXISTS ${DBNAME}" | mysql ${DBCONN};echo "CREATE DATABASE ${DBNAME}" | mysql ${DBCONN};for TABLE in `echo "SHOW TABLES" | mysql $DBCONN $DBSNAME | tail -n +2`, do;createTable=`echo "SHOW CREATE TABLE ${TABLE}"|mysql -B -r $DBCONN $DBSNAME|tail -n +2|cut -f 2-`;fCreateTable="${fCreateTable}, ${createTable};insertData="INSERT INTO ${DBNAME}.${TABLE} SELECT * FROM ${DBSNAME}.${TABLE};fInsertData="${fInsertData}, ${insertData};done;echo "$fCreateTable, $fInsertData" | mysql $DBCONN $DBNAME    
CONTENT;
        $answer->question_id = 207;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Rising to @Ankan-Zerob's challenge, this is my estimate of the maximum length which can be stored in each text type measured in words;Type | Bytes | English words | Multi-byte words;-----------+---------------+---------------+-----------------;TINYTEXT | 255 | ±44 | ±23;TEXT | 65,535 | ±11,000 | ±5,900;MEDIUMTEXT | 16,777,215 | ±2,800,000 | ±1,500,000;LONGTEXT | 4,294,967,295 | ±740,000,000 | ±380,000,000;In English, 4.8 letters per word is probably a good average (eg norvig.com/mayzner.html), though word lengths will vary according to domain (e.g. spoken language vs. academic papers), so there's no point being too precise. English is mostly single-byte ASCII characters, with very occasional multi-byte characters, so close to one-byte-per-letter. An extra character has to be allowed for inter-word spaces, so I've rounded down from 5.8 bytes per word. Languages with lots of accents such as say Polish would store slightly fewer words, as would e.g. German with longer words.;Languages requiring multi-byte characters such as Greek, Arabic, Hebrew, Hindi, Thai, etc, etc typically require two bytes per character in UTF-8. Guessing wildly at 5 letters per word, I've rounded down from 11 bytes per word.;CJK scripts (Hanzi, Kanji, Hiragana, Katakana, etc) I know nothing of, I believe characters mostly require 3 bytes in UTF-8, and (with massive simplification) they might be considered to use around 2 characters per word, so they would be somewhere between the other two. (CJK scripts are likely to require less storage using UTF-16, depending).;This is of course ignoring storage overheads etc.   
CONTENT;
        $answer->question_id = 208;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I've started using PDO because the statement support is better, in my opinion. I'm using an ActiveRecord-esque data-access layer, and it's much easier to implement dynamically generated statements. MySQLi's parameter binding must be done in a single function/method call, so if you don't know until runtime how many parameters you'd like to bind, you're forced to use call_user_func_array() (I believe that's the right function name) for selects. And forget about simple dynamic result binding.;Most of all, I like PDO because it's a very reasonable level of abstraction. It's easy to use it in completely abstracted systems where you don't want to write SQL, but it also makes it easy to use a more optimized, pure query type of system, or to mix-and-match the two.;share    209
        666 for multiple databases;mysqldump -u user -p --ignore-table=db1.tbl1 --ignore-table=db2.tbl1 --databases db1 db2..   
CONTENT;
        $answer->question_id = 210;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          MSSQL requires that variables within procedures be DECLAREd and folks use the @Variable syntax (DECLARE @TEXT VARCHAR(25) = 'text'). Also, MS allows for declares within any block in the procedure, unlike mySQL which requires all the DECLAREs at the top.;While good on the command line, I feel using the "set = @variable" within stored procedures in mySQL is risky. There is no scope and variables live across scope boundaries. This is similar to variables in JavaScript being declared without the "var" prefix, which are then the global namespace and create unexpected collisions and overwrites.;I am hoping that the good folks at mySQL will allow DECLARE @Variable at various block levels within a stored procedure. Notice the @ (at sign). The @ sign prefix helps to separate variable names from table column names - as they are often the same. Of course, one can always add an "v" or "l_" prefix, but the @ sign is a handy and succinct way to have the variable name match the column you might be extracting the data from without clobbering it.;MySQL is new to stored procedures and they have done a good job for their first version. It will be a pleaure to see where they take it form here and to watch the server side aspects of the language mature.    
CONTENT;
        $answer->question_id = 211;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Try this out;INSERT INTO table (id, name, age) VALUES (1, 'A', 19) ON DUPLICATE KEY UPDATE id = id + 1;Hope this helps. 
CONTENT;
        $answer->question_id = 212;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This will be helpful for some people;From MySQL command line;CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password;Sadly, at this point newuser has no permissions to do anything with the databases. In fact, if newuser even tries to login (with the password, password), they will not be able to reach the MySQL shell.;Therefore, the first thing to do is to provide the user with access to the information they will need.;GRANT ALL PRIVILEGES ON *. * TO 'newuser'@'localhost;The asterisks in this command refer to the database and table (respectively) that they can access—this specific command allows to the user to read, edit, execute and perform all tasks across all the databases and tables.;Once you have finalized the permissions that you want to set up for your new users, always be sure to reload all the privileges.;FLUSH PRIVILEGES;Your changes will now be in effect.;For more information: http://dev.mysql.com/doc/refman/5.6/en/grant.html;If you are not comfortable with the command line then you can use a client like MySQL workbench, Navicat or SQLyog  
CONTENT;
        $answer->question_id = 213;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          SELECT;table_name AS "Table;round(((data_length + index_length) / 1024 / 1024), 2) as TEST;FROM information_schema.TABLES;WHERE table_schema = "YOUR_DATABASE_NAME;ORDER BY TEST;This can also sort the sizes (DB Size in MB).  
CONTENT;
        $answer->question_id = 214;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For Eloquent you can just do;$result->getQuery()->toSql();But you need to remove the "->get()" part from your query.    
CONTENT;
        $answer->question_id = 215;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I can only comment on the way we (at my company) deal with this. First of all performance is not too much of an issue for us, but having clean/proper code is.;First of all we define Models such as a UserModel that uses an ORM to create UserEntity objects. When a UserEntity is loaded from a model all fields are loaded. For fields referencing foreign entities we use the appropriate foreign model to create the respective entities. For those entities the data will be loaded ondemand. Now your initial reaction might be...???...!!! let me give you an example a bit of an example;class UserEntity extends PersistentEntity;public function getOrders();$this->getField('orders'), //OrderModel creates OrderEntities with only the ID's set;class UserModel;protected $orm;public function findUsers(IGetOptions $options = null);return $orm->getAllEntities(/*...*/), // Orm creates a list of UserEntities;class OrderEntity extends PersistentEntity {} // user your imagination;class OrderModel;public function findOrdersById(array $ids, IGetOptions $options = null);//...;In our case $db is an ORM that is able to load entities. The model instructs the ORM to load a set of entities of a specific type. The ORM contains a mapping and uses that to inject all the fields for that entity in to the entity. For foreign fields however only the id's of those objects are loaded. In this case the OrderModel creates OrderEntity s with only the id's of the referenced orders. When PersistentEntity::getField gets called by the OrderEntity the entity instructs it's model to lazy load all the fields into the OrderEntity s. All the OrderEntity s associated with one UserEntity are treated as one result-set and will be loaded at once.;The magic here is that our model and ORM inject all data into the entities and that entities merely provide wrapper functions for the generic getField method supplied by PersistentEntity. To summarize we always load all the fields, but fields referencing a foreign entity are loaded when necessary. Just loading a bunch of fields is not really a performance issue. Load all possible foreign entities however would be a HUGE performance decrease.;Now on to loading a specific set of users, based on a where clause. We provide an object oriented package of classes that allow you to specify simple expression that can be glued together. In the example code I named it GetOptions. It's a wrapper for all possible options for a select query. It contains a collection of where clauses, a group by clause and everything else. Our where clauses are quite complicated but you could obviously make a simpler version easily.;$objOptions->getConditionHolder()->addConditionBind;new ConditionBind;new Condition('orderProduct.product', ICondition::OPERATOR_IS, $argObjProduct);A simplest version of this system would be to pass the WHERE part of the query as a string directly to the model.;I'm sorry for this quite complicated response. I tried to summarize our framework as quickly and clear as possible. If you have any additional questions feel free to ask them and I'll update my answer.;EDIT: Additionally if you really don't want to load some fields right away you could specify a lazy loading option in your ORM mapping. Because all fields are eventually loaded through the getField method you could load some fields last minute when that method is called. This is not a very big problem in PHP, but I would not recommend for other systems. 
CONTENT;
        $answer->question_id = 216;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Laravel's helpers.php method is to add it to your "files" in composer.json (https://github.com/laravel/framework/blob/master/composer.json);autoload;classmap": [...;files;app/libraries/helpers.php;What I do is to create small classes (a few methods per class, one line per method, everything extended from something and DRY, that's my goal);class ExtendedCarbon extends Carbon\Carbon;public function formatDDMMAAAA($date);/// format and return;save them to them in app/libraries and add to composer.json;autoload;classmap": [...;app/libraries",...;Execute;composer dump;And then just use them wherever you need;$formatted = (new ExtendedCarbon)->formatDDMMAAAA($date);Watch this video about refactoring: http://www.youtube.com/watch?v=DC-pQPq0acs;By the way, I'm kind of sure it was just an example, but you might not need a helper to format dates, since all dates in Laravel are instances of Carbon (https://github.com/briannesbitt/Carbon) and it has loads of methods to format date and time.   
CONTENT;
        $answer->question_id = 217;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can listen to the 'illuminate.query' event. Before the query add the following event listener;Event::listen('illuminate.query', function($query, $params, $time, $conn);dd(array($query, $params, $time, $conn));DB::table('users')->get();This will print out something like;array(4);[0]=>;string(21) "select * from "users";[1]=>;array(0);[2]=>;string(4) "0.94";[3]=>;string(6) "sqlite    
CONTENT;
        $answer->question_id = 218;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Custom Classes in Laravel 5, the Easy Way;This answer is applicable to general custom classes within Laravel. For a more Blade-specific answer, see Custom Blade Directives in Laravel 5.;Step 1: Create your Helpers (or other custom class) file and give it a matching namespace. Write your class and method;App\Helpers\Helper::class',...;Step 3: Use it in your Blade template;{!! Helper::shout('this is how to use autoloading correctly!!') !!};Extra Credit: Use this class anywhere in your Laravel app;<?php // Code within app/Http/Controllers/SomeController.php;namespace App\Http\Controllers;use App\Helpers\Helper;class SomeController extends Controller;public function __construct();Helper::shout('now i\'m using my helper class in a controller!!');Source: http://www.php-fig.org/psr/psr-4/;Why it works: https://github.com/laravel/framework/blob/master/src/Illuminate/Support/ClassLoader.php;Where autoloading originates from;http://php.net/manual/en/language.oop5.autoload.php    
CONTENT;
        $answer->question_id = 219;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Maybe you should try this;Dashboard 
CONTENT;
        $answer->question_id = 220;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Incase you're looping the OR conditions, you don't need the the second $query->where from the other posts (actually I don't think you need in general, you can just use orWhere in the nested where if easier);$attributes = ['first'=>'a','second'=>'b'];$query->where(function ($query) use ($attributes);foreach ($attributes as $key=>value);//you can use orWhere the first time, dosn't need to be ->where;$query->orWhere($key,$value)   
CONTENT;
        $answer->question_id = 221;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I deleted old sessions inside app/storage/sessions folder and give a 775 permission to app/storage after that it's working like a fire!;chmod -R 775 app/storage;Good luck! 
CONTENT;
        $answer->question_id = 222;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Think of Repositories as a consistent filing cabinet of your data (not just your ORMs). The idea is that you want to grab data in a consistent simple to use API.;If you find yourself just doing Model::all(), Model::find(), Model::create() you probably won't benefit much from abstracting away a repository. On the other hand, if you want to do a bit more business logic to your queries or actions, you may want to create a repository to make an easier to use API for dealing with data.;I think you were asking if a repository would be the best way to deal with some of the more verbose syntax required to connect related models. Depending on the situation, there are a few things I may do;Hanging a new child model off of a parent model (one-one or one-many), I would add a method to the child repository something like createWithParent($attributes, $parentModelInstance) and this would just add the $parentModelInstance->id into the parent_id field of the attributes and call create.;Attaching a many-many relationship, I actually create functions on the models so that I can run $instance->attachChild($childInstance). Note that this requires existing elements on both side.;Creating related models in one run, I create something that I call a Gateway (it may be a bit off from Fowler's definitions). Way I can call $gateway->createParentAndChild($parentAttributes, $childAttributes) instead of a bunch of logic that may change or that would complicate the logic that I have in a controller or command.    
CONTENT;
        $answer->question_id = 224;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is how I would go about it.;$posts = $this->post->orderBy('id', 'DESC')->get() 
CONTENT;
        $answer->question_id = 225;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Old question, but I think I solved it in a elegant way. I extended Blade like this;/*;--------------------------------------------------------------------------;Extend blade so we can define a variable;@define $variable = "whatever;--------------------------------------------------------------------------;*/;\Blade::extend(function($value);return preg_replace('/\@define(.+)/', ' ', $value);LARAVEL 5;Quick solution: If you are lazy, just put the code in the boot() function of the AppServiceProvider.php.;Nicer solution;Create an own service provider. See http://stackoverflow.com/a/28641054/2169147 on how to extend blade in Laravel 5. It's a bit more work this way, but a good exercise on how to use Providers:);LARAVEL 4;You can just put the above code on the bottom of app/start/global.php (or any other place if you feel that is better).;After the above changes, you can use;@define $i = 1;to define a variable. 
CONTENT;
        $answer->question_id = 226;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For setting the PATH on Yosemite (OS X 10.10.5), use the command below;echo 'export PATH="$PATH:$HOME/.composer/vendor/bin"' >> ~/.bash_profile;To reload either quit terminal and start up again or use;source ~/.bash_profile;Helped me, hope it helps someone else out there!    
CONTENT;
        $answer->question_id = 228;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is an update problem. Laravel force us to update the User.php model with the following code to fix this problem.;Note: All existing "remember me" sessions will be invalidated by this;change, so all users will be forced to re-authenticate with your;application.;public function getRememberToken();return $this->remember_token;public function setRememberToken($value);$this->remember_token = $value;public function getRememberTokenName();return 'remember_token 
CONTENT;
        $answer->question_id = 230;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you are in windows, simply use composer in your terminal/command line utility and do the following;composer dump-autoload;Hope it helps! 
CONTENT;
        $answer->question_id = 232;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I found those two great methods that might be extremely helpful to you.;Redirect::guest();Redirect::intended();You can apply this filter to the routes that need authentication.;Route::filter('auth', function();if (Auth::guest());return Redirect::guest('login');What this method basically does it's to store the page you were trying to visit and it is redirects you to the login page.;When the user is authenticated you can call;return Redirect::intended();and it's redirects you to the page you were trying to reach at first.;It's a great way to do it although I usually use the below method.;Redirect::back();You can check this awesome blog.  
CONTENT;
        $answer->question_id = 233;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use subqueries in anonymous function like this;$results = User::where('this', '=', 1);->where('that', '=', 1);->where(function($query);/** @var $query Illuminate\Database\Query\Builder */;return $query->where('this_too', 'LIKE', '%fake%');->orWhere('that_too', '=', 1);->get()    
CONTENT;
        $answer->question_id = 234;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In addition, just to buttress the former answers, it could be sorted as well either in descending desc or ascending asc orders by adding either as the second parameter.;$results = Project::orderBy('created_at', 'desc')->get();Hope this helps.  
CONTENT;
        $answer->question_id = 235;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you rename your getAvailability() method to getAvailableAttribute() your method becomes an accessor and you'll be able to read it using ->available straight on your model.;Docs: http://laravel.com/docs/eloquent#accessors-and-mutators;EDIT: Since your attribute is "virtual", it is not included by default in the JSON representation of your object.;But I found this: Custom model accessors not processed when ->toJson() called?;In order to force your attribute to be returned in the array, add it as a key to the $attributes array.;class User extends Eloquent;protected $attributes = array;ZipCode' => ';public function getZipCodeAttribute();return....;I didn't test it, but should be pretty trivial for you to try in your current setup. 
CONTENT;
        $answer->question_id = 236;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          so Laravel actually returns a collection when just using Model::all();you don't want a collection you want an array so you can type set it.;(array)Model::all(), then you can use array_filter to return the results;$models = (array)Model::all();$models = array_filter($models);if(empty($models));do something;this will also allow you to do things like count().  
CONTENT;
        $answer->question_id = 237;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can install laravel local and after you can upload to your server application with files changed for your project   
CONTENT;
        $answer->question_id = 238;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For anyone who also likes how Jeffrey Way uses Model::create() in his Laracasts 5 tutorials, where he just sends the Request straight into the database without explicitly setting each field in the controller, and using the model's $fillable for mass assignment (very important, for anyone new and using this way): I read a lot of people using insertGetId() but unfortunately this does not respect the $fillable whitelist so you'll get errors with it trying to insert _token and anything that isn't a field in the database, end up setting things you want to filter, etc. That bummed me out, because I want to use mass assignment and overall write less code when possible. Fortunately Eloquent's create method just wraps the save method (what @xdazz cited above), so you can still pull the last created ID...;public function store();$input = Request::all();$id = Company::create($input)->id;return redirect('company/'.$id)    
CONTENT;
        $answer->question_id = 239;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You likely need to delete the entry from the migrations table too.  
CONTENT;
        $answer->question_id = 240;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Quote from Matt Stauffer;Lumen has the same foundation as Laravel, and many of the same components. But Lumen is built for microservices, not so much for user-facing applications (although it can be used for anything.) As such, frontend niceties like Bootstrap and Elixir and the authentication bootstrap and sessions don't come enabled out of the box, and there's less flexibility for extending and changing the bootstrap files.;You can read more here    
CONTENT;
        $answer->question_id = 242;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Run this command from where you want to store your project;composer create-project laravel/laravel;Remember, it will download the latest version of laravel application from git.;if you are using linux then give permission to bootstrap/cache and storage by running the command chmod 777 -R from root of your laravel project  
CONTENT;
        $answer->question_id = 243;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'm running the very latest Laravel 5 dev release, and if you've changed the namespace you'll need to call your seed class like this;$this->call('\todoparrot\TodolistTableSeeder');Obviously you'll need to replace todoparrot with your designated namespace. Otherwise I receive the same error indicated in the original question.  
CONTENT;
        $answer->question_id = 244;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Route::resource('foo', 'FooController');Route::controller('foo', 'FooController');Give this a try.Put you extra methods like getData() etc etc.. This worked for me to keep route.php clean 
CONTENT;
        $answer->question_id = 245;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Put your assets in the public folder;public/css;public/images;public/fonts;public/js;And then called it using Laravel;{{ URL::asset('js/scrollTo.js'), }} // Generates the path to public directory public/js/scrollTo.js;{{ URL::asset('css/css.css'), }} // Generates the path to public directory public/css/css.css;(OR);{{ HTML::script('js/scrollTo.js'), }} // Generates the path to public directory public/js/scrollTo.js;{{ HTML::style('css/css.css'), }} // Generates the path to public directory public/css/css.css   
CONTENT;
        $answer->question_id = 246;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Try this, in the public/index.php page;error_reporting(E_ALL);ini_set('error_reporting', E_ALL);ini_set("display_errors", 1)    
CONTENT;
        $answer->question_id = 247;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          FYI, the list of operators (containing like and all others) is in code;/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php;protected $operators = array;=', ' ', ' =', '<>', '!=;like', 'not like', 'between', 'ilike;&', '|', '^', ';rlike', 'regexp', 'not regexp;disclaimer;Joel Larson's answer is correct. Got my upvote.;I'm hoping this answer sheds more light on what's available via the Eloquent ORM (points people in the right direct). Whilst a link to documentation would be far better, that link has proven itself elusive.   
CONTENT;
        $answer->question_id = 248;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For googlers who has been facing this problem with Laravel 5.;This is a permission issue caused by different users trying to write at the same log file within the storage/logs folder with different permissions.;What happens is your laravel config probably is setup to log errors daily and therefore your webserver (apache/nginx) might create this file under a default user depending on your environment it can be something like _www on OSX or www-data on *NIX systems, then the issue comes when you might have run some artisan commands and got some errors, so the artisan will write this file but with a different user because PHP on terminal is executed by a different user actually your login user, you can check it out by running this command;php -i | grep USER;If your login user created that log file your webserver you will not be able to write errors in it and vice-versa because laravel writes log files with 655 permissions by default which only allows the owner to write in it.;To fix this temporary you have to manually give permissions for the group 664 to this file so both your login user and webserver user can write to that log file.;To avoid this issue permanently you may want to setup a proper permissions when a new file is create within the storage/logs dir by inheriting the permissions from the directory this answer http://unix.stackexchange.com/a/115632 can help you to tackle with that.    
CONTENT;
        $answer->question_id = 249;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          People, people! No need to over-complicate things!;(For other public folders, such as htdocs or www just replace public_html in the following with your one.);Put all your Laravel stuff in the top-level folder (so that the app folder is next to the public_html folder);Move all files from public to public_html (be sure to also move hidden files, such as.htaccess !);Delete the now empty public folder;In bootstrap/path.php change;public' => __DIR__.'/../public', to;public' => __DIR__.'/../public_html;Done. 
CONTENT;
        $answer->question_id = 250;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I supuse you're using Laravel 3, if yes put your CSS/JS files in public folder like;public/css;public/js;and call it using Blade templates;{{ HTML::style('css/style.css'), }};{{ HTML::script('js/jquery-1.8.2.min.js'), }}    
CONTENT;
        $answer->question_id = 251;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Looks like you very confused with how Cordova works. Well made SPA application will just work with Cordova with very slight modifications related to security and Cordova boilerplate configs.;Loading static resources (images, html, css);There no need to put these resources in some place, other then www location. With Cordova XHR requests work just fine if you use relative paths for making XHR requests. So having folder structure like that in your www folder;www;- css;- style.css;- js;- app.js;- html;- page.html;- index.html;from your index.html you could do regular request using;$.get('page.html');Also make sure that you set proper Content Security Policy (CSP) in your index.html. See below for example.;Dynamic resources;These resources which will change over application lifetime. And this is the resources for which you should use File API. This API does not require user interaction within Cordova application.;In the Cordova File plugin there documentation how each variable align with OS specific folders. See Where to Store Files section of docs.;Security;Latest changes in Cordova requires you to have CSP policy to be specified in your HTML, otherwise you will not be able to do any communications with external resources. You could see HTML5 tutorial on CSP for explanation, and Cordova Whitelist plugin docs for examples how to configure CSP in Cordova-specific way.   
CONTENT;
        $answer->question_id = 8;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          To make it work 
CONTENT;
        $answer->question_id = 10;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you are open to using a library, the MomentJS JavaScript library is popular for handling times and dates.    
CONTENT;
        $answer->question_id = 38;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'm using Ruby on Rails and Watir Webdriver (https://github.com/watir/watir-webdriver).;I have identified that the tool using the ASP.NET when using the "doPostBack" identical browser used by the User Agent defined by the customer. When using PhantomJS the user agent is identified as something "Mozilla/5.0 (Unknown, Linux i686) AppleWebKit/534.34 (KHTML, like Gecko) Safari/534.34 PhantomJS/1.9.1".;Therefore it is necessary to change the user agent client before accessing the page. Rails and did something like;HTTP_USER_AGENT = "Mozilla/5.0 (X11, Ubuntu, Linux i686, rv:22.0) Gecko/20100101 Firefox/22.0";HTTP_DRIVER = Selenium::WebDriver.for:phantomjs,:desired_capabilities => Selenium::WebDriver::Remote::Capabilities.phantomjs;phantomjs.page.settings.userAgent" => HTTP_USER_AGENT;browser = Watir::Browser.new HTTP_DRIVER,:http_client => client    
CONTENT;
        $answer->question_id = 39;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The WHATWG HTML spec has the exact algorithm for parsing a legacy color value;http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#rules-for-parsing-a-legacy-color-value;The code Netscape Classic used for parsing color strings is open source;http://mxr.mozilla.org/classic/source/lib/layout/layimage.c#155;For example, notice that each character is parsed as a hex digit and then is shifted into a 32-bit integer without checking for overflow. Only eight hex digits fit into a 32-bit integer, which is why only the last 8 characters are considered. After parsing the hex digits into 32-bit integers, they are then truncated into 8-bit integers by dividing them by 16 until they fit into 8-bit, which is why leading zeros are ignored.;Update: this code does not exactly match what is defined in the spec, but the only difference there is a few lines of code. I think it is these lines that was added (in Netscape 4);if (bytes_per_val > 4);bytes_per_val = 4    
CONTENT;
        $answer->question_id = 46;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          # will take the user back to the top of the page, so I usually go with void(0). 
CONTENT;
        $answer->question_id = 47;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In addition to toscho's answer I've noticed some webkit inconsistencies between Chrome 9-10 and Safari 5 with the CSS properties supported that are worth noting.;Specifically Chrome 9 and 10 do not support background-color, border, text-decoration and text-transform when styling the placeholder.;The full cross-browser comparison is here. 
CONTENT;
        $answer->question_id = 48;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Best approaches with CSS 3;box model;#outer;width:100%;/* Firefox */;display:-moz-box;-moz-box-pack:center;-moz-box-align:center;/* Safari and Chrome */;display:-webkit-box;-webkit-box-pack:center;-webkit-box-align:center;/* W3C */;display:box;box-pack:center;box-align:center;#inner;width:50%;According to your usability you may also use the box-orient, box-flex, box-direction properties.;flex;#outer;display: flex;flex-direction: row;flex-wrap: wrap;justify-content: center;align-items: center;Here is a playground for centering elements with box model.;Link 1;Read more about centering the child elements;Link 2;Link 3;Link 4;And this explains why box model is best approach.;Why is the W3C box model considered better? 
CONTENT;
        $answer->question_id = 49;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Setting margins on table cells doesn't really have any effect as far as I know. The true CSS equivalent for cellspacing is border-spacing - but it doesn't work in Internet Explorer.;You can use border-collapse: collapse to reliably set cell spacing to 0 as mentioned, but for any other value I think the only cross-browser way is to keep using the cellspacing attribute.  
CONTENT;
        $answer->question_id = 50;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          JSFiddle DEMO;We'll do it using just CSS pseudo selectors!;This technique will work with dynamically generated content and different font sizes and widths.;HTML;Two is better than one.;CSS:.split-color > span;white-space: pre-line;position: relative;color: #409FBF;split-color > span:before;content: attr(data-content);pointer-events: none, /* Prevents events from targeting pseudo-element */;position: absolute;overflow: hidden;color: #264A73;width: 50%;z-index: 1;To wrap the dynamically generated string, you could use a function like this;// Wrap each letter in a span tag and return an HTML string;// that can be used to replace the original text;function wrapString(str);var output = [];str.split('').forEach(function(letter);var wrapper = document.createElement('span');wrapper.dataset.content = wrapper.innerHTML = letter;output.push(wrapper.outerHTML);return output.join('');// Replace the original text with the split-color text;window.onload = function();var el = document.querySelector('.split-color');txt = el.innerHTML;el.innerHTML = wrapString(txt) 
CONTENT;
        $answer->question_id = 51;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use node.className like so;document.getElementById('foo').className = 'bar;This should work in IE5.5 and up according to PPK.   
CONTENT;
        $answer->question_id = 52;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It's better to use a semi-transparent.png.;Just open Photoshop, create a 2x2 pixel image (picking 1x1 can cause an Internet Explorer bug!), fill it with a green color and set the opacity in "Layers tab" to 60%. Then save it and make it a background image;any text;It works cool, of course, except in lovely Internet Explorer 6. There are better fixes available, but here's a quick hack;p;filter: expression((runtimeStyle.backgroundImage != 'none')? runtimeStyle.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src='+currentStyle.backgroundImage.split('\"')[1]+', sizingMethod=scale)': runtimeStyle.filter,runtimeStyle.backgroundImage = 'none')    
CONTENT;
        $answer->question_id = 53;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This will work in IE and FF, the downside is that it is not XHTML standard. 
CONTENT;
        $answer->question_id = 54;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Disclaimer: use a parser if you have the option. That said...;This is the regex I use (!) to match HTML tags;+>;It may not be perfect, but I ran this code through a lot of HTML. Note that it even catches strange things like, which show up on the web.;I guess to make it not match self contained tags, you'd either want to use Kobi 's negative look-behind;+(?<!/\s*)>;or just combine if and if not.;To downvoters: This is working code from an actual product. I doubt anyone reading this page will get the impression that it is socially acceptable to use regexes on HTML.;Caveat: I should note that this regex still breaks down in the presence of CDATA blocks, comments, and script and style elements. Good news is, you can get rid of those using a regex...;share   55
        725 CSS3 has a new propery for UI elements that will allow you to do this. The property is the resize property. So you would add the following to your stylesheet to disable resizing of all textarea elements;textarea { resize: none, };This is a CSS3 property, use a compatibility chart to see browser compatibility.;Personally, I would find it very annoying to have resizing disabled on textarea elements. This is one of those situations where the designer is trying to "break" the user's client. If your design can't accommodate a larger textarea, you might want to reconsider how your design works. Any user can add textarea { resize: both !important, } to their user stylesheet to override your preference.    
CONTENT;
        $answer->question_id = 56;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          jQuery does handle any valid ID name. You just need to escape metacharacters (i.e., dots, semicolons, square brackets...). It's like saying that JavaScript has a problem with quotes only because you can't write;var name = 'O'Hara;Selectors in jQuery API (see bottom note) 
CONTENT;
        $answer->question_id = 57;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          in css, style;list-style-type: none 
CONTENT;
        $answer->question_id = 58;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          One easy thing that seems to work well is to apply a adjust the vertical position of the checkbox with vertical-align. It will still be vary across browsers, but the solution is uncomplicated.;input;vertical-align: -2px;Reference   
CONTENT;
        $answer->question_id = 59;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can also use HTML5 replaceState if you want to change the url but don't want to add the entry to the browser history;if (window.history.replaceState);//prevents browser from storing history with each change;window.history.replaceState(statedata, title, url);This would 'break' the back button functionality. This may be required in some instances such as an image gallery (where you want the back button to return back to the gallery index page instead of moving back through each and every image you viewed) whilst giving each image its own unique url.   
CONTENT;
        $answer->question_id = 60;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In HTML (up to HTML 4): use;In HTML 5;is preferred, but;and;is also acceptable;In XHTML;is preferred. Can also use;or;Notes;is not valid in HTML 5, it will be thought of as two line breaks.;XHTML is case sensitive, HTML is not case sensitive.;For backward compatibility, some old browsers would parse XHTML as HTML and fail on;but not;Reference;http://www.w3schools.com/tags/tag_br.asp;http://en.wikipedia.org/wiki/XHTML    
CONTENT;
        $answer->question_id = 61;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          display: inline-block adds an extra margin to your element.;I would recommend this;#element;display: table, /* IE8+ and all other modern browsers */    
CONTENT;
        $answer->question_id = 62;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Quote;Important: If you use the button element in an HTML form, different browsers will submit different values. Internet Explorer will submit the text between the and tags, while other browsers will submit the content of the value attribute. Use the input element to create buttons in an HTML form.;From: http://www.w3schools.com/tags/tag_button.asp;If I understand correctly, the answer is compatibility and input consistency from browser to browser 
CONTENT;
        $answer->question_id = 63;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          d = document.createElement('div');$(d).addClass(classname).html(text).appendTo($("#myDiv")) //main div.click(function ();$(this).remove();hide().slideToggle(300).delay(2500).slideToggle(300).queue(function ();$(this).remove()   
CONTENT;
        $answer->question_id = 64;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
        content;$("#destination").prepend($("#source"));If the div where you want to put your element is empty, or you want to replace it entirely;$("#element").html('... ');If you want to duplicate an element before any of the above;$("#destination").append($("#source").clone());// etc.    
CONTENT;
        $answer->question_id = 65;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          All the other solutions, including the top-voted one with vh are sub-optimal when compared to the flex model solution.;With the advent of the CSS flex model, solving the 100% height problem becomes very, very easy: use height: 100%, display: flex on the parent, and flex: 1 on the child elements. They'll automatically take up all the available space in their container.;Note how simple the markup and the CSS are. No table hacks or anything.;The flex model is supported by all major browsers as well as IE11+.;html, body;height: 100%;body;display: flex;left,.right;flex: 1;left;background: orange;right;background: cyan;left;right;Learn more about the flex model here.   
CONTENT;
        $answer->question_id = 66;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Why don’t you try mPDF version 2.0? I used it for creating PDF a document. It works fine.;Meanwhile mPDF is at version 5.7 and it is actively maintained, in contrast to HTML2PS/HTML2PDF;But keep in mind, that the documentation can really be hard to handle. For example, take a look at this page: http://mpdf1.com/manual/index.php?tid=151.;Very basic tasks around html to pdf, can be done with this library, but more complex tasks will take some time reading and "understanding" the documentation.    
CONTENT;
        $answer->question_id = 67;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Just a general tip. What I did to auto-tidy up my HTML, was install the package HTML_Tidy, and then add the following keybinding to the default settings (which I use);{ "keys": ["enter"], "command": "html_tidy" };this runs HTML Tidy with every enter. There may be drawbacks to this, I'm quite new to Sublime myself, but it seems to do what I want:)    
CONTENT;
        $answer->question_id = 68;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          since jQuery1.8, using $.parseHTML() to create elements is a better choice.;there are two benefits;1.if you use the old way, which may be something like $(string), jQuery will examine the string to make sure you want to select a html tag or create a new element. By using $.parseHTML(), you tell jQuery that you want to create a new element explicitly, so the performance may be a little better.;2.much more important thing is that you may suffer from cross site attack (more info) if you use the old way. if you have something like;var userInput = window.prompt("please enter selector");$(userInput).hide();a bad guy can input to tease you. fortunately, $.parseHTML() avoid this embarrassment for you;var a = $(' ');// a is [ ​ ​];var b = $.parseHTML(' ');// b is [ ​ ​];$(' ');// jQuery returns [ ​];$.parseHTML(' ');// jQuery returns [];However, please notice that a is a jQuery object while b is a html element;a.html('123');// [ ​123​ ​];b.html('123');// TypeError: Object [object HTMLDivElement] has no method 'html;$(b).html('123');// [ ​123​ ​]    
CONTENT;
        $answer->question_id = 69;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For reference and to add a simpler answer;Pure CSS:.vertical-align;position: relative;top: 50%;-webkit-transform: translateY(-50%);-ms-transform: translateY(-50%);transform: translateY(-50%);Or as a SASS/SCSS Mixin;@mixin vertical-align;position: relative;top: 50%;-webkit-transform: translateY(-50%);-ms-transform: translateY(-50%);transform: translateY(-50%);Use By:.class-to-center;@include vertical-align;** Update by Sebastian Ekström **;As a few people have pointed out, this method can cause elements to be blurry due to the element being placed on a “half pixel”. A solution for this is to set its parent element to preserve-3d. Like following:.parent-element;-webkit-transform-style: preserve-3d;-moz-transform-style: preserve-3d;transform-style: preserve-3d;** EDIT **;We live in 2015+ and flexbox is supported by every major modern browser.;It will be the way websites are made from here on out.;LEARN IT!    
CONTENT;
        $answer->question_id = 70;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Others have answered 'how' and quoted specifications. Here is the real story of 'why', after many hours digging into bug reports and mailing lists.;HTML 4;HTML 4 is based on SGML.;SGML has some shorttags, such as <BR//, text, <B/text/, or <OL;item ' instead (allowed by SGML), so that it is written as.;However, you cannot redefine tokens in HTML, so should mean >.;(Yes, the '>' should be part of content, and the tag is still not closed.);Obviously, this is incompatible with XHTML and will break many sites (by the time browsers were mature enough to care about this), so nobody implemented shorttags and the specification advises against them.;Effectively, all 'working' self-ended tags are tags with optional end tag on technically non-conformant parsers and are in fact invalid.;It was the W3C which came up with this hack to help transitioning to XHTML by making them HTML-compatible.;And 's end tag is not optional.;Self-ending' tags are a hack in HTML 4 and are meaningless.;HTML 5;HTML5 has five types of tags and only 'void' and 'foreign' tags are allowed to be self-closing.;Because is not void (it may have content) and is not foreign (like MathML or SVG), cannot be self-closed, regardless of how you use it.;But why? Can't they specify a special case or something?;HTML 5 aims to be backward-compatible with implementations of HTML 4 and XHTML 1.;It is not based on SGML or XML, in term of syntax it is mainly concerned with documenting and uniting the implementations.;(This is also why;and etc. are valid HTML 5 despite being invalid HTML4.);A self-closing is one of the tags where implementations used to differ.;It used to work in Chrome and Safari (and Opera, I heard), to my knowledge it never worked in Internet Explorer or Firefox.;This was discussed when HTML 5 was being drafted and got rejected because it breaks browser compatibility.;There were other proposals, but they didn't solve the compatibility problem either.;After the draft was released, WebKit updated the parser to not self-close and similar tags.;Self-closing does not happen in HTML 5 because of backward compatibility to HTML 4 and XHTML 1.;XHTML 1 / XHTML 5;When really served as XHTML, is really closed, as other answers have stated.;Except that the spec says it should have worked when served as HTML;XHTML Documents... may be labeled with the Internet Media Type "text/html" [RFC2854], as they are compatible with most HTML browsers.;So, what happened?;People asked Mozilla to let Firefox parse conforming documents as XHTML regardless of the specified content header (known as content sniffing).;Content sniffing was necessary because web hosters were not mature enough to serve the correct header and IE was good at it.;If the first browser war didn't stop with IE 6, XHTML may have been added to the list, too, but it did end. And IE 6 has a problem with XHTML.;In fact IE did not support the correct MIME type at all, forcing everyone to use text/html for XHTML because IE had major market share for a whole decade.;And also content sniffing can be really bad and people are saying it should be stopped.;Finally, it turns out that the W3C didn't mean XHTML to be sniffable: the document is both, HTML and XHTML, and Content-Type rules.;One can say they were standing firm on 'just follow our spec' and ignoring what was practical. A mistake that continued into later XHTML versions.;Anyway, this decision settled the matter for Firefox.;It was 7 years before Chrome was born, there was no other significant browser. Thus it was decided.;Specifying the doctype alone does not trigger XML parsing because of following specifications.    
CONTENT;
        $answer->question_id = 71;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I would also add a canonical link to help your SEO people   
CONTENT;
        $answer->question_id = 72;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Sorry but they are only in Unicode.;Big ones;U+25B2 (Black up-pointing triangle ▲);U+25BC (Black down-pointing triangle ▼);U+25C0 (Black left-pointing triangle ◀);U+25B6 (Black right-pointing triangle ▶);Big white ones;U+25B3 (White up-pointing triangle △);U+25BD (White down-pointing triangle ▽);U+25C1 (White left-pointing triangle ◁);U+25B7 (White right-pointing triangle ▷);There is also some smalller triangles;U+25B4 (Black up-pointing small triangle ▴);U+25C2 (Black left-pointing small triangle ◂);U+25BE (Black down-pointing small triangle ▾);U+25B8 (Black right-pointing small triangle ▸);Also some white ones;U+25C3 (White left-pointing small triangle ◃);U+25BF (White down-pointing small triangle ▿);U+25B9 (White right-pointing small triangle ▹);U+25B5 (White up-pointing small triangle ▵);There are also some "pointy" triangles. You can read more here in Wikipedia;http://en.wikipedia.org/wiki/Geometric_Shapes;But unfortunately, they are all Unicode instead of ASCII.;If you still want to use ASCII, then you can use an image file for it of just use ^ and v. (Just like the Google Maps in the mobile version this was referring to the ancient mobile Google Maps);As others also suggested, you can also create triangles with HTML, either with CSS borders or SVG shapes or even JavaScript canvases.;CSS;div;width: 0px;height: 0px;border-top: 10px solid black;border-left: 8px solid transparent;border-right: 8px solid transparent;border-bottom: none;SVG;JavaScript;var ctx = document.querySelector("canvas").getContext("2d");// do not use with() outside of this demo!;with(ctx);beginPath();moveTo(0,0);lineTo(16,0);lineTo(8,10);fill();endPath();Demo   
CONTENT;
        $answer->question_id = 73;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Browsers aren't always set to print background images by default, if you intend to have people print your page:);share  74
        744 Instead of using tables in the markup, you could use CSS tables.;Markup;hello;there;(Relevant) CSS;body;display:table;width:100%;div;display:table-row;div+ div;height:100%;FIDDLE1 and FIDDLE2;Some advantages of this method are;1) Less markup;2) Markup is more semantic than tables, because this is not tabular data.;3) Browser support is very good: IE8+, All modern browsers and mobile devices (caniuse);Just for completeness, here are the equivalent Html elements to css properties for the The CSS table model;table { display: table };tr { display: table-row };thead { display: table-header-group };tbody { display: table-row-group };tfoot { display: table-footer-group };col { display: table-column };colgroup { display: table-column-group };td, th { display: table-cell };caption { display: table-caption }   
CONTENT;
        $answer->question_id = 75;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          PDF Object is an excellent solution. See examples and download JavaScript here;http://pdfobject.com 
CONTENT;
        $answer->question_id = 76;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The largest inconsistency I've noticed when styling select dropdowns is Safari and Google Chrome rendering (Firefox is fully customizable through CSS). After some searching through obscure depths of the Internet I came across the following, which nearly completely resolves my qualms with WebKit;Safari and Google Chrome fix;select;-webkit-appearance: none;This does, however, remove the dropdown arrow. You can add a dropdown arrow using a nearby div with a background, negative margin or absolutely positioned over the select dropdown.;*More information and other variables are available in CSS property: -webkit-appearance.  
CONTENT;
        $answer->question_id = 77;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use;Click me;Unfortunately, this markup is no longer valid in HTML5 and will neither validate nor always work as potentially expected. Use another approach.    
CONTENT;
        $answer->question_id = 78;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use the hex code for a non-breaking space. Something like this:.breadcrumbs a:before;content: '>\00a0'  
CONTENT;
        $answer->question_id = 79;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Basically it is to allow to write a document that is both XHTML and HTML. The problem is that within XHTML, the XML parser will interpret the &, characters in the script tag and cause XML parsing error. So, you can write your JavaScript with entities, e.g.;if (a &&gt;b) alert('hello world');But this is impractical. The bigger problem is that if you read the page in HTML, the tag script is considered CDATA 'by default', and such JavaScript will not run. Therefore, if you want the same page to be OK both using XHTML and HTML parsers, you need to enclose the script tag in CDATA element in XHTML, but NOT to enclose it in HTML.;This trick marks the start of a CDATA element as a JavaScript comment, in HTML the JavaScript parser ignores the CDATA tag (it's a comment). In XHTML, the XML parser (which is run before the JavaScript) detects it and treats the rest until end of CDATA as CDATA.   
CONTENT;
        $answer->question_id = 80;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          See this duplicate question.;One item you're forgetting there is accessibility. Table-based layouts don't translate as well if you need to use a screen reader, for example. And if you do work for the government, supporting accessible browsers like screen readers may be required.;I also think you underestimate the impact of some of the things you mentioned in the question. For example, if you are both the designer and the programmer, you may not have a full appreciation of how well it separates presentation from content. But once you get into a shop where they are two distinct roles the advantages start to become clearer.;If you know what you're doing and have good tools, CSS really does have significant advantages over tables for layout. And while each item by itself may not justify abandoning tables, taken together it's generally worth it.;share  81
        751 Non-blocking script tags can be placed just about anywhere;async script will be executed asynchronously as soon as it is available;defer script is executed when the document has finished parsing;async defer script falls back to the defer behavior if async is not supported;Such scripts will be executed asynchronously/after document ready, which means you cannot do this;<!--;* might throw "jQuery is not defined" error;* defer will not work either;-->;Or this;<!--;* might issue "cannot write into document from an asynchronous script" warning;* defer will not work either;-->;Or this;<!--;* might throw "jQuery is not defined" error (no guarantee which script runs first);* defer will work in sane browsers;-->;Or this;<!--;* might not locate #header (script could fire before parser looks at the next line);* defer will work in sane browsers;-->;Having said that, asynchronous scripts offer these advantages;Parallel download of resources;Browser can download stylesheets, images and other scripts in parallel without waiting for a script to download and execute.;Source order independence;You can place the scripts inside head or body without worrying about blocking (useful if you are using a CMS). Execution order still matters though.;It is possible to circumvent the execution order issues by using external scripts that support callbacks. Many third party JavaScript APIs now support non-blocking execution. Here is an example of loading the Google Maps API asynchronously.  
CONTENT;
        $answer->question_id = 82;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          var $head = $("#eFormIFrame").contents().find("head");$head.append($(";{ rel: "stylesheet", href: url, type: "text/css" }   
CONTENT;
        $answer->question_id = 83;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You could just use a simple JavaScript regular expression to test for purely numeric characters;/^[0-9]+$/.test(input);This returns true if the input is numeric or false if not.;or for event keycode, simple use below;// Allow: backspace, delete, tab, escape, enter, ctrl+A and.;if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1;// Allow: Ctrl+A;(e.keyCode == 65 && e.ctrlKey === true);// Allow: home, end, left, right;(e.keyCode >= 35 && e.keyCode <= 39));// let it happen, don't do anything;return;var charValue = String.fromCharCode(e.keyCode), valid = /^[0-9]+$/.test(charValue);if (!valid);e.preventDefault()    
CONTENT;
        $answer->question_id = 84;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Rather than putting overflow:auto on the parent, put overflow:hidden;The first CSS I write for any webpage is always;div;overflow:hidden;Then I never have to worry about it.   
CONTENT;
        $answer->question_id = 85;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use CSS to hide the close button instead of JavaScript:.ui-dialog-titlebar-close;display: none  
CONTENT;
        $answer->question_id = 86;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This code detects any click event on the page and then hides the #CONTAINER element if and only if the element clicked was neither the #CONTAINER element nor one of its descendants.;$(document).on('click', function (e);if ($(e.target).closest("#CONTAINER").length === 0);$("#CONTAINER").hide()   
CONTENT;
        $answer->question_id = 87;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Here's my go at it. I ended up using it for my Lightbox clone. The main advantage of this solution is that the element will stay centered automatically even if the window is resized making it ideal for this sort of usage.;$.fn.center = function();this.css;position': 'fixed;left': '50%;top': '50%;this.css;margin-left': -this.outerWidth() / 2 + 'px;margin-top': -this.outerHeight() / 2 + 'px;return this 
CONTENT;
        $answer->question_id = 88;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You could get the array of elements by name the old fashioned way and pass that array to jQuery.;sandBox;note: the only time you would have a reason to use the "name" attribute should be for checkbox or radio inputs.;Or you could just add another class to the elements for selection.(This is what I would do);sandBox;data1;data2;data1;data2;data1;data2    
CONTENT;
        $answer->question_id = 89;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          enctype='multipart/form-data is an encoding type that allows files to be sent through a POST. Quite simply, without this encoding the files cannot be sent through POST.;If you want to allow a user to upload a file via a form, you must use this enctype.    
CONTENT;
        $answer->question_id = 90;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          // window.location;window.location.replace('http://www.example.com');window.location.assign('http://www.example.com');window.location.href = 'http://www.example.com;document.location.href = '/path;// window.history;window.history.back();window.history.go(-1);// window.navigate, ONLY for old versions of IE;window.navigate('top.jsp');// probably no bueno;self.location = 'http://www.example.com;top.location = 'http://www.example.com;// jQuery;$(location).attr('href','http://www.example.com');$(window).attr('location','http://www.example.com');$(location).prop('href', 'http://www.example.com')    
CONTENT;
        $answer->question_id = 91;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          None of these answers address what I understand to be the question, which is what I was searching for, "how do I handle items that have visibility: hidden?". Neither:visible nor:hidden will handle this, as they are both looking for display per the documentation. As far as I could determine, there is no selector to handle CSS visibility. Here is how I resolved it (standard jQuery selectors, there may be a more condensed syntax);$(".item").each(function();if ($(this).css("visibility") == "hidden");// handle non visible state;else;// handle visible state   
CONTENT;
        $answer->question_id = 92;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Can you describe the paradigm shift that is necessary?;Imperative vs Declarative;With jQuery you tell the DOM what needs to happen, step by step. With AngularJS you describe what results you want but not how to do it. More on this here. Also, check out Mark Rajcok's answer.;How do I architect and design client-side web apps differently?;AngularJS is an entire client-side framework that uses the MVC pattern (check out their graphical representation). It greatly focuses on separation of concerns.;What is the biggest difference? What should I stop doing/using, what should I start doing/using instead?;jQuery is a library;AngularJS is a beautiful client-side framework, highly testable, that combines tons of cool stuff such as MVC, dependency injection, data binding and much more.;It focuses on separation of concerns and testing (unit testing and end-to-end testing), which facilitates test-driven development.;The best way to start is going through their awesome tutorial. You can go through the steps in a couple of hours, however, in case you want to master the concepts behind the scenes, they include a myriad of reference for further reading.;Are there any server-side considerations/restrictions?;You may use it on existing applications where you are already using pure jQuery. However, if you want to fully take advantage of the AngularJS features you may consider coding the server side using a RESTful approach.;Doing so will allow you to leverage their resource factory, which creates an abstraction of your server side RESTful API and makes server-side calls (get, save, delete, etc.) incredibly easy.;share   93
        763 I am using this and this is working absolutely fine;$("#checkkBoxId").attr("checked")? alert("Checked"): alert("Unchecked");Note: If the checkbox is checked it will return true otherwise undefined, so better check for the "TRUE" value. 
CONTENT;
        $answer->question_id = 94;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can do;$('.myCheckbox').attr('checked',true) //Standards compliant;or;$("form #mycheckbox").attr('checked', true);If you have custom code in the onclick event for the checkbox that you want to fire, use this one instead;$("#mycheckbox").click();You can uncheck by removing the attribute entirely;$('.myCheckbox').removeAttr('checked');You can check all checkboxes like this;$(".myCheckbox").each(function();$("#mycheckbox").click() 
CONTENT;
        $answer->question_id = 95;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you're using promises, this answer is for you.;This means AngularJS, jQuery (with deferred), native XHR's replacement (fetch), EmberJS, BackboneJS's save or any node library that returns promises.;Your code should be something along the lines of this;function foo();var data;// or $.get(...).then, or request(...).then, or query(...).then;fetch("/echo/json").then(function(response);data = response.json();return data;var result = foo(), // result is always undefined no matter what.;Felix Kling did a fine job writing an answer for people using jQuery with callbacks for AJAX. I have an answer for native XHR. This answer is for generic usage of promises either on the frontend or backend.;The core issue;The JavaScript concurrency model in the browser and on the server with NodeJS/io.js is asynchronous and reactive.;Whenever you call a method that returns a promise, the then handlers are always executed asynchronously - that is, after the code below them that is not in a.then handler.;This means when you're returning data the then handler you've defined did not execute yet. This in turn means that the value you're returning has not been set to the correct value in time.;Here is a simple analogy for the issue;function getFive();var data;setTimeout(function(){ // set a timer for one second in the future;data = 5, // after a second, do this;1000);return data;document.body.innerHTML = getFive(), // `undefined` here and not 5;The value of data is undefined since the data = 5 part has not executed yet. It will likely execute in a second but by that time it is irrelevant to the returned value.;Since the operation did not happen yet (AJAX, server call, IO, timer) you're returning the value before the request got the chance to tell your code what that value is.;One possible solution to this problem is to code re-actively, telling your program what to do when the calculation completed. Promises actively enable this by being temporal (time-sensitive) in nature.;Quick recap on promises;A Promise is a value over time. Promises have state, they start as pending with no value and can settle to;fulfilled meaning that the computation completed successfully.;rejected meaning that the computation failed.;A promise can only change states once after which it will always stay at the same state forever. You can attach then handlers to promises to extract their value and handle errors. then handlers allow chaining of calls. Promises are created by using APIs that return them. For example, the more modern AJAX replacement fetch or jQuery's $.get return promises.;When we call.then on a promise and return something from it - we get a promise for the processed value. If we return another promise we'll get amazing things, but let's hold our horses.;With promises;Let's see how we can solve the above issue with promises. First, let's demonstrate our understanding of promise states from above by using the Promise constructor for creating a delay function;function delay(ms){ // takes amount of milliseconds;// returns a new promise;return new Promise(function(resolve, reject);setTimeout(function(){ // when the time is up;resolve(), // change the promise to the fulfilled state;ms);Now, after we converted setTimeout to use promises, we can use then to make it count;function delay(ms){ // takes amount of milliseconds;// returns a new promise;return new Promise(function(resolve, reject);setTimeout(function(){ // when the time is up;resolve(), // change the promise to the fulfilled state;ms);function getFive();// we're RETURNING the promise, remember, a promise is a wrapper over our value;return delay(100).then(function(){ // when the promise is ready;return 5, // return the value 5, promises are all about return values;// we _have_ to wrap it like this in the call site, we can't access the plain value;getFive().then(function(five);document.body.innerHTML = five;Basically, instead of returning a value which we can't do because of the concurrency model - we're returning a wrapper for a value that we can unwrap with then. It's like a box you can open with then.;Applying this;This stands the same for your original API call, you can;function foo();// RETURN the promise;return fetch("/echo/json").then(function(response);return response.json(), // process it inside the `then`;foo().then(function(response);// access the value inside the `then`;So this works just as well. We've learned we can't return values from already asynchronous calls but we can use promises and chain them to perform processing. We now know how to return the response from an asynchronous call.;ES2015 (ES6);ES6 introduces generators which are functions that can return in the middle and then resume the point they were at. This is typically useful for sequences, for example;function* foo(){ // notice the star, this is ES6 so new browsers/node/io only;yield 1;yield 2;while(true) yield 3;Is a function that returns an iterator over the sequence 1,2,3,3,3,3,.... which can be iterated. While this is interesting on its own and opens room for a lot of possibility there is one particular interesting case.;If the sequence we're producing is a sequence of actions rather than numbers - we can pause the function whenever an action is yielded and wait for it before we resume the function. So instead of a sequence of numbers, we need a sequence of future values - that is: promises.;This somewhat tricky but very powerful trick lets us write asynchronous code in a synchronous manner. There are several "runners" that do this for you, writing one is a short few lines of code but is beyond the scope of this answer. I'll be using Bluebird's Promise.coroutine here, but there are other wrappers like co or Q.async.;var foo = coroutine(function*();var data = yield fetch("/echo/json"), // notice the yield;// code here only executes _after_ the request is done;return data.json(), // data is defined;This method returns a promise itself, which we can consume from other coroutines. For example;var main = coroutine(function*();var bar = yield foo(), // wait our earlier coroutine, it returns a promise;// server call done here, code below executes when done;var baz = yield fetch("/api/users/"+bar.userid), // depends on foo's result;console.log(baz), // runs after both requests done;main();ES2016 (ES7);In ES7, this is further standardized, there are several proposals right now but in all of them you can await promise. This is just "sugar" (nicer syntax) for the ES6 proposal above by adding the async and await keywords. Making the above example;async function foo();var data = await fetch("/echo/json"), // notice the await;// code here only executes _after_ the request is done;return data.json(), // data is defined;It still returns a promise just the same:)    
CONTENT;
        $answer->question_id = 96;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Generally, your first option (preventDefault()) is the one to take, but you have to know what context you're in and what your goals are.;Fuel Your Coding has a great article on return false, vs event.preventDefault() vs event.stopPropagation() vs event.stopImmediatePropagation().    
CONTENT;
        $answer->question_id = 97;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I recommend using the Fine Uploader plugin for this purpose. Your JavaScript code would be;$(document).ready(function();$("#uploadbutton").jsupload;action: "addFile.do;onComplete: function(response);alert("server response: " + response)    
CONTENT;
        $answer->question_id = 98;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If your DIV tag is immediately followed by the IMG tag, you can also use;$(this).next() 
CONTENT;
        $answer->question_id = 99;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This should work;$("input[name='radioName']:checked").val();Note the "" usaged around the input:checked and not '' like the Peter J's solution  
CONTENT;
        $answer->question_id = 100;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use this;// if element exists;if($('selector').length){ //do something };// if element does not exist;if(!$('selector').length){ //do something }   
CONTENT;
        $answer->question_id = 101;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          What if you had a and a?;Such as;Foo;footer information;Then it would insert your new row in the footer - not to the body.;Hence the best solution is to include a tag and use.append, rather than.after.;$("#myTable > tbody").append(;row content ")  
CONTENT;
        $answer->question_id = 102;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          A property is in the DOM, an attribute is in the HTML that is parsed into the DOM.;Further detail;If you change an attribute, the change will be reflected in the DOM (sometimes with a different name).;Example: changing the class attribute of a tag will change the className property of that tag in the DOM;If you have no attribute on a tag, you still have the corresponding DOM property with an empty or default value.;Example: While your tag has no class attribute, the DOM property className does exist with a empty string value.;edit;If you change the one, the other will be changed by a controller, and vice versa.;This controller is not in jQuery, but in the browsers' native code.  
CONTENT;
        $answer->question_id = 103;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The original example;/Date(1224043200000)/;does not reflect the formatting used by WCF when sending dates via WCF REST using the built-in JSON serialization. (at least on.NET 3.5, SP1);I found the answer here helpful, but a slight edit to the regex is required, as it appears that the timezone GMT offset is being appended onto the number returned (since 1970) in WCF JSON.;In a WCF service I have;[OperationContract];[WebInvoke;RequestFormat = WebMessageFormat.Json;ResponseFormat = WebMessageFormat.Json;BodyStyle = WebMessageBodyStyle.WrappedRequest;ApptVisitLinkInfo GetCurrentLinkInfo(int appointmentsId);ApptVisitLinkInfo is defined simply;public class ApptVisitLinkInfo;string Field1 { get, set, };DateTime Field2 { get, set, }...;When "Field2" is returned as Json from the service the value is;/Date(1224043200000-0600)/;Notice the timezone offset included as part of the value.;The modified regex;/\/Date\((.*?)\)\//gi;It's slightly more eager and grabs everything between the parens, not just the first number. The resulting time sinze 1970, plus timezone offset can all be fed into the eval to get a date object.;The resulting line of JavaScript for the replace is;replace(/\/Date\((.*?)\)\//gi, "new Date($1)")  
CONTENT;
        $answer->question_id = 104;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Lots of ways will work, I suppose;window.location.reload();history.go(0);window.location.href=window.location.href  
CONTENT;
        $answer->question_id = 105;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you already have the dropdownlist available in a variable, this is what works for me;$("option:selected", myVar).text();The other answers on this question helped me, but ultimately the jQuery forum thread $(this + "option:selected").attr("rel") option selected is not working in IE helped the most.;Update: fixed the above link  
CONTENT;
        $answer->question_id = 106;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can put this somewhere global in your code;$.prototype.enable = function ();$.each(this, function (index, el);$(el).removeAttr('disabled');$.prototype.disable = function ();$.each(this, function (index, el);$(el).attr('disabled', 'disabled');And then you can write stuff like;$(".myInputs").enable();$("#otherInput").disable()  
CONTENT;
        $answer->question_id = 107;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          a;b;c;d;$('.a.b,.a.c').css('border', '2px solid yellow');//selects b and c  
CONTENT;
        $answer->question_id = 108;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The other solutions here didn't work for me so I had to use;if(!$(event.target).is('#foo'));// hide menu    
CONTENT;
        $answer->question_id = 109;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Save the calls you make in an array, then call xhr.abort() on each.;HUGE CAVEAT: You can abort a request, but that's only the client side. The server side could still be processing the request. If you are using something like PHP or ASP with session data, the session data is locked until the ajax has finished. So, to allow the user to continue browsing the website, you have to call session_write_close (). This saves the session and unlocks it so that other pages waiting to continue will proceed. Without this, several pages can be waiting for the lock to be removed. 
CONTENT;
        $answer->question_id = 110;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Check out the ScrollTo plugin. You can see the demo here.;I hope it helps.  
CONTENT;
        $answer->question_id = 111;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you need the hash parameters present in the URL, window.location.href may be a better choice.;window.location.pathname;=> /search;window.location.href;=> www.website.com/search#race_type=1 
CONTENT;
        $answer->question_id = 112;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          A fixed version of Tobias Cohen's solution. This one correctly handles falsy values like 0 and ''.;jQuery.fn.serializeObject = function();var arrayData, objectData;arrayData = this.serializeArray();objectData = {};$.each(arrayData, function();var value;if (this.value != null);value = this.value;else;value = ';if (objectData[this.name] != null);if (!objectData[this.name].push);objectData[this.name] = [objectData[this.name]];objectData[this.name].push(value);else;objectData[this.name] = value;return objectData;And a CoffeeScript version for your coding convenience;jQuery.fn.serializeObject = ->;arrayData = @serializeArray();objectData = {};$.each arrayData, ->;if @value?;value = @value;else;value = ';if objectData[@name]?;unless objectData[@name].push;objectData[@name] = [objectData[@name]];objectData[@name].push value;else;objectData[@name] = value;return objectData   
CONTENT;
        $answer->question_id = 113;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Poor man's solution;var checkLoad = function();document.readyState !== "complete"? setTimeout(checkLoad, 11): alert("loaded!");checkLoad();View Fiddle;Added this one, a bit better I guess, own scope, and non recursive;(function();var tId = setInterval(function();if (document.readyState == "complete") onComplete();11);function onComplete();clearInterval(tId);alert("loaded!");();View Fiddle 
CONTENT;
        $answer->question_id = 114;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I had the same problem with a webapp getting data from ASP.NET webservice;This worked for me;public WebService();HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache),...   
CONTENT;
        $answer->question_id = 115;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I haven't used it but you might want to try the jQuery plugin written by Mark Gibson;It adds the two functions: $.toJSON(value), $.parseJSON(json_str, [safe]). 
CONTENT;
        $answer->question_id = 116;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          As it is announced in jQuery 1.11.0/2.1.0 Beta 2 Released the source map comment will be removed so the issue will not appear in newer versions of jQuery.;Here is the official announcement;One of the changes we’ve made in this beta is to remove the sourcemap;comment. Sourcemaps have proven to be a very problematic and puzzling;thing to developers, generating scores of confused questions on forums;like StackOverflow and causing users to think jQuery itself was;broken.;Anyway, if you need to use a source map, it still be available;We’ll still be generating and distributing sourcemaps, but you will;need to add the appropriate sourcemap comment at the end of the;minified file if the browser does not support manually associating map;files (currently, none do). If you generate your own jQuery file using;the custom build process, the sourcemap comment will be present in the;minified file and the map is generated, you can either leave it in and;use sourcemaps or edit it out and ignore the map file entirely.;Here you can find more details about the changes.;Here you can find confirmation that with the jQuery 1.11.0/2.1.0 Released the source-map comment in the minified file is removed.  
CONTENT;
        $answer->question_id = 117;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          jQuery;var list = $("#selectList");$.each(items, function(index, item);list.append(new Option(item.text, item.value));pure javascript;var list = document.getElementById("selectList");for(var i in items);list.add(new Option(items[i].text, items[i].value))  
CONTENT;
        $answer->question_id = 118;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This worked perfectly for me, I was looking for a way to send two different values with options generated by MySQL, and the following is generic and dynamic;$(this).find("option:selected").text();As mentioned in one of the comments. With this I was able to create a dynamic function that works with all my selection boxes that I want to get both values, the option value and the text.;Few days ago I noticed that when updating the jQuery from 1.6 to 1.9 of the site I used this code, this stop working... probably was a conflict with another piece of code... anyway, the solution was to remove option from the find() call;$(this).find(":selected").text();That was my solution... use it only if you have any problem after updating your jQuery.  
CONTENT;
        $answer->question_id = 119;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          if you have modernizr.js embedded on your site, you can use the built-in yepnope.js to load your scripts asynchronously - among others jquery (with fallback).;Modernizr.load;load: '//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js;test: window.jQuery;nope: 'path/to/local/jquery-1.7.2.min.js;both: ['myscript.js', 'another-script.js'];complete: function ();MyApp.init();this loads jquery from the google-cdn. afterwards it's checked, if jquery was loaded successfully. if not ("nope"), the local version is loaded. also your personal scripts are loaded - the "both" indicates, that the load-process is iniated independently from the result of the test.;when all load-processes are complete, a function is executed, in the case 'MyApp.init'.;i personally prefer this way of asynchronous script loading. and as i rely on the feature-tests provided by modernizr when building a site, i have it embedded on the site anyway. so there's actually no overhead.   
CONTENT;
        $answer->question_id = 120;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Combining the above answers, it seems the most complete answer would be;if(typeof variable === 'undefined' || variable === null);// Do stuff;This should work for any variable that is either undeclared or declared and explicitly set to null or undefined. The boolean expression should evaluate to false for any declared variable that has an actual non-null value.  
CONTENT;
        $answer->question_id = 121;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Try to use.live() instead of.bind(), the.live() will bind.hover to your checkbox after the Ajax request executes.   
CONTENT;
        $answer->question_id = 122;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can use a plugin available here..;http://plugins.jquery.com/project/cookie;and then to write a cookie do;$.cookie("test", 1);to access the set cookie do;$.cookie("test");Raj   
CONTENT;
        $answer->question_id = 123;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The solution that was eventually implemented was to use a wrapper for the callback function of the Ajax call and in this wrapper check for the existence of a specific element on the returned HTML chunk. If the element was found then the wrapper executed a redirection. If not, the wrapper forwarded the call to the actual callback function.;For example, our wrapper function was something like;function cbWrapper(data, funct);if($("#myForm", data).size() > 0);top.location.href="login.htm",//redirection;else;funct(data);Then, when making the Ajax call we used something like;$.post("myAjaxHandler;param1: foo;param2: bar;function(data);cbWrapper(data, myActualCB);html;This worked for us because all Ajax calls always returned HTML inside a DIV element that we use to replace a piece of the page. Also, we only needed to redirect to the login page.   
CONTENT;
        $answer->question_id = 124;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Depending on whether you want to change all the identical links to something else or you want control over just the ones in a given section of the page or each one individually, you could do one of these.;Change all links to Google so they point to Google Maps;$("a[href='http://www.google.com/']").attr('href;http://maps.google.com/');To change links in a given section, add the container div's class to the selector. This example will change the Google link in the content, but not in the footer:...link to Google;in the content...;Links: Google;$(".content a[href='http://www.google.com/']").attr('href;http://maps.google.com/');To change individual links regardless of where they fall in the document, add an id to the link and then add that id to the selector. This example will change the second Google link in the content, but not the first one or the one in the footer:...link to Google;in the content......second link to Google;in the content...;Links: Google;$("a#changeme").attr('href;http://maps.google.com/')   
CONTENT;
        $answer->question_id = 125;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          maybe the unbind method will work for you;$("#myimage").unbind("click") 
CONTENT;
        $answer->question_id = 126;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You don't need jQuery to do this. A standard HTML tag will suffice...;blah blah blah;Click Here To Destroy The World!   
CONTENT;
        $answer->question_id = 127;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Windows load event fires when all the content on your page fully loaded including the DOM (document object model) content, asynchronous JavaScript, frames and images, you can also use body onload= both are same just window.onload = function(){} and are different ways of using the same event.;jQuery $document.ready function event executes a bit earlier than window.onload and called once the DOM(Document object model) is loaded on your page. It will not wait for the images, frames to get fully load.;Taken from the following article;how $document.ready() is different from window.onload() 
CONTENT;
        $answer->question_id = 128;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          All of these answers miss the point that doing an Ajax call with async:false will cause the browser to hang until the Ajax request completes. Using a flow control library will solve this problem without hanging up the browser. Here is an example with Frame.js;beforecreate: function(node,targetNode,type,to);Frame(function(next));jQuery.get('http://example.com/catalog/create/', next);Frame(function(next, response));alert(response);next();Frame.init()    
CONTENT;
        $answer->question_id = 129;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          jQuery Waypoints plugin goes very nice here.;$('.entry').waypoint(function();alert('You have scrolled to an entry.');There are some examples on the site of the plugin. 
CONTENT;
        $answer->question_id = 130;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I think the easiest way would be the following, but it won't work on Internet Explorer 8 (or earlier);var result = myArray.filter(function(v);return v.id === '45', // Filter out the appropriate one;[0].foo, // Get result and access the foo property    
CONTENT;
        $answer->question_id = 131;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Don’t Use jquery-latest.js;This file is no longer updated (it'll be on v1.11.1 forever). Furthermore it has a very short cache life, (wiping out the benefits of using a CDN) so you'd be better of selecting a version of jQuery instead.;More details on the jQuery blog;http://blog.jquery.com/2014/07/03/dont-use-jquery-latest-js/ 
CONTENT;
        $answer->question_id = 132;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Every answer here covers only part of the problem.;In fact, there are four different query parts which we can add to it dynamically;a string;a number;an identifier;a syntax keyword.;and prepared statements covers only 2 of them;But sometimes we have to make our query even more dynamic, adding operators or identifiers as well.;So, we will need different protection techniques.;In general, such a protection approach is based on whitelisting.;In this case every dynamic parameter should be hardcoded in your script and chosen from that set.;For example, to do dynamic ordering;$orders = array("name","price","qty"), //field names;$key = array_search($_GET['sort'],$orders)), // see if we have such a name;$orderby = $orders[$key], //if not, first one will be set automatically. smart enuf:);$query = "SELECT * FROM `table` ORDER BY $orderby", //value is safe;However, there is another way to secure identifiers - escaping. As long as you have an identifier quoted, you can escape backticks inside by doubling them.;As a further step we can borrow a truly brilliant idea of using some placeholder (a proxy to represent the actual value in the query) from the prepared statements and invent a placeholder of another type - an identifier placeholder.;So, to make long story short: it's a placeholder, not prepared statement can be considered as a silver bullet.;So, a general recommendation may be phrased as;As long as you are adding dynamic parts to the query using placeholders (and these placeholders properly processed of course), you can be sure that your query is safe.;Still there is an issue with SQL syntax keywords (such as AND, DESC and such) but white-listing seems the only approach in this case.;Update;Although there is a general agreement on the best practices regarding SQL injection protection, there are still many bad practices as well. And some of them too deeply rooted in the minds of PHP users. For instance, on this very page there are (although invisible to most visitors) more than 80 deleted answers - all removed by the community due to bad quality or promoting bad and outdated practices. Worse yet, some of bad answers aren't deleted but rather prospering.;For example, there(1) are(2) still(3) many(4) answers(5), including the second most upvoted answer suggesting you manual string escaping - an outdated approach that is proven to be insecure.;Or there is a slightly better answer that suggests just another method of string formatting and even boasts it as ultimate panacea. While of course it is not. This method is no better than regular string formatting yet it keeps all its drawbacks: it is applicable to strings only and, as any other manual formatting, it's essentially optional, non-obligatory measure, prone to human error of any sort.;I think that all this because of one very old superstition, supported by such authorities like [OWASP] https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet#Defense_Option_4:_Escaping_All_User_Supplied_Input) or PHP manual, which proclaims equality between whatever "escaping" and protection from SQL injections.;Despite of what PHP manual said for ages, *_escape_string by no means makes data safe, and never has been intended to. Beside of being useless for any SQL part other than string, manual escaping is wrong because it is manual as opposite to automated.;And OWASP makes it even worse, stressing on escaping user input which is an utter nonsense: there should be no such words in the context of injection protection. Every variable is potentially dangerous - no matter of the source! Or, in other words - every variable have to be properly formatted to be put into query - no matter of the source again. It's destination that matters. The moment a developer starts to separate the sheep from the goats (thinking whether some particular variable is "safe" or not) he does his first step to disaster. Not to mention that even the wording suggests bulk escaping at the entry point, resembling the very magic quotes feature - already despised, deprecated and removed.;So, unlike whatever "escaping", prepared statements is the measure that indeed protects from SQL injection (when applicable).;If you're still not convinced, here is a step-by step explanation I wrote, The Hitchhiker's Guide to SQL Injection prevention, where I explained all these matters in detail, and even compiled a section entirely dedicated to bad practices and their disclosure.;share  133
        803 syntax name description;x == y Equality True if x and y have the same key/value pairs;x != y Inequality True if x is not equal to y;x === y Identity True if x and y have the same key/value pairs in;the same order and of the same types;x !== y Non-identity True if x is not identical to y;++ x Pre-increment Increments x by one, then returns x;x ++ Post-increment Returns x, then increments x by one;-- x Pre-decrement Decrements x by one, then returns x;x -- Post-decrement Returns x, then decrements x by one;x and y And True if both x and y are true x=6 y=3;(x 1) returns true;x && y And True if both x and y are true x=6 y=3;(x 1) returns true;a. b Concatenation Concatenate two strings: "Hi". "Ha    
CONTENT;
        $answer->question_id = 134;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It depends on what you mean by best;If you're talking about catching every valid email address use the following;(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t];+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?;\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?;?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?;\t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\0;31]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\;(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+;(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?;(?:\r\n)?[ \t])*))*|(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z;(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n);?[ \t])*)*\<(?:(?:\r\n)?[ \t])*(?:@(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\;r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?;\t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n);?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t];*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?;\t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*;(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t];+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*);*:(?:(?:\r\n)?[ \t])*)?(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+;\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r;\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?;\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t;*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031;+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\];?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?;(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?;\r\n)?[ \t])*))*\>(?:(?:\r\n)?[ \t])*)|(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?;(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?;[ \t]))*"(?:(?:\r\n)?[ \t])*)*:(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()<>@,,:\\".\[\];\000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\];\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>;@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|;(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t];*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?;[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\;\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?:[^()<>@,,:\\".\[\] \000-;\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.;?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)*\<(?:(?:\r\n)?[ \t])*(?:@(?:[^()<>;\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\;^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\;\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\;[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\;r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\];\000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\];\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?(?:[^()<>@,,:\\".\[\] \0;00-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>;\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\]]))|"(?;[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*;(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".;\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?;^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\];\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\>(?:(?:\r\n)?[ \t])*)(?:,\s*;?:(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\;.\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?;?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=;\["()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t;*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t;+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?;\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+;\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?;[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".\[\;(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)*\<(?:(?:\r\n);?[ \t])*(?:@(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[;()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n);?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>;@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?;\t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>;\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t];*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?;(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\["()<>@,,:\\".;\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t])*)(?:\.(?:(?;\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\;()<>@,,:\\".\[\]]))|"(?:[^\"\r\\]|\\.|(?:(?:\r\n)?[ \t]))*"(?:(?:\r\n)?[ \t]);*))*@(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]);+|\Z|(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()<>@,,:\\".\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z;(?=[\["()<>@,,:\\".\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\>(?;?:\r\n)?[ \t])*))*)?,\s*);(http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html);If you're looking for something simpler but that will catch most valid email addresses try something like;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$;EDIT;From the link;This regular expression will only validate addresses that have had any comments stripped and replaced with whitespace (this is done by the module).    
CONTENT;
        $answer->question_id = 135;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Here is a little utility function that is useful in situations like this;// returns true if $needle is a substring of $haystack;function contains($needle, $haystack);return strpos($haystack, $needle) !== false   
CONTENT;
        $answer->question_id = 136;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          phpQuery and QueryPath are extremely similar in replicating the fluent jQuery API. That's also why they're two of the easiest approaches to properly parse HTML in PHP.;Examples for QueryPath;Basically you first create a queryable DOM tree from an HTML string;$qp = qp(;title..."), // or give filename or URL;The resulting object contains a complete tree representation of the HTML document. It can be traversed using DOM methods. But the common approach is to use CSS selectors like in jQuery;$qp->find("div.classname")->children()->...;foreach ($qp->find("p img") as $img);print qp($img)->attr("src");Mostly you want to use simple #id and.class or DIV tag selectors for ->find(). But you can also use XPath statements, which sometimes are faster. Also typical jQuery methods like ->children() and ->text() and particularly ->attr() simplify extracting the right HTML snippets. (And already have their SGML entities decoded.);$qp->xpath("//div/p[1]"), // get first paragraph in a div;QueryPath also allows injecting new tags into the stream (->append), and later output and prettify an updated document (->writeHTML). It can not only parse malformed HTML, but also various XML dialects (with namespaces), and even extract data from HTML microformats (XFN, vCard).;$qp->find("a[target=_blank]")->toggleClass("usability-blunder"),.;phpQuery or QueryPath?;Generally QueryPath is better suited for manipulation of documents. While phpQuery also implements some pseudo AJAX methods (just HTTP requests) to more closely resemble jQuery. It is said that phpQuery is often faster than QueryPath (because of fewer overall features).;For further information on the differences see this comparison on the wayback machine from tagbyte.org. (Original source went missing, so here's an internet archive link. Yes, you can still locate missing pages, people.);And here's a comprehensive QueryPath introduction.;Advantages;Simplicity and Reliability;Simple to use alternatives ->find("a img, a object, div a");Proper data unescaping (in comparison to regular expression grepping) 
CONTENT;
        $answer->question_id = 137;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Ease of use;The analytic and synthetic reasons were already mentioned. For newcomers there's a more significant incentive to stop using the dated mysql_ functions.;Contemporary database APIs are just easier to use.;It's mostly the bound parameters which can simplify code. And with excellent tutorials (as seen above) the transition to PDO isn't overly arduous.;Rewriting a larger code base at once however takes time. Raison d'être for this intermediate alternative;Equivalent pdo_* functions in place of mysql_*;Using you can switch from the old mysql_ functions with minimal effort. It adds pdo_ function wrappers which replace their mysql_ counterparts.;Simply include_once("pdo_mysql.php"), in each invocation script that has to interact with the database.;Remove the mysql_ function prefix everywhere and replace it with pdo_.;mysql_ connect() becomes pdo_ connect();mysql_ query() becomes pdo_ query();mysql_ num_rows() becomes pdo_ num_rows();mysql_ insert_id() becomes pdo_ insert_id();mysql_ fetch_array() becomes pdo_ fetch_array();mysql_ fetch_assoc() becomes pdo_ fetch_assoc();mysql_ real_escape_string() becomes pdo_ real_escape_string();and so on...;Your code will work alike and still mostly look the same;include_once("pdo_mysql.php");pdo_connect("localhost", "usrABC", "pw1234567");pdo_select_db("test");$result = pdo_query("SELECT title, html FROM pages");while ($row = pdo_fetch_assoc($result));print "$row[title] - $row[html];Et voilà.;Your code is using PDO.;Now it's time to actually utilize it.;Bound parameters can be easy to use;You just need a less unwieldy API.;pdo_query() adds very facile support for bound parameters. Converting old code is straightforward;Move your variables out of the SQL string.;Add them as comma delimited function parameters to pdo_query().;Place question marks? as placeholders where the variables were before.;Get rid of ' single quotes that previously enclosed string values/variables.;The advantage becomes more obvious for lengthier code.;Often string variables aren't just interpolated into SQL, but concatenated with escaping calls in between.;pdo_query("SELECT id, links, html, title, user, date FROM articles;WHERE title='". pdo_real_escape_string($title). "' OR id='".;pdo_real_escape_string($title). "' AND user <> '".;pdo_real_escape_string($root). "' ORDER BY date");With? placeholders applied you don't have to bother with that;pdo_query("SELECT id, links, html, title, user, date FROM articles;WHERE title=? OR id=? AND user<>? ORDER BY date", $title, $id, $root);Remember that pdo_* still allows either or.;Just don't escape a variable and bind it in the same query.;The placeholder feature is provided by the real PDO behind it.;Thus also allowed:named placeholder lists later.;More importantly you can pass $_REQUEST[] variables safely behind any query. When submitted fields match the database structure exactly it's even shorter;pdo_query("INSERT INTO pages VALUES (?,?,?,?,?)", $_POST);So much simplicity. But let's get back to some more rewriting advises and technical reasons on why you may want to get rid of mysql_ and escaping.;Fix or remove any oldschool sanitize() function;Once you have converted all mysql_ calls to pdo_query with bound params, remove all redundant pdo_real_escape_string calls.;In particular you should fix any sanitize or clean or filterThis or clean_data functions as advertised by dated tutorials in one form or the other;function sanitize($str);return trim(strip_tags(htmlentities(pdo_real_escape_string($str))));Most glaring bug here is the lack of documentation. More significantly the order of filtering was in exactly the wrong order.;Correct order would have been: deprecatedly stripslashes as the innermost call, then trim, afterwards strip_tags, htmlentities for output context, and only lastly the _escape_string as its application should directly preceed the SQL intersparsing.;But as first step just get rid of the _real_escape_string call.;You may have to keep the rest of your sanitize() function for now if your database and application flow expect HTML-context-safe strings. Add a comment that it applies only HTML escaping henceforth.;String/value handling is delegated to PDO and its parameterized statements.;If there was any mention of stripslashes() in your sanitize function, it may indicate a higher level oversight.;That was commonly there to undo damage (double escaping) from the deprecated magic_quotes. Which however is best fixed centrally, not string by string.;Use one of the userland reversal approaches. Then remove the stripslashes() in the sanitize function.;Historic note on magic_quotes. That feature is rightly deprecated. It's often incorrectly portrayed as failed security feature however. But magic_quotes are as much a failed security feature as tennis balls have failed as nutrition source. That simply wasn't their purpose.;The original implementation in PHP2/FI introduced it explicitly with just " quotes will be automatically escaped making it easier to pass form data directly to msql queries ". Notably it was accidentially safe to use with mSQL, as that supported ASCII only.;Then PHP3/Zend reintroduced magic_quotes for MySQL and misdocumented it. But originally it was just a convenience feature, not intend for security.;How prepared statements differ;When you scramble string variables into the SQL queries, it doesn't just get more intricate for you to follow. It's also extraneous effort for MySQL to segregate code and data again.;SQL injections simply are when data bleeds into code context. A database server can't later spot where PHP originally glued variables inbetween query clauses.;With bound parameters you separate SQL code and SQL-context values in your PHP code. But it doesn't get shuffled up again behind the scenes (except with PDO::EMULATE_PREPARES). Your database receives the unvaried SQL commands and 1:1 variable values.;While this answer stresses that you should care about the readability advantages of dropping mysql_. There's occasionally also a performance advantage (repeated INSERTs with just differing values) due to this visible and technical data/code separation.;Beware that parameter binding still isn't a magic one-stop solution against all SQL injections. It handles the most common use for data/values. But can't whitelist column name / table identifiers, help with dynamic clause construction, or just plain array value lists.;Hybrid PDO use;These pdo_* wrapper functions make a coding-friendly stop-gap API. (It's pretty much what MYSQLI could have been if it wasn't for the idiosyncratic function signature shift). They also expose the real PDO at most times.;Rewriting doesn't have to stop at using the new pdo_ function names. You could one by one transition each pdo_query() into a plain $pdo->prepare()->execute() call.;It's best to start at simplifying again however. For example the common result fetching;$result = pdo_query("SELECT * FROM tbl");while ($row = pdo_fetch_assoc($result));Can be replaced with just an foreach iteration;foreach ($result as $row);Or better yet a direct and complete array retrieval;$result->fetchAll();You'll get more helpful warnings in most cases than PDO or mysql_ usually provide after failed queries.;Other options;So this hopefully visualized some practical reasons and a worthwile pathway to drop mysql_.;Just switching to pdo doesn't quite cut it. pdo_query() is also just a frontend onto it.;Unless you also introduce parameter binding or can utilize something else from the nicer API, it's a pointless switch. I hope it's portrayed simple enough to not further the discouragement to newcomers. (Education usually works better than prohibition.);While it qualifies for the simplest-thing-that-could-possibly-work category, it's also still very experimental code. I just wrote it over the weekend. There's a plethora of alternatives however. Just google for PHP database abstraction and browse a little. There always have been and will be lots of excellent libraries for such tasks.;If you want to simplify your database interaction further, mappers like Paris/Idiorm are worth a try. Just like nobody uses the bland DOM in JavaScript anymore, you don't have to babysit a raw database interface nowadays.    
CONTENT;
        $answer->question_id = 138;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          To really understand what we're talking about when we talk about self versus $this, we need to actually dig into what's going on at a conceptual and a practical level. I don't really feel any of the answers do this appropriately, so here's my attempt.;Let's start off by talking about what a class and an object is.;Classes And Objects, Conceptually;So, what is a class? A lot of people define it as a blueprint or a template for an object. In fact, you can read more About Classes In PHP Here. And to some extent that's what it really is. Let's look at a class;class Person;public $name = 'my name;public function sayHello();echo "Hello;As you can tell, there is a property on that class called $name and a method (function) called sayHello().;It's very important to note that the class is a static structure. Which means that the class Person, once defined, is always the same everywhere you look at it.;An object on the other hand is what's called an instance of a Class. What that means is that we take the "blueprint" of the class, and use it to make a dynamic copy. This copy is now specifically tied to the variable it's stored in. Therefore, any changes to an instance is local to that instance.;$bob = new Person;$adam = new Person;$bob->name = 'Bob;echo $adam->name, // "my name;We create new instances of a class using the new operator.;Therefore, we say that a Class is a global structure, and an Object is a local structure. Don't worry about that funny -> syntax, we're going to go into that in a little bit.;One other thing we should talk about, is that we can check if an instance is an instanceof a particular class: $bob instanceof Person which returns a boolean if the $bob instance was made using the Person class, or a child of Person.;Defining State;So let's dig a bit into what a class actually contains. There are 5 types of "things" that a class contains;Properties - Think of these as variables that each instance will contain.;class Foo;public $bar = 1;Static Properties - Think of these as variables that are shared at the class level. Meaning that they are never copied by each instance.;class Foo;public static $bar = 1;Methods - These are functions which each instance will contain (and operate on instances).;class Foo;public function bar() {};Static Methods - These are functions which are shared across the entire class. They do not operate on instances, but instead on the static properties only.;class Foo;public static function bar() {};Constants - Class resolved constants. Not going any deeper here, but adding for completeness;class Foo;const BAR = 1;So basically, we're storing information on the class and object container using "hints" about static which identify whether the information is shared (and hence static) or not (and hence dynamic).;State and Methods;Inside of a method, an object's instance is represented by the $this variable. The current state of that object is there, and mutating (changing) any property will result in a change to that instance (but not others).;If a method is called statically, the $this variable is not defined. This is because there's no instance associated with a static call.;The interesting thing here is how static calls are made. So let's talk about how we access the state;Accessing State;So now that we have stored that state, we need to access it. This can get a bit tricky (or way more than a bit), so let's split this into two viewpoints: from outside of an instance/class (say from a normal function call, or from the global scope), and inside of an instance/class (from within a method on the object).;From Outside Of An Instance/Class;From the outside of an instance/class, our rules are quite simple and predictable. We have two operators, and each tells us immediately if we're dealing with an instance or a class static;-> - object-operator - This is always used when we're accessing an instance.;$bob = new Person;echo $bob->name;It's important to note that calling Person->foo does not make sense (since Person is a class, not an instance). Therefore, that is a parse error.;- scope-resolution-operator - This is always used to access a Class static property or method.;echo Foo::bar();Additionally, we can call a static method on an object in the same way;echo $foo::bar();It's extremely important to note that when we do this from outside, the object's instance is hidden from the bar() method. Meaning that it's the exact same as running;$class = get_class($foo);$class::bar();Therefore, $this is not defined in the static call.;From Inside Of An Instance/Class;Things change a bit here. The same operators are used, but their meaning becomes significantly blurred.;The object-operator -> is still used to make calls to the object's instance state.;class Foo;public $a = 1;public function bar();return $this->a;Calling the bar() method on $foo (an instance of Foo) using the object-operator: $foo->bar() will result in the instance's version of $a.;So that's how we expect.;The meaning of the:: operator though changes. It depends on the context of the call to the current function;Within a static context;Within a static context, any calls made using:: will also be static. Let's look at an example;class Foo;public function bar();return Foo::baz();public function baz();return isset($this);Calling Foo::bar() will call the baz() method statically, and hence $this will not be populated. It's worth noting that in recent versions of PHP (5.3+) this will trigger an E_STRICT error, because we're calling non-static methods statically.;Within an instance context;Within an instance context on the other hand, calls made using:: depend on the receiver of the call (the method we're calling). If the method is defined as static, then it will use a static call. If it's not, it will forward the instance information.;So, looking at the above code, calling $foo->bar() will return true, since the "static" call happens inside of an instance context.;Make sense? Didn't think so. It's confusing.;Short-Cut Keywords;Because tying everything together using class names is rather dirty, PHP provides 3 basic "shortcut" keywords to make scope resolving easier.;self - This refers to the current class name. So self::baz() is the same as Foo::baz() within the Foo class (any method on it).;parent - This refers to the parent of the current class.;static - This refers to the called class. Thanks to inheritance, child classes can override methods and static properties. So calling them using static instead of a class name allows us to resolve where the call came from, rather than the current level.;Examples;The easiest way to understand this is to start looking at some examples. Let's pick a class;class Person;public static $number = 0;public $id = 0;public function __construct();self::$number++;$this->id = self::$number;public $name = ";public function getName();return $this->name;public function getId();return $this->id;class Child extends Person;public $age = 0;public function __construct($age);$this->age = $age;parent::__construct();public function getName();return 'child: '. parent::getName();Now, we're also looking at inheritance here. Ignore for a moment that this is a bad object model, but let's look at what happens when we play with this;$bob = new Person;$bob->name = "Bob;$adam = new Person;$adam->name = "Adam;$billy = new Child;$billy->name = "Billy;var_dump($bob->getId()), // 1;var_dump($adam->getId()), // 2;var_dump($billy->getId()), // 3;So the ID counter is shared across both instances and the children (because we're using self to access it. If we used static, we could override it in a child class).;var_dump($bob->getName()), // Bob;var_dump($adam->getName()), // Adam;var_dump($billy->getName()), // child: Billy;Note that we're executing the Person::getName() instance method every time. But we're using the parent::getName() to do it in one of the cases (the child case). This is what makes this approach powerful.;Word Of Caution #1;Note that the calling context is what determines if an instance is used. Therefore;class Foo;public function isFoo();return $this instanceof Foo;Is not always true.;class Bar;public function doSomething();return Foo::isFoo();$b = new Bar;var_dump($b->doSomething()), // bool(false);Now it is really weird here. We're calling a different class, but the $this that gets passed to the Foo::isFoo() method is the instance of $bar.;This can cause all sorts of bugs and conceptual WTF-ery. So I'd highly suggest avoiding the:: operator from within instance methods on anything except those three virtual "short-cut" keywords (static, self, and parent).;Word Of Caution #2;Note that static methods and properties are shared by everyone. That makes them basically global variables. With all the same problems that come with globals. So I would be really hesitant to store information in static methods/properties unless you're comfortable with it being truly global.;Word Of Caution #3;In general you'll want to use what's known as Late-Static-Binding by using static instead of self. But note that they are not the same thing, so saying "always use static instead of self is really short-sighted. Instead, stop and think about the call you want to make and think if you want child classes to be able to override that static resolved call.;TL/DR;Too bad, go back and read it. It may be too long, but it's that long because this is a complex topic;TL/DR #2;Ok, fine. In short, self is used to reference the current class name within a class, where as $this refers to the current object instance. Note that self is a copy/paste short-cut. You can safely replace it with your class name, and it'll work fine. But $this is a dynamic variable that can't be determined ahead of time (and may not even be your class).;TL/DR #3;If the object-operator is used (->), then you always know you're dealing with an instance. If the scope-resolution-operator is used (::), you need more information about the context (are we in an object-context already? Are we outside of an object? etc).   
CONTENT;
        $answer->question_id = 139;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In YouTube API V3 we can also use these URLs for obtaining thumbnails... They are classified based on their quality.;https://i1.ytimg.com/vi/ /default.jpg - default;https://i1.ytimg.com/vi/ /mqdefault.jpg - medium;https://i1.ytimg.com/vi/ /hqdefault.jpg - high;https://i1.ytimg.com/vi/ /sddefault.jpg - standard;And for the maximum resolution..;https://i1.ytimg.com/vi/ /maxresdefault.jpg;One advantage of these URLs over the URLs in the first answer is that these URLs don't get blocked by firewalls.   
CONTENT;
        $answer->question_id = 140;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Don't give up. The weapon you can use to convince your clients is non-repudiability. If you can reconstruct user passwords via any mechanism, you have given their clients a legal non-repudiation mechanism and they can repudiate any transaction that depends on that password, because there is no way the supplier can prove that they didn't reconstruct the password and put the transaction through themselves. If passwords are correctly stored as digests rather than ciphertext, this is impossible, ergo either the end-client executed the transaction himself or breached his duty of care w.r.t. the password. In either case that leaves the liability squarely with him. I've worked on cases where that would amount to hundreds of millions of dollars. Not something you want to get wrong.    
CONTENT;
        $answer->question_id = 141;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          $key = array_search($needle,$array);if($key!==false);unset($array[$key])    
CONTENT;
        $answer->question_id = 142;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Explanation (quote from php.net);The first form loops over the array given by array_expression. On each;iteration, the value of the current element is assigned to $value and;the internal array pointer is advanced by one (so on the next;iteration, you'll be looking at the next element).;So, in your first example you only have one element in the array, and when the pointer is moved the next element does not exist, so after you add new element foreach ends because it already "decided" that it it as the last element.;In your second example, you start with two elements, and foreach loop is not at the last element so it evaluates the array on the next iteration and thus realises that there is new element in the array.;I believe that this is all consequence of On each iteration part of the explanation in the documentation, which probably means that foreach does all logic before it calls the code in {}.;Test case;If you run this;1;bar' => 2;foreach($array as $k=>&$v);$array['baz']=3;echo $v.";print_r($array);?>;You will get this output;1 2 3 Array;[foo] => 1;[bar] => 2;[baz] => 3;Which means that it accepted the modification and went through it because it was modified "in time". But if you do this;1;bar' => 2;foreach($array as $k=>&$v);if ($k=='bar');$array['baz']=3;echo $v.";print_r($array);?>;You will get;1 2 Array;[foo] => 1;[bar] => 2;[baz] => 3;Which means that array was modified, but since we modified it when the foreach already was at the last element of the array, it "decided" not to loop anymore, and even though we added new element, we added it "too late" and it was not looped through.;Detailed explanation can be read at How foreach actually works which explains the internals behind this behaviour.   
CONTENT;
        $answer->question_id = 143;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can create a one-way hash with bcrypt using PHP's crypt() function and passing in an appropriate Blowfish salt. The most important of the whole equation is that A) the algorithm hasn't been compromised and B) you properly salt each password. Don't use an application-wide salt, that opens up your entire application to attack from a single set of Rainbow tables.;PHP - Crypt Function 
CONTENT;
        $answer->question_id = 144;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          All answers so far seem to do loads of unnecessary work, strlen calculations, string allocations (substr), etc. The 'strpos' and 'stripos' functions return the index of the first occurrence of $needle in $haystack;function startsWith($haystack,$needle,$case=true);if ($case);return strpos($haystack, $needle, 0) === 0;return stripos($haystack, $needle, 0) === 0;function endsWith($haystack,$needle,$case=true);$expectedPosition = strlen($haystack) - strlen($needle);if ($case);return strrpos($haystack, $needle, 0) === $expectedPosition;return strripos($haystack, $needle, 0) === $expectedPosition   
CONTENT;
        $answer->question_id = 145;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Instead of the below line;//header("Location:".ADMIN_URL."/index.php");write;echo(" ");or;?> <?php;It'll definitely solve your problem.;I faced the same problem but I solved through writing header location in the above way.;share   146
        816 Though the question has been answered, I just want to reiterate that salts used for hashing should be random and not like email address as suggested in first answer.;More explanation is available at- http://www.pivotalsecurity.com/blog/password-hashing-salt-should-it-be-random/;Recently I had a discussion whether password hashes salted with random;bits are more secure than the one salted with guessable or known;salts. Let’s see: If the system storing password is compromised as;well as the system which stores the random salt, the attacker will;have access to hash as well as salt, so whether the salt is random or;not, doesn’t matter. The attacker will can generate pre-computed;rainbow tables to crack the hash. Here comes the interesting part- it;is not so trivial to generate pre-computed tables. Let us take example;of WPA security model. Your WPA password is actually never sent to;Wireless Access Point. Instead, it is hashed with your SSID (the;network name- like Linksys, Dlink etc). A very good explanation of how;this works is here. In order to retrieve password from hash, you will;need to know the password as well as salt (network name). Church of;Wifi has already pre-computed hash tables which has top 1000 SSIDs and;about 1 million passwords. The size is of all tables is about 40 GB.;As you can read on their site, someone used 15 FGPA arrays for 3 days;to generate these tables. Assuming victim is using the SSID as;“a387csf3″ and password as “123456″, will it be cracked by those;tables? No!.. it cannot. Even if the password is weak, the tables;don’t have hashes for SSID a387csf3. This is the beauty of having;random salt. It will deter crackers who thrive upon pre-computed;tables. Can it stop a determined hacker? Probably not. But using;random salts does provide additional layer of defense. While we are on;this topic, let us discuss additional advantage of storing random;salts on a separate system. Scenario #1: Password hashes are stored;on system X and salt values used for hashing are stored on system Y.;These salt values are guessable or known (e.g. username) Scenario#2;Password hashes are stored on system X and salt values used for;hashing are stored on system Y. These salt values are random. In case;system X has been compromised, as you can guess, there is a huge;advantage of using random salt on a separate system (Scenario #2).;The attacker will need to guess addition values to be able to crack;hashes. If a 32 bit salt is used, 2^32= 4,294,967,296 (about 4.2;billion) iterations will can be required for each password guessed.  
CONTENT;
        $answer->question_id = 147;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I use interface instead of class;interface DaysOfWeek;const Sunday = 0;const Monday = 1;// etc.;var $today = DaysOfWeek::Sunday 
CONTENT;
        $answer->question_id = 148;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          PHP has the new nice filter_input functions now, that for instance liberate you from finding 'the ultimate e-mail regex' now that there is a built-in FILTER_VALIDATE_EMAIL type;My own filter class (uses javascript to highlight faulty fields) can be initiated by either an ajax request or normal form post. (see the example below);/**;* Pork.FormValidator;* Validates arrays or properties by setting up simple arrays.;* Note that some of the regexes are for dutch input!;* Example;*;* $validations = array('name' => 'anything','email' => 'email','alias' => 'anything','pwd'=>'anything','gsm' => 'phone','birthdate' => 'date');* $required = array('name', 'email', 'alias', 'pwd');* $sanatize = array('alias');*;* $validator = new FormValidator($validations, $required, $sanatize);*;* if($validator->validate($_POST));*;* $_POST = $validator->sanatize($_POST);* // now do your saving, $_POST has been sanatized.;* die($validator->getScript()." ");* };* else;*;* die($validator->getScript());* };*;* To validate just one element;* $validated = new FormValidator()->validate('blah@bla.', 'email');*;* To sanatize just one element;* $sanatized = new FormValidator()->sanatize(' blah ', 'string');*;* @package pork;* @author SchizoDuckie;* @copyright SchizoDuckie 2008;* @version 1.0;* @access public;*/;class FormValidator;public static $regexes = Array;date' => "^[0-9]{1,2}[-/][0-9]{1,2}[-/][0-9]{4}\$;amount' => "^[-]?[0-9]+\$;number' => "^[-]?[0-9,]+\$;alfanum' => "^[0-9a-zA-Z,.-_\\s\?\!]+\$;not_empty' => "[a-z0-9A-Z]+;words' => "^[A-Za-z]+[A-Za-z \\s]*\$;phone' => "^[0-9]{10,11}\$;zipcode' => "^[1-9][0-9]{3}[a-zA-Z]{2}\$;plate' => "^([0-9a-zA-Z]{2}[-]){2}[0-9a-zA-Z]{2}\$;price' => "^[0-9.,]*(([.,][-])|([.,][0-9]{2}))?\$;2digitopt' => "^\d+(\,\d{2})?\$;2digitforce' => "^\d+\,\d\d\$;anything' => "^[\d\D]{1,}\$;private $validations, $sanatations, $mandatories, $errors, $corrects, $fields;public function __construct($validations=array(), $mandatories = array(), $sanatations = array());$this->validations = $validations;$this->sanatations = $sanatations;$this->mandatories = $mandatories;$this->errors = array();$this->corrects = array();/**;* Validates an array of items (if needed) and returns true or false;*;*/;public function validate($items);$this->fields = $items;$havefailures = false;foreach($items as $key=>$val);if((strlen($val) == 0 || array_search($key, $this->validations) === false) && array_search($key, $this->mandatories) === false);$this->corrects[] = $key;continue;$result = self::validateItem($val, $this->validations[$key]);if($result === false);$havefailures = true;$this->addError($key, $this->validations[$key]);else;$this->corrects[] = $key;return(!$havefailures);/**;*;* Adds unvalidated class to thos elements that are not validated. Removes them from classes that are.;*/;public function getScript();if(!empty($this->errors));$errors = array();foreach($this->errors as $key=>$val) { $errors[] = "'INPUT[name={$key}]'", };$output = '$$('.implode(',', $errors).').addClass("unvalidated"),;$output.= "new FormValidator().showMessage(),;if(!empty($this->corrects));$corrects = array();foreach($this->corrects as $key) { $corrects[] = "'INPUT[name={$key}]'", };$output.= '$$('.implode(',', $corrects).').removeClass("unvalidated"),;$output = ";return($output);/**;*;* Sanatizes an array of items according to the $this->sanatations;* sanatations will be standard of type string, but can also be specified.;* For ease of use, this syntax is accepted;* $sanatations = array('fieldname', 'otherfieldname'=>'float');*/;public function sanatize($items);foreach($items as $key=>$val);if(array_search($key, $this->sanatations) === false && !array_key_exists($key, $this->sanatations)) continue;$items[$key] = self::sanatizeItem($val, $this->validations[$key]);return($items);/**;*;* Adds an error to the errors array.;*/;private function addError($field, $type='string');$this->errors[$field] = $type;/**;*;* Sanatize a single var according to $type.;* Allows for static calling to allow simple sanatization;*/;public static function sanatizeItem($var, $type);$flags = NULL;switch($type);case 'url;$filter = FILTER_SANITIZE_URL;break;case 'int;$filter = FILTER_SANITIZE_NUMBER_INT;break;case 'float;$filter = FILTER_SANITIZE_NUMBER_FLOAT;$flags = FILTER_FLAG_ALLOW_FRACTION | FILTER_FLAG_ALLOW_THOUSAND;break;case 'email;$var = substr($var, 0, 254);$filter = FILTER_SANITIZE_EMAIL;break;case 'string;default;$filter = FILTER_SANITIZE_STRING;$flags = FILTER_FLAG_NO_ENCODE_QUOTES;break;$output = filter_var($var, $filter, $flags);return($output);/**;*;* Validates a single var according to $type.;* Allows for static calling to allow simple validation.;*;*/;public static function validateItem($var, $type);if(array_key_exists($type, self::$regexes));$returnval = filter_var($var, FILTER_VALIDATE_REGEXP, array("options"=> array("regexp"=>'!'.self::$regexes[$type].'!i'))) !== false;return($returnval);$filter = false;switch($type);case 'email;$var = substr($var, 0, 254);$filter = FILTER_VALIDATE_EMAIL;break;case 'int;$filter = FILTER_VALIDATE_INT;break;case 'boolean;$filter = FILTER_VALIDATE_BOOLEAN;break;case 'ip;$filter = FILTER_VALIDATE_IP;break;case 'url;$filter = FILTER_VALIDATE_URL;break;return ($filter === false)? false: filter_var($var, $filter) !== false? true: false;Of course, keep in mind that you need to do your sql query escaping too depending on what type of db your are using (mysql_real_escape_string() is useless for an sql server for instance). You probably want to handle this automatically at your appropriate application layer like an ORM. Also, as mentioned above: for outputting to html use the other php dedicated functions like htmlspecialchars,);For really allowing HTML input with like stripped classes and/or tags depend on one of the dedicated xss validation packages. DO NOT WRITE YOUR OWN REGEXES TO PARSE HTML!    
CONTENT;
        $answer->question_id = 149;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          stdClass is a another great PHP feature.;You can create a anonymous PHP class.;Lets check an example.;$page=new stdClass();$page->name='Home;$page->status=1;now think you have a another class that will initialize with a page object and execute base on it.;currentpage = $pageobj;public function show();echo $this->currentpage->name;$state = ($this->currentpage->status == 1)? 'Active': 'Inactive;echo 'This is '. $state. ' page;Now you have to create a new PageShow object with a Page Object.;Here no need to write a new Class Template for this you can simply use stdClass to create a Class on the fly.;$pageview=new PageShow($page);$pageview->show()  
CONTENT;
        $answer->question_id = 150;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          if (isSet($_SESSION['started']));if((mktime() - $_SESSION['started'] - 60*30) > 0);//Logout, destroy session, etc.;else;$_SESSION['started'] = mktime() 
CONTENT;
        $answer->question_id = 151;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I think the client looks like a normal asynchronous AJAX request, but you expect it to take a "long time" to come back.;The server then looks like this.;while (!hasNewData());usleep(50);outputNewData();So, the AJAX request goes to the server, probably including a timestamp of when it was last update so that your hasNewData() knows what data you have already got.;The server then sits in a loop sleeping until new data is available. All the while, your AJAX request is still connected, just hanging there waiting for data.;Finally, when new data is available, the server gives it to your AJAX request and closes the connection.    
CONTENT;
        $answer->question_id = 152;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It should be contained in the $_SERVER['REMOTE_ADDR'] variable. 
CONTENT;
        $answer->question_id = 153;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Notice: Undefined Index;Happens when you try to access an array by a key that does not exist in the array.;A typical example for an Undefined Index notice would be (demo);$data = array('foo' => '42', 'bar');echo $data['spinach'];echo $data[1];Both spinach and 1 do not exist in the array, causing an E_NOTICE to be triggered.;The solution is to make sure the index or offset exists prior to accessing that index. This may mean that you need to fix a bug in your program to ensure that those indexes do exist when you expect them to. Or it may mean that you need to test whether the indexes exist using array_key_exists or isset;$data = array('foo' => '42', 'bar');if (array_key_exists('spinach', $data));echo $data['spinach'];else;echo 'No key spinach in array;If you have code like:...;then $_POST['message'] will not be set when this page is first loaded and you will get the above error. Only when the form is submitted and this code is run a second time will the array index exist. You typically check for this with;if ($_POST).. // if the $_POST array is not empty;// or;if ($_SERVER['REQUEST_METHOD'] == 'POST').. // page was requested with POST;Related Questions;Reference: “Notice: Undefined variable” and “Notice: Undefined index”;All PHP "Notice: Undefined Index" Questions on Stackoverflow;http://php.net/arrays  
CONTENT;
        $answer->question_id = 154;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Old topic, I know. Found an issue with someone using PDO and the answer was to use this for the PDO Connection string;$pdo = new PDO;mysql:host=mysql.example.com,dbname=example_db;username;password;array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8"));The site I took this from is down, was able to get it using google cache luckily.    
CONTENT;
        $answer->question_id = 156;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Difference between _once functions and without _once functions;without _once code will be included again whereas with _once functions PHP keeps track of the included files and will include it only once.;Difference between require and include;If a required file is not found PHP will emit a fatal error whereas for include only a warning will be emitted.   
CONTENT;
        $answer->question_id = 157;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I usually use usort, and pass my own comparison function. In this case, it is very simple;function compareOrder($a, $b);return $a['order'] - $b['order'];usort($array, 'compareOrder')  
CONTENT;
        $answer->question_id = 158;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          As scompt.com explained, the query might fail. Use this code the get the error of the query or the correct result;$username = $_POST['username'];$password = $_POST['password'];$result = mysql_query(;SELECT * FROM Users;WHERE UserName LIKE '".mysql_real_escape_string($username).";);if($result);while($row = mysql_fetch_array($result));echo $row['FirstName'];else;echo 'Invalid query: '. mysql_error(). "\n;echo 'Whole query: '. $query;See the documentation for mysql_query() for further information.;The actual error was the single quotes so that the variable $username was not parsed. But you should really use mysql_real_escape_string($username) to avoid SQL injections.    
CONTENT;
        $answer->question_id = 159;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Detecting the HTTP method or so called REQUEST METHOD can be done using the following code snippet.;$method = $_SERVER['REQUEST_METHOD'];if ($method == 'POST');// Method is POST;elseif ($method == 'GET');// Method is GET;elseif ($method == 'PUT');// Method is PUT;elseif ($method == 'DELETE');// Method is DELETE;else;// Method unknown;You could also do it using a switch if you prefer this over the if-else statement.;If a method other than GET or POST is required in an html form, this is often solved using an hidden field in the form.;For more information regarding HTTP methods I would like to refer to the following StackOverflow question;HTTP protocol's PUT and DELETE and their usage in PHP  
CONTENT;
        $answer->question_id = 160;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          for example, visited URL is: http://example.com/folder1/folder2/yourfile.php?var=blabla#123;PHP codes will return;$_SERVER["DOCUMENT_ROOT"] === /home/user/www;$_SERVER["SERVER_ADDR"] === 143.34.112.23;$_SERVER['HTTP_HOST'] === example.com (or with WWW);$_SERVER["REQUEST_URI"] === /folder1/folder2/yourfile.php?var=blabla#123;FILE__ === /home/user/www/folder1/folder2/yourfile.php --->//p.s. ON WINDOWS SERVERS, instead of / is \;basename(__FILE__) === yourfile.php;DIR__ === /home/user/www/folder1/folder2 [same: dirname(__FILE__)];$_SERVER["QUERY_STRING"] === var=blabla#123;$_SERVER["REQUEST_URI"] === /folder1/folder2/yourfile.php?var=blabla#123;parse_url($_SERVER["REQUEST_URI"], PHP_URL_PATH) === /folder1/folder2/yourfile.php;$_SERVER["PHP_SELF"] === /folder1/folder2/yourfile.php;//if "YOURFILE.php" is included in "PARENTFILE.php", and "PARENTFILE.PHP?abc" is opened;$_SERVER["PHP_SELF"] === /parentfile.php;$_SERVER["REQUEST_URI"] === /parentfile.php?abc;$_SERVER["SCRIPT_FILENAME"]=== /home/user/www/parentfile.php;str_replace($_SERVER["DOCUMENT_ROOT"],'', str_replace('\\','/',__FILE__)) === /folder1/folder2/yourfile.php;For WordPress;home_url() //> http://example.com;get_stylesheet_directory_uri() //> http://example.com/wp-content/themes/THEME_NAME [same: get_bloginfo('template_url') ];get_stylesheet_directory() //> /home/www/wp-content/themes/THEME_NAME;plugin_dir_url(__FILE__) //> http://example.com/wp-content/plugins/MY-PLUGIN/ [while used inside plugin.. same as: plugins_url('',__FILE__) ];plugin_dir_path(__FILE__) //> /home/www/wp-content/plugins/MY-PLUGIN/ [while used inside plugin];//===============MY EXAMPLES - USAGE============//;(i.e. wordpress is installed in subdirectory: http://example.com/wpdir/);define('domainURL', (((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS']!=='off') || $_SERVER['SERVER_PORT']==443)? 'https://':'http://').$_SERVER['HTTP_HOST']);// -----> http://example.com;define('homeURL', home_url());// -----> http://example.com/wpdir/;define('homeFOLD', str_replace(domainURL,'', homeURL));// -----> /wpdir/;define('requestURI', $_SERVER["REQUEST_URI"]);// -----> /wpdir/any-page?with=parameters;define('requestURIfromHome', str_replace(homeFOLD, '',requestURI));// -----> /any-page?with=parameters;define('requestURIWithoutParametr',parse_url(requestURIfromHome, PHP_URL_PATH));// -----> /wpdir/any-page;define('currentURL', domainURL.requestURI);// -----> http://example.com/wpdir/any-page?with=parameters;define('THEME_URL', str_replace(domainURL, '', get_template_directory_uri())),plugin_dir_url(__FILE__)));// -----> http://example.com/wpdir/wp-content/themes/THE-THEME-NAME/;define('PLUGIN_URL', str_replace(domainURL, '', plugin_dir_url(__FILE__)));// -----> http://example.com/wpdir/wp-content/plugins/THE-PLUGIN-NAME/;(Notice: DIRECTORY_SEPARATOR returns \ for Windows-type hostings, instead of /)   
CONTENT;
        $answer->question_id = 161;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          To display all errors you need to;1. Have these lines in the PHP script you're calling from the browser (typically index.php);error_reporting(E_ALL);ini_set('display_errors', 1);2.(a) Make sure that this script has no syntax errors;—or—;2.(b) Set display_errors = On in your php.ini;Otherwise, it can't even run those 2 lines!;You can check for syntax errors in your script by running (at the command line);php -l index.php;If you include the script from another PHP script then it will display syntax errors in the included script. For example;index.php;error_reporting(E_ALL);ini_set('display_errors', 1);// Any syntax errors here will result in a blank screen in the browser;include 'my_script.php;my_script.php;adjfkj // This syntax error will be displayed in the browser 
CONTENT;
        $answer->question_id = 162;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          $arr = array(9 => 'apple', 7 => 'orange', 13 => 'plum');echo reset($arr), // echoes 'apple;If you don't want to lose the current pointer position, just create an alias for the array.  
CONTENT;
        $answer->question_id = 163;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          private - can be accessed from WITHIN the class only;protected - can be accessed from WITHIN the class and INHERITING classes;public - can be accessed from code OUTSIDE the class as well;This applies to functions as well as variables.  
CONTENT;
        $answer->question_id = 164;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Most of these answers are forgetting a very important step!;header("Location: myOtherPage.php");die();Leaving that vital second line out might see you end up on The Daily WTF. The problem is that browsers do not have to respect the headers which your page return, so with headers being ignored, the rest of the page will be executed without a redirect.    
CONTENT;
        $answer->question_id = 165;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          As per PHP Documentation;What does thread safety mean when downloading PHP?;Thread Safety means that binary can work in a multithreaded webserver;context, such as Apache 2 on Windows. Thread Safety works by creating;a local storage copy in each thread, so that the data won't collide;with another thread.;So what do I choose? If you choose to run PHP as a CGI binary, then;you won't need thread safety, because the binary is invoked at each;request. For multithreaded webservers, such as IIS5 and IIS6, you;should use the threaded version of PHP.;Following Libraries are not thread safe. They are not recommended for use in a multi-threaded environment.;SNMP (Unix);mSQL (Unix);IMAP (Win/Unix);Sybase-CT (Linux, libc5)  
CONTENT;
        $answer->question_id = 166;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Collations affect how data is sorted and how strings are compared to each other. That means you should use the collation that most of your users expect.;Example from the documentation;utf8_general_ci also is satisfactory;for both German and French, except;that ‘ß’ is equal to ‘s’, and not to;‘ss’. If this is acceptable for your;application, then you should use;utf8_general_ci because it is faster.;Otherwise, use utf8_unicode_ci because;it is more accurate.;So - it depends on your expected user base and on how much you need correct sorting. For an English user base, utf8_general_ci should suffice, for other languages, like Swedish, special collations have been created.    
CONTENT;
        $answer->question_id = 167;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          View Hours and Minuts and Seconds..;$date1 = "2008-11-01 22:45:00";$date2 = "2009-12-04 13:44:01";$diff = abs(strtotime($date2) - strtotime($date1));$years = floor($diff / (365*60*60*24));$months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));$days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));$hours = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24 - $days*60*60*24)/ (60*60));$minuts = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24 - $days*60*60*24 - $hours*60*60)/ 60);$seconds = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24 - $days*60*60*24 - $hours*60*60 - $minuts*60));printf("%d years, %d months, %d days, %d hours, %d minuts\n, %d seconds\n", $years, $months, $days, $hours, $minuts, $seconds)    
CONTENT;
        $answer->question_id = 168;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          With PHP heading in a more object-oriented direction, I'm surprised nobody here has referenced the built-in DateTime class;$now = new DateTime();$year = $now->format("Y");or one-liner with class member access on instantiation (php>=5.4);$year = (new DateTime)->format("Y")    
CONTENT;
        $answer->question_id = 169;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It means you are testing, evaluating, or printing a variable that you have not yet assigned anything to. It means you either have a typo, or you need to check that the variable was initialized to something first. Check your logic paths, it may be set in one path but not in another.  
CONTENT;
        $answer->question_id = 170;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Many commenters in this question don't understand how arrays work in PHP. From the array documentation;A key may be either an integer or a string. If a key is the standard representation of an integer, it will be interpreted as such (i.e. "8" will be interpreted as 8, while "08" will be interpreted as "08"). Floats in key are truncated to integer. The indexed and associative array types are the same type in PHP, which can both contain integer and string indices.;In other words, there is no such thing as an array key of "8" because it will always be (silently) converted to the integer 8. So trying to differentiate between integers and numeric strings is unnecessary.;If you want the most efficient way to check an array for non-integer keys without making a copy of part of the array (like array_keys() does) or all of it (like foreach does);for (reset($my_array), is_int(key($my_array)), next($my_array));$onlyIntKeys = is_null(key($my_array));This works because key() returns NULL when the current array position is invalid and NULL can never be a valid key (if you try to use NULL as an array key it gets silently converted to "").   
CONTENT;
        $answer->question_id = 171;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Any simple constraint should do the job, if an exception is acceptable. Examples;primary key if not surrogate;unique constraint on a column;multi-column unique constraint;Sorry is this seems deceptively simple. I know it looks bad confronted to the link you share with us.,-;But I neverleless give this answer, because it seem to fill your need. (If not, it may trigger your updating your requirements, which would be "a Good Thing"(TM) also).;Edited: If an insert would break the database unique constraint, an exception is throw at the database level, relayed by the driver. It will certainly stop your script, with a failure. It must be possible in PHP to adress that case...  
CONTENT;
        $answer->question_id = 172;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You might also be interested in https://github.com/phadej/igbinary - which provides a different serialization 'engine' for PHP.;My random/arbitrary 'performance' figures, using PHP 5.3.5 on a 64bit platform show;JSON;JSON encoded in 2.180496931076 seconds;JSON decoded in 9.8368630409241 seconds;serialized "String" size: 13993;Native PHP;PHP serialized in 2.9125759601593 seconds;PHP unserialized in 6.4348418712616 seconds;serialized "String" size: 20769;Igbinary;WIN igbinary serialized in 1.6099879741669 seconds;WIN igbinrary unserialized in 4.7737920284271 seconds;WIN serialized "String" Size: 4467;So, it's quicker to igbinary_serialize() and igbinary_unserialize() and uses less disk space.;I used the fillArray(0, 3) code as above, but made the array keys longer strings.;igbinary can store the same data types as PHP's native serialize can (So no problem with objects etc) and you can tell PHP5.3 to use it for session handling if you so wish.;See also http://ilia.ws/files/zendcon_2010_hidden_features.pdf - specifically slides 14/15/16    
CONTENT;
        $answer->question_id = 173;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Interestingly enough, the foreach loop is actually the most efficient way of doing this.;Since the OP specifically asked about efficiency, it should be pointed out that all the current answers are in fact much less efficient than a foreach.;I did a benchmark on this with php 5.4, and the reset/key pointer method (accepted answer) seems to be about 7 times slower than a foreach. Other approaches manipulating the entire array (array_keys, array_flip) are obviously even slower than that and become much worse when working with a large array.;Foreach is not inefficient at all, feel free to use it!;Edit 2015-03-03;Benchmark scripts have been requested, I don't have the original ones but made some new tests instead. This time I found the foreach only about twice as fast as reset/key. I used a 100-key array and ran each method a million times to get some noticeable difference, here's code of the simple benchmark;$array = [];for($i=0, $i < 100, $i++);$array["key$i"] = $i;for($i=0, $start = microtime(true), $i $firstValue);break;echo "foreach to get first key and value: ". (microtime(true) - $start). " seconds;for($i=0, $start = microtime(true), $i < 1000000, $i++);$firstValue = reset($array);$firstKey = key($array);echo "reset+key to get first key and value: ". (microtime(true) - $start). " seconds;for($i=0, $start = microtime(true), $i < 1000000, $i++);reset($array);$firstKey = key($array);echo "reset+key to get first key: ". (microtime(true) - $start). " seconds;for($i=0, $start = microtime(true), $i < 1000000, $i++);$firstKey = array_keys($array)[0];echo "array_keys to get first key: ". (microtime(true) - $start). " seconds;On my php 5.5 this outputs;foreach to get first key and value: 0.15501809120178 seconds;reset+key to get first key and value: 0.29375791549683 seconds;reset+key to get first key: 0.26421809196472 seconds;array_keys to get first key: 10.059751987457 seconds;reset+key http://3v4l.org/b4DrN/perf#tabs;foreach http://3v4l.org/gRoGD/perf#tabs    
CONTENT;
        $answer->question_id = 174;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The problem with this whole discussion lies in the use of PHP as a templating language. No one is arguing that tags should be used in application source files.;However PHP's embeddable syntax allows it to be used as a powerful template language, and templates should be as simple and readable as possible. Many have found it easier to use a much slower, add-on templating engine like Smarty, but for those purists among us who demand fast rendering and a pure code base, PHP is the only way to write templates.;The ONLY valid argument AGAINST the use of short tags is that they aren't supported on all servers. Comments about conflicts with XML documents are ludicrous, because you probably shouldn't be mixing PHP and XML anyway, and if you are, you should be using PHP to output strings of text. Security should never be an issue, because if you're putting sensitive information like database access credentials inside of template files, well then, you've got bigger issues!;Now then, as to the issue of server support, admittedly one has to be aware of their target platform. If shared hosting is a likely target, then short tags should be avoided. But for many professional developers (such as myself), the client acknowledges (and indeed, depends on the fact) that we will be dictating the server requirements. Often I'm responsible for setting up the server myself.;And we NEVER work with a hosting provider that does not give us absolute control of the server configuration -- in such a case we could count on running to much more trouble than just losing short tag support. It just doesn't happen.;So yes -- I agree that the use of short tags should be carefully weighed. But I also firmly believe that it should ALWAYS be an option, and that a developer who is aware of his environment should feel free to use them.    
CONTENT;
        $answer->question_id = 175;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Here is DEBUG;PARSE_URL (documentation);$x = parse_url('http://example.com/myfolder/sympony.mp3?aa=1&&bb=2?cc=;gggg')#;$x['scheme'] => 'http;$x['host'] => 'example.com;$x['path'] => '/myfolder/sympony.mp3';$x['query'] => 'aa=1&bb=2?cc=;$x['fragment'] => 'gggg;PATHINFO (documentation);$x = pathinfo('http://example.com/myfolder/sympony.mp3?aa=1&&bb=2?cc=;gggg')#;$x['dirname'] => 'http://example.com/myfolder;$x['basename'] => 'sympony.mp3?aa=1&bb=2?cc=#gggg;$x['extension'] => 'mp3?aa=1&bb=2?cc=#gggg;$x['filename'] => 'sympony;other things;dirname(parse_url($url)['path']) ----> /myfolder;basename(parse_url($url)) ----> sympony.mp3;pathinfo(parse_url($url)['path'], PATHINFO_EXTENSION) ----> mp3  
CONTENT;
        $answer->question_id = 176;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The below examples show how the TIMESTAMP date type changed the values after changing the time-zone to 'america/new_york' where DATETIME is unchanged.;mysql> show variables like '%time_zone%;+------------------+---------------------+;Variable_name | Value;+------------------+---------------------+;system_time_zone | India Standard Time;time_zone | Asia/Calcutta;+------------------+---------------------+;mysql> create table datedemo;-> mydatetime datetime;-> mytimestamp timestamp;->);mysql> insert into datedemo values ((now()),(now()));mysql> select * from datedemo;+---------------------+---------------------+;mydatetime | mytimestamp;+---------------------+---------------------+;2011-08-21 14:11:09 | 2011-08-21 14:11:09;+---------------------+---------------------+;mysql> set time_zone="america/new_york;mysql> select * from datedemo;+---------------------+---------------------+;mydatetime | mytimestamp;+---------------------+---------------------+;2011-08-21 14:11:09 | 2011-08-21 04:41:09;+---------------------+---------------------+;I've converted my answer into article so more people can find this useful, MySQL: Datetime Versus Timestamp Data Types.   
CONTENT;
        $answer->question_id = 177;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          to avoid repetitions of users when they connect from different origin;select distinct User from mysql.user  
CONTENT;
        $answer->question_id = 178;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This question has been answered but I figured I'd throw in my $0.02. I often use a CHAR(0), where '' == true and NULL == false.;From mysql docs;CHAR(0) is also quite nice when you need a column that can take only;two values: A column that is defined as CHAR(0) NULL occupies only one;bit and can take only the values NULL and '' (the empty string).    
CONTENT;
        $answer->question_id = 179;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          People often talk about performance, reads vs. writes, foreign keys, etc. but there's one other must-have feature for a storage engine in my opinion: atomic updates.;Try this;Issue an UPDATE against your MyISAM table that takes 5 seconds.;While the UPDATE is in progress, say 2.5 seconds in, hit Ctrl-C to interrupt it.;Observe the effects on the table. How many rows were updated? How many were not updated? Is the table even readable, or was it corrupted when you hit Ctrl-C?;Try the same experiment with UPDATE against an InnoDB table, interrupting the query in progress.;Observe the InnoDB table. Zero rows were updated. InnoDB has assured you have atomic updates, and if the full update could not be committed, it rolls back the whole change. Also, the table is not corrupt. This works even if you use killall -9 mysqld to simulate a crash.;Performance is desirable of course, but not losing data should trump that.    
CONTENT;
        $answer->question_id = 180;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you do not need MySQLdb, but would accept any library, I would very, very much recommend MySQL Connector/Python from MySQL: http://dev.mysql.com/downloads/connector/python/.;It is one package (around 110k), pure Python, so it is system independent, and dead simple to install. You just download, double-click, confirm license agreement and go. There is no need for Xcode, MacPorts, compiling, restarting …;Then you connect like;import mysql.connector;cnx = mysql.connector.connect(user='scott', password='tiger;host='127.0.0.1';database='employees');try;cursor = cnx.cursor();cursor.execute("";select 3 from your_table;"");result = cursor.fetchall();print result;finally;cnx.close()   
CONTENT;
        $answer->question_id = 181;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Here's a fairly gnarly way of doing it. Found it somewhere, can't take any credit;mysql --user=wibble --password wobble -B -e "select * from vehicle_categories," | sed "s/'/\'/,s/\t/\",\"/g,s/^/\"/,s/$/\"/,s/\n//g" > vehicle_categories.csv;Works pretty well. Once again though a regex proves write only.;Regex Explanation;s/// means substitute what's between the first // with what's between the second //;the "g" at the end is a modifier that means "all instance, not just first;^ (in this context) means beginning of line;$ (in this context) means end of line;So, putting it all together;s/'/\'/ replace ' with \;s/\t/\",\"/g replace all \t (tab) with ",;s/^/\"/ at the beginning of the line place a;s/$/\"/ at the end of the line place a;s/\n//g replace all \n (newline) with nothing  
CONTENT;
        $answer->question_id = 183;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There's a GROUP Aggregate function, GROUP_CONCAT.;Edit: I was writing this answer when I was caught-short by a yellow bar popping up at the top telling me someone else just posted the exact same answer. He is winner:)   
CONTENT;
        $answer->question_id = 184;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          For me the trigger approach has worked the best, but I found a snag with the approach. Consider the basic trigger to set a date field to the current time on insert;CREATE TRIGGER myTable_OnInsert BEFORE INSERT ON `tblMyTable`;FOR EACH ROW SET NEW.dateAdded = NOW();This is usually great, but say you want to set the field manually via INSERT statement, like so;INSERT INTO tblMyTable(name, dateAdded) VALUES('Alice', '2010-01-03 04:30:43');What happens is that the trigger immediately overwrites your provided value for the field, and so the only way to set a non-current time is a follow up UPDATE statement--yuck! To override this behavior when a value is provided, try this slightly modified trigger with the IFNULL operator;CREATE TRIGGER myTable_OnInsert BEFORE INSERT ON `tblMyTable`;FOR EACH ROW SET NEW.dateAdded = IFNULL(NEW.dateAdded, NOW());This gives the best of both worlds: you can provide a value for your date column and it will take, and otherwise it'll default to the current time. It's still ghetto relative to something clean like DEFAULT GETDATE() in the table definition, but we're getting closer! 
CONTENT;
        $answer->question_id = 185;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Disclaimer: I'm not a MySQL expert... but this is my understanding of the issues.;I think TEXT is stored outside the mysql row, while I think VARCHAR is stored as part of the row. There is a maximum row length for mysql rows.. so you can limit how much other data you can store in a row by using the VARCHAR.;Also due to VARCHAR forming part of the row, I suspect that queries looking at that field will be slightly faster than those using a TEXT chunk.   
CONTENT;
        $answer->question_id = 186;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There is a very easy way with phpmyadmin under the "operations" tab, you can set, in the table options, autoincrement to the number you want.   
CONTENT;
        $answer->question_id = 187;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Generate an SQL script to transfer each table in your source database to the destination database.;You must create the destination database before running the script generated from the command.;SELECT concat('RENAME TABLE $1.',table_name, ' TO $2.',table_name, ',');FROM information_schema.TABLES;WHERE table_schema='$1';($1 and $2 are source and target respectively);This will generate a set of SQL commands that you'll have to then run.  
CONTENT;
        $answer->question_id = 188;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I know this is old, but I'll add this note in case anyone else (like me) arrives at this page while trying to find information on INSERT..IGNORE.;As mentioned above, if you use INSERT..IGNORE, errors that occur while executing the INSERT statement are treated as warnings instead.;One thing which is not explicitly mentioned is that INSERT..IGNORE will cause invalid values will be adjusted to the closest values when inserted (whereas invalid values would cause the query to abort if the IGNORE keyword was not used).  
CONTENT;
        $answer->question_id = 189;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          See the mysql manual, Unicode Character Sets section;For any Unicode character set;operations performed using the;general_ci collation are faster than those for the _unicode_ci collation.;For example, comparisons for the;utf8_general_ci collation are faster;but slightly less correct, than;comparisons for utf8_unicode_ci. The;reason for this is that;utf8_unicode_ci supports mappings such;as expansions, that is, when one;character compares as equal to;combinations of other characters. For;example, in German and some other;languages “ß” is equal to “ss”.;utf8_unicode_ci also supports;contractions and ignorable characters.;utf8_general_ci is a legacy collation;that does not support expansions;contractions, or ignorable characters.;It can make only one-to-one;comparisons between characters.;So to summarize, utf_general_ci uses a smaller and less correct (according to the standard) set of comparisons than utf_unicode_ci which should implement the entire standard. The general_ci set will be faster because there is less computation to do.  
CONTENT;
        $answer->question_id = 190;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Have you tried this?;UNIQUE KEY `thekey` (`user`,`email`,`address`) 
CONTENT;
        $answer->question_id = 191;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The implicit join ANSI syntax is older, less obvious and not recommended.;In addition, the relational algebra allows interchangeability of the predicates in the WHERE clause and the INNER JOIN, so even INNER JOIN queries with WHERE clauses can have the predicates rearrranged by the optimizer.;I recommend you write the queries in the most readble way possible.;Sometimes this includes making the INNER JOIN relatively "incomplete" and putting some of the criteria in the WHERE simply to make the lists of filtering criteria more easily maintainable.;For example, instead of;SELECT *;FROM Customers c;INNER JOIN CustomerAccounts ca;ON ca.CustomerID = c.CustomerID;AND c.State = 'NY;INNER JOIN Accounts a;ON ca.AccountID = a.AccountID;AND a.Status = 1;Write;SELECT *;FROM Customers c;INNER JOIN CustomerAccounts ca;ON ca.CustomerID = c.CustomerID;INNER JOIN Accounts a;ON ca.AccountID = a.AccountID;WHERE c.State = 'NY;AND a.Status = 1;But it depends, of course.   
CONTENT;
        $answer->question_id = 192;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          select `cityname` from `codcities` group by `cityname` having count(*)>=2;This is the similar query you have asked for and its 200% working and easy too.;Enjoy!!!  
CONTENT;
        $answer->question_id = 193;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Yet another solution is to use a correlated subquery;select yt.id, yt.rev, yt.contents;from YourTable yt;where rev =;(select max(rev) from YourTable st where yt.id=st.id);Having an index on (id,rev) renders the subquery almost as a simple lookup...;Following are comparisons to the solutions in @AdrianCarneiro's answer (subquery, leftjoin), based on MySQL measurements with InnoDB table of ~1million records, group size being: 1-3.;While for full table scans subquery/leftjoin/correlated timings relate to each other as 6/8/9, when it comes to direct lookups or batch (id in (1,2,3)), subquery is much slower then the others (Due to rerunning the subquery). However I couldnt differentiate between leftjoin and correlated solutions in speed.;One final note, as leftjoin creates n*(n+1)/2 joins in groups, its performance can be heavily affected by the size of groups...  
CONTENT;
        $answer->question_id = 194;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          One way as suggested in this post is to mention version in pip as;pip install MySQL_python==1.2.2   
CONTENT;
        $answer->question_id = 195;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          More simply done in one line of SQL;SELECT * FROM information_schema.columns WHERE column_name = 'column_name   
CONTENT;
        $answer->question_id = 196;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I think this will give you the desired result;SELECT home, MAX(datetime);FROM my_table;GROUP BY home;BUT if you need other columns as well, just make a join with the original table (check Michael La Voie answer);Best regards.   
CONTENT;
        $answer->question_id = 197;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          We can use this command to import SQL from command line;mysql -u username -p password db_name < file.sql;For example, if the username is root and password is password. And you have a database name as bank and the SQL file is bank.sql. Then, simply do like this;mysql -u root -p password bank < bank.sql;Remember where your SQL file is. If your SQL file is in the Desktop folder/directory then go the desktop directory and enter the command like this;~? cd Desktop;~/Desktop? mysql -u root -p password bank < bank.sql;And if your are in the Project directory and your SQL file is in the Desktop directory. If you want to access it from the Project directory then you can do like this;~/Project? mysql -u root -p password bank < ~/Desktop/bank.sql   
CONTENT;
        $answer->question_id = 198;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          First of all, to compare the two first you should distinguish queries with subqueries to;a class of subqueries that always have corresponding equivalent query written with joins;a class of subqueries that can not be rewritten using joins;For the first class of queries a good RDBMS will see joins and subqueries as equivalent and will produce same query plans.;These days even mysql does that.;Still, sometimes it does not, but this does not mean that joins will always win - I had cases when using subqueries in mysql improved performance. (For example if there is something preventing mysql planner to correctly estimate the cost and if the planner doesn't see the join-variant and subquery-variant as same then subqueries can outperform the joins by forcing a certain path).;Conclusion is that you should test your queries for both join and subquery variants if you want to be sure which one will perform better.;For the second class the comparison makes no sense as those queries can not be rewritten using joins and in these cases subqueries are natural way to do the required tasks and you should not discriminate against them.   
CONTENT;
        $answer->question_id = 199;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Adding to John P's answer;For a linux system, steps 1-6 can be accomplished with these commands;mysqldump -u [username] -p[root_password] [database_name] >;dumpfilename.sql;DROP DATABASE database_name;sudo /etc/init.d/mysqld stop;sudo rm /var/lib/mysql/ibdata1;sudo rm /var/lib/mysql/ib_logfile;(and delete any other ib_logfile's that may be named ib_logfile0, ib_logfile1 etc...);sudo /etc/init.d/mysqld start;create database [database_name];mysql -u [username]-p[root_password] [database_name] < dumpfilename.sql  
CONTENT;
        $answer->question_id = 200;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I arrived at a different solution, which is to get the IDs for the last post within each group, then select from the messages table using the result from the first query as the argument for a WHERE x IN construct;SELECT id, name, other_columns;FROM messages;WHERE id IN;SELECT MAX(id);FROM messages;GROUP BY name;I don't know how this performs compared to some of the other solutions, but it worked spectacularly for my table with 3+ million rows. (4 second execution with 1200+ results);This should work both on MySQL and SQL Server.  
CONTENT;
        $answer->question_id = 201;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          select;id;case;when report_type = 'P;then amount;when report_type = 'N;then -amount;else null;from table    
CONTENT;
        $answer->question_id = 203;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          try this one;SELECT COUNT(id);FROM stats;GROUP BY EXTRACT(YEAR_MONTH FROM record_date);EXTRACT(unit FROM date) function is better as less grouping is used and the function return a number value.;Comparison condition when grouping will be faster than DATE_FORMAT function (which return a string value). Try using function|field that return non-string value for SQL comparison condition (WHERE, HAVING, ORDER BY, GROUP BY).   
CONTENT;
        $answer->question_id = 204;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I have several computers, 32 and 64 bits processor, they run on Ubuntu Linux, Maverick (10.10) release.;I had the same problem, and for me, the;sudo apt-get install libmysql-ruby libmysqlclient-dev;did the job!!!    
CONTENT;
        $answer->question_id = 205;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There is a Schema Synchronization Tool in SQLyog (commercial) which generates SQL for synchronizing two databases.;share    206
        873 In PHP;function cloneTable($table,$newTable);global $admin;$db_check = @mysql_select_db ($table);$getTables = $admin->query("SHOW TABLES");$tables = array();while($row = mysql_fetch_row($getTables));$tables[] = $row[0];$createTable = mysql_query("CREATE DATABASE `$newTable` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci,") or die(mysql_error());foreach($tables as $cTable);$db_check = @mysql_select_db ($newTable);$create = $admin->query("CREATE TABLE $cTable LIKE ".$table.".".$cTable);if(!$create);$error = true;$insert = $admin->query("INSERT INTO $cTable SELECT * FROM ".$table.".".$cTable);return !isset($error)? true: false;// usage;$clone = cloneTable('dbname','newdbname'), // first: toCopy, second: new database  
CONTENT;
        $answer->question_id = 207;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          PDO is the standard, it's what most developers will expect to use. mysqli was essentially a bespoke solution to a particular problem, but it has all the problems of the other DBMS-specific libraries. PDO is where all the hard work and clever thinking will go.;share   209
        875 Dump all databases with all tables but skip certain tables;on github: https://github.com/rubo77/mysql-backup.sh/blob/master/mysql-backup.sh;#!/bin/bash;# mysql-backup.sh;if [ -z "$1" ], then;echo;echo "ERROR: root password Parameter missing.;exit;fi;DB_host=localhost;MYSQL_USER=root;MYSQL_PASS=$1;MYSQL_CONN="-u${MYSQL_USER} -p${MYSQL_PASS};#MYSQL_CONN=";BACKUP_DIR=/backup/mysql/;mkdir $BACKUP_DIR -p;MYSQLPATH=/var/lib/mysql/;IGNORE="database1.table1, database1.table2, database2.table1,;# strpos $1 $2 [$3];# strpos haystack needle [optional offset of an input string];strpos();local str=${1};local offset=${3};if [ -n "${offset}" ], then;str=`substr "${str}" ${offset}`;else;offset=0;fi;str=${str/${2}*/};if [ "${#str}" -eq "${#1}" ], then;return 0;fi;echo $((${#str}+${offset}));cd $MYSQLPATH;for i in */, do;if [ $i != 'performance_schema/' ], then;DB=`basename "$i"`;#echo "backup $DB->$BACKUP_DIR$DB.sql.lzo;mysqlcheck "$DB" $MYSQL_CONN --silent --auto-repair >/tmp/tmp_grep_mysql-backup;grep -E -B1 "note|warning|support|auto_increment|required|locks" /tmp/tmp_grep_mysql-backup>/tmp/tmp_grep_mysql-backup_not;grep -v "$(cat /tmp/tmp_grep_mysql-backup_not)" /tmp/tmp_grep_mysql-backup;tbl_count=0;for t in $(mysql -NBA -h $DB_host $MYSQL_CONN -D $DB -e 'show tables');do;found=$(strpos "$IGNORE" "$DB"."$t,");if [ "$found" == "" ], then;echo "DUMPING TABLE: $DB.$t;mysqldump -h $DB_host $MYSQL_CONN $DB $t --events --skip-lock-tables | lzop -3 -f -o $BACKUP_DIR/$DB.$t.sql.lzo;tbl_count=$((tbl_count + 1));fi;done;echo "$tbl_count tables dumped from database '$DB' into dir=$BACKUP_DIR;fi;done;With a little help of http://stackoverflow.com/a/17016410/1069083;It uses lzop which is much faster, see: http://pokecraft.first-world.info/wiki/Quick_Benchmark:_Gzip_vs_Bzip2_vs_LZMA_vs_XZ_vs_LZ4_vs_LZO 
CONTENT;
        $answer->question_id = 210;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In principle, I use UserDefinedVariables (prepended with @) within Stored Procedures. This makes life easier, especially when I need these variables in two or more Stored Procedures. Just when I need a variable only within ONE Stored Procedure, than I use a System Variable (without prepended @).;@Xybo;I don't understand why using @variables in StoredProcedures should be risky. Could you please explain "scope" and "boundaries" a little bit easier (for me as a newbe)?  
CONTENT;
        $answer->question_id = 211;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Try this;INSERT INTO table (id,name,age) VALUES('1','Mohammad','21') ON DUPLICATE KEY UPDATE name='Mohammad',age='21';Note;Here if id is the primary key then after first insertion with id='1' every time attempt to insert id='1' will update name and age and previous name age will change. 
CONTENT;
        $answer->question_id = 212;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This SQL grants on all databases but just basic privileges. They're enough for Drupal or Wordpress and as a nicety, allows one developer account for local projects.;GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP;INDEX, ALTER, CREATE TEMPORARY TABLES;ON *.* TO 'username'@'localhost' IDENTIFIED BY 'password  
CONTENT;
        $answer->question_id = 213;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you are using phpmyadmin then just go to the table structure;e.g.;Space usage;Data 1.5 MiB;Index 0 B;Total 1.5 Mi    
CONTENT;
        $answer->question_id = 214;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I would recommend using the Chrome extension Clockwork with the Laravel package https://github.com/itsgoingd/clockwork. It's easy to install and use.;Clockwork is a Chrome extension for PHP development, extending;Developer Tools with a new panel providing all kinds of information;useful for debugging and profiling your PHP scripts, including;information on request, headers, GET and POST data, cookies, session;data, database queries, routes, visualisation of application runtime;and more. Clockwork includes out of the box support for Laravel 4 and;Slim 2 based applications, you can add support for any other or custom;framework via an extensible API. 
CONTENT;
        $answer->question_id = 215;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          These are some different solutions I've seen. There are pros and cons to each of them, but it is for you to decide.;Issue #1: Too many fields;This is an important aspect especially when you take in to account Index-Only Scans. I see two solutions to dealing with this problem. You can update your functions to take in an optional array parameter that would contain a list of a columns to return. If this parameter is empty you'd return all of the columns in the query. This can be a little weird, based off the parameter you could retrieve an object or an array. You could also duplicate all of your functions so that you have two distinct functions that run the same query, but one returns an array of columns and the other returns an object.;public function findColumnsById($id, array $columns = array());if (empty($columns));// use *;public function findById($id);$data = $this->findColumnsById($id);Issue #2: Too many methods;I briefly worked with Propel ORM a year ago and this is based off what I can remember from that experience. Propel has the option to generate its class structure based off the existing database schema. It creates two objects for each table. The first object is a long list of access function similar to what you have currently listed, findByAttribute($attribute_value). The next object inherits from this first object. You can update this child object to build in your more complex getter functions.;Another solution would be using __call() to map non defined functions to something actionable. Your __call method would be would be able to parse the findById and findByName into different queries.;public function __call($function, $arguments);if (strpos($function, 'findBy') === 0);$parameter = substr($function, 6, strlen($function));// SELECT * FROM $this->table_name WHERE $parameter = $arguments[0];I hope this helps at least some what. 
CONTENT;
        $answer->question_id = 216;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can also use View::share() together with closures to achieve this - I just posted about this: http://www.develophp.org/2014/07/laravel-4-blade-helper-functions/;Added benefit: You don't need to create an extra class and also keep the global namespace clean.   
CONTENT;
        $answer->question_id = 217;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you are trying to get the Log using Illuminate without Laravel use;\Illuminate\Database\Capsule\Manager::getQueryLog();You could also nock up a quick function like so;function logger();$queries = \Illuminate\Database\Capsule\Manager::getQueryLog();$formattedQueries = [];foreach($queries as $query);$prep = $query['query'];foreach($query['bindings'] as $binding);$prep = preg_replace("#\?#", $binding, $prep, 1);endforeach;$formattedQueries[] = $prep;endforeach;return $formattedQueries;EDIT;updated versions seem to have query logging disabled by default (the above returns an empty array). To turn back on, when initialising the Capsule Manager, grab an instance of the connection and call the enableQueryLog method;$capsule::connection()->enableQueryLog();EDIT AGAIN;Taking the actual question into consideration, you could actually do the following to convert the current single query instead of all previous queries;$sql = $query->toSql();$bindings = $query->getBindings()    
CONTENT;
        $answer->question_id = 218;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is what is suggested by JeffreyWay in this Laracasts Discussion.;Within your app/Http directory, create a helpers.php file and add your functions.;Within composer.json, in the autoload block, add "files": ["app/Http/helpers.php"].;Run composer dump-autoload. 
CONTENT;
        $answer->question_id = 219;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'd do it this way;@if (Request::path() == '/view');// code;@endif;where '/view' is view name in routes.php.    
CONTENT;
        $answer->question_id = 220;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          if you want to use parentheses in laravel 4 and don't forget return;In Laravel 4 (at least) you need to use $a, $b in parentheses as in the example;$a = 1;$b = 1;$c = 1;$d = 1;Model::where(function ($query) use ($a, $b);return $query->where('a', '=', $a);->orWhere('b', '=', $b);->where(function ($query) use ($c, $d);return $query->where('c', '=', $c);->orWhere('d', '=', $d);This is my result  
CONTENT;
        $answer->question_id = 221;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The shortest way to solve this is starting artisan with sudo. This will give artisan all the permissions it needs and won't make any security troubles as well.;so instead starting artisan serve with;$ php artisan serve;try using;$ sudo php artisan serve;thus you wont have to make any permission changes 
CONTENT;
        $answer->question_id = 222;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I like to think of it in terms of what my code is doing and what it is responsible for, rather than "right or wrong". This is how I break apart my responsibilities;Controllers are the HTTP layer and route requests through to the underlying apis (aka, it controls the flow);Models represent the database schema, and tell the application what the data looks like, what relationships it may have, as well as any global attributes that may be necessary (such as a name method for returning a concatenated first and last name);Repositories represent the more complex queries and interactions with the models (I don't do any queries on model methods).;Search engines - classes that help me build complex search queries.;With this in mind, it makes sense every time to use a repository (whether you create interfaces.etc. is a whole other topic). I like this approach, because it means I know exactly where to go when I'm needing to do certain work.;I also tend to build a base repository, usually an abstract class which defines the main defaults - basically CRUD operations, and then each child can just extend and add methods as necessary, or overload the defaults. Injecting your model also helps this pattern to be quite robust.  
CONTENT;
        $answer->question_id = 224;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          There is a simple workaround that doesn't require you to change any code, and it works in Laravel 4 just as well.;You just use an assignment operator (=) in the expression passed to an @if statement, instead of (for instance) an operator such as ==.;@if ($variable = 'any data, be it string, variable or OOP') @endif;Then you can use it anywhere you can use any other variable;{{ $variable }};The only downside is your assignment will look like a mistake to someone not aware that you're doing this as a workaround. 
CONTENT;
        $answer->question_id = 226;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This is for setting PATH on Mac OS X Version 10.9.5.;I have tried to add $HOME because I use user profile;echo 'export PATH="$PATH:$HOME/.composer/vendor/bin"' >> ~/.bashrc;When you do not use user profile;echo 'export PATH="$PATH:~/.composer/vendor/bin"' >> ~/.bashrc;Then reload;source ~/.bashrc;I hope this help you. 
CONTENT;
        $answer->question_id = 228;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I fixed the error by adding UserTrait to User.php. Get the original User.php file here.;If you don't need the rememberMe stuff, you just need this;<?php;use Illuminate\Auth\UserTrait;use Illuminate\Auth\UserInterface;class User extends Eloquent implements UserInterface;use UserTrait 
CONTENT;
        $answer->question_id = 230;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          It seems to me there are no single solution of this error. I have tried many suggestion but at last this one works in my end.;COMPOSER=composer.json composer dump-autoload 
CONTENT;
        $answer->question_id = 232;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I have been using this for a while on my language selector code. As long as you only need to go back by just 1 page it works fine;return Redirect::to(URL::previous());It ain't the most powerful solution out there but it is super-easy and can help solve a few puzzles.:)   
CONTENT;
        $answer->question_id = 233;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          In this case you could use something like this;User::where('this', '=', 1);->whereNotNull('created_at');->whereNotNull('updated_at');->where(function($query);return $query;->whereNull('alias');->orWhere('alias', '=', 'admin');It should supply you with a query like;select * from `user`;where `user`.`this` = 1;AND `user`.`created_at` is not null;AND `user`.`updated_at` is not null;AND (`alias` is null OR `alias` = 'admin')    
CONTENT;
        $answer->question_id = 234;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Check out the sortBy method for Eloquent: http://laravel.com/docs/eloquent  
CONTENT;
        $answer->question_id = 235;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          you can use setAttribute function in Model to add a custom attribute    
CONTENT;
        $answer->question_id = 236;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I'm always using count($results_collection) 
CONTENT;
        $answer->question_id = 237;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you don't want to use composer on server then you will have to run composer install/update and download all the libraries locally and then manually upload all those files on the server i.e. Vendor Directory.;In-Case of shared hosting where you can't connect to server with shh there you might have to do that but it will take lot of time to upload all the files on server so I would recommend that you should composer and then download the libraries through composer install/update.   
CONTENT;
        $answer->question_id = 238;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Here is how we can get last inserted id in Laravel 4;public function store();$input = Input::all();$validation = Validator::make($input, user::$rules);if ($validation->passes());$user= $this->user->create(array;name' => Input::get('name');email' => Input::get('email');password' => Hash::make(Input::get('password'));$lastInsertedId= $user->id, //get last inserted record's user id value;$userId= array('user_id'=>$lastInsertedId), //put this value equal to datatable column name where it will be saved;$user->update($userId), //update newly created record by storing the value of last inserted id;return Redirect::route('users.index');return Redirect::route('users.create')->withInput()->withErrors($validation)->with('message', 'There were validation errors.')  
CONTENT;
        $answer->question_id = 239;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          I accidentally created two times create_users_table. It overrided some classes and turned rollback into ErrorException.;What you need to do is find autoload_classmap.php in vendor/composer folder and look for the specific line of code such as;CreateUsersTable' => $baseDir. '/app/database/migrations/2013_07_04_014051_create_users_table.php;and edit path. Then your rollback should be fine.  
CONTENT;
        $answer->question_id = 240;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If our CustomTableSeeder is in same directory with DatabaseSeeder we should use like below;$this->call('database\seeds\CustomTableSeeder');in our DatabaseSeeder File;then another error will be thrown that says: 'DB Class not found;then we should add our DB facade to our CustomTableSeeder File like below;use Illuminate\Support\Facades\DB;it worked for me!    
CONTENT;
        $answer->question_id = 244;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          This works pretty good too. No need to add more routes just use show method of the resource controller like this;public function show($name);switch ($name);case 'foo;$this -> foo();break;case 'bar;$this ->bar();break;defautlt;abort(404,'bad request');break;public function foo(){};publcc function bar(){};I use the default to throw custom error page.  
CONTENT;
        $answer->question_id = 245;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          You can also write a simple link tag as you normaly would and then on the href attr use;of course you need to put your css file under public/css    
CONTENT;
        $answer->question_id = 246;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          The following steps solved blank white screen problem on my Laravel 5.;Generated application key with the following command from Laravel root;php artisan key:generate;Updated config/app.php with the new key generated from the above command;key' => env('APP_KEY', 'SomeRandomString');to;key' => env('APP_KEY', 'KEY_GENERATED_FROM_ABOVE_COMMAND')    
CONTENT;
        $answer->question_id = 247;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          Use double quotes instead of single quote eg;where('customer.name', 'LIKE', "%$findcustomer%");Below is my code;public function searchCustomer($findcustomer);$customer = DB::table('customer');->where('customer.name', 'LIKE', "%$findcustomer%");->orWhere('customer.phone', 'LIKE', "%$findcustomer%");->get();return View::make("your view here")  
CONTENT;
        $answer->question_id = 248;
        $answer->user_id = $user_id;
        $answer->save();

        $answer = new Answer();
        $answer->content = <<<'CONTENT'
          If you have Laravel 5 and looking permanent solution, applicable both php artisan command line usage and Apache server use this;sudo chmod -R 777 vendor storage;echo "umask 000" | sudo tee -a /etc/resolv.conf;sudo service apache2 restart;See detailed explanation here.    
CONTENT;
        $answer->question_id = 249;
        $answer->user_id = $user_id;
        $answer->save();
        $user_id++;

    }
}